diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js
index aed4b02..661622e 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js
@@ -12608,6 +12608,7 @@ this.hasPalmOverflow=(Mojo.Host.current!==Mojo.Host.browser);
 this.bindHandlers();
 this.setupChildElements();
 this.handleModelChanged();
+this.setupScrollbars();
 
 this.controller.exposeMethods(['revealTop','revealBottom','revealElement','scrollTo',
 'getState','setState','adjustBy','scrollerSize','setMode',
@@ -12646,6 +12647,7 @@ this.controller.stopListening(sceneElement,Mojo.Event.keydown,this.keyHandler);
 }
 this.clearCorrectOverscrollTimer();
 this.removeContinueOverscrollHandler();
+this.clearScrollbarsMemory();
 },
 
 
@@ -12689,6 +12691,24 @@ this.controller.instantiateChildWidgets(scrollContainer);
 }
 },
 
+setupScrollbars: function() {
+var scrollContainer = this.controller.element;
+this.winOrientation = this.controller.stageController.getWindowOrientation();
+this.isValid = (this.controller.stageController.window._mojoStageType == "card" || this.controller.stageController.window._mojoStageType == "childcard") && (scrollContainer.parentNode === this.controller.document.body || !((scrollContainer.parentNode.className).match('-menu') !== null || (scrollContainer.parentNode.className).match('palm-popup-wrapper') !== null || (scrollContainer.parentNode.className).match('mv-value-list') !== null));
+var checkScrollbars=this.controller.scene.sceneElement.querySelector('div[id*="crollbar"]');
+this.hasScrollbars = this.isValid && checkScrollbars && checkScrollbars.id.match("-scrollbar-x") === null;
+if (this.isValid && !this.hasScrollbars) {
+var scrollbarXContent=this.controller.document.createElement('div');
+var scrollbarYContent=this.controller.document.createElement('div');
+scrollbarXContent.id=scrollContainer.id+"-scrollbar-x";
+scrollbarXContent.style.cssText="position: absolute; z-index: 100; background-color: #2e2e2e; width: 20px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; min-height: 4px; min-width: 4px; background-image: none; -webkit-palm-mouse-target: ignore; opacity: 0.8; display: none;";
+scrollbarYContent.id=scrollContainer.id+"-scrollbar-y";
+scrollbarYContent.style.cssText="position: absolute; z-index: 100; background-color: #2e2e2e; width: 4px; height: 20px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; min-height: 4px; min-width: 4px; background-image: none; -webkit-palm-mouse-target: ignore; opacity: 0.8; display: none;";
+this.controller.element.insertBefore(scrollbarYContent, this.controller.element.firstChild);
+this.controller.element.insertBefore(scrollbarXContent, this.controller.element.firstChild);
+}
+this.scrollbarVisibility = {x: false, y: false};
+},
 
 setupIndicators:function(){
 var indicatorElement,checkerFunction,side,possibleComponents;
@@ -13250,6 +13270,241 @@ this.startCorrectOverscrollTimer();
 }
 },
 
+PROPERTY_MAP: {x: 'width', y: 'height'},
+REVPROP_MAP: {x: 'height', y: 'width'},
+POS_MAP: {x: 'left', y: 'top'},
+REVPOS_MAP: {x: 'right', y: 'bottom'},
+OPPOS_MAP: {x: 'top', y: 'left'},
+SIDEPOS_MAP: {x: 'bottom', y: 'right'},
+_cachedSize: {x: 0, y: 0},
+_cachedPos: {x: 0, y: 0},
+
+getElementPosition: function(el) {
+var valueL = 0, valueT = 0;
+if (el.offsetParent) {
+do {
+valueL += el.offsetLeft;
+valueT += el.offsetTop;
+} while (el = el.offsetParent);
+}
+valueL -= this.controller.document.body.scrollLeft || 0;
+valueT -= this.controller.document.body.scrollTop || 0;
+return {top: valueT, left: valueL};
+},
+
+getFixedElement: function(element) {
+while (element.parentNode !== this.controller.scene.sceneElement && element.parentNode !== this.controller.element && element.parentNode !== this.controller.document && element.getStyle('position') !== "fixed") {
+element = element.parentNode;
+}
+return element;
+},
+
+getTopSpacer: function() {
+var topBound=0, scrollContainer = this.controller.element;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.bounds;
+var children = scrollContainer.querySelectorAll('div[class*="-spacer"],img[src*="spacer"]');
+for (var i=0; i<children.length && !topBound; i++) {
+if (children[i].nodeName == 'DIV' && (children[i].offsetHeight > 5||children[i].offsetHeight == 0)) {
+var tempEl = this.controller.document.elementFromPoint(Math.max(margins.left,0) + this.dimensions.width - 20,Math.max(margins.top,0) + 5);
+if (tempEl && tempEl !== scrollContainer && tempEl.offsetHeight < this.dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') === 'fixed') topBound = children[i].offsetHeight == 0 ? tempEl.offsetHeight : children[i].offsetHeight;
+} // Phnx fix
+} else if (children[i].nodeName == 'IMG' && children[i].offsetHeight > 5) {
+topBound = children[i].offsetHeight;
+} 
+}
+if (!topBound) {
+var tempEl = this.controller.document.elementFromPoint(Math.max(margins.left,0) + this.dimensions.width - 20,Math.max(margins.top,0) + 5);
+if (tempEl && tempEl !== scrollContainer && tempEl.offsetHeight < this.dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') === 'fixed' && tempEl.offsetHeight < this.dimensions.height / 2)
+topBound = tempEl.offsetHeight;
+}
+}
+return topBound;
+},
+
+getBottomSpacer: function() {
+var scrollContainer = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var firstBottomElement, children, bottomBound, rightBound, leftBound=0, heightCrop = -0.1;
+if (scrollContainer === this.controller.scene.sceneScroller) {
+children = scrollContainer.querySelector('div[x-mojo-element="_Menu"]');
+} else {
+var tempEl = this.getFixedElement(scrollContainer);
+if (tempEl.getStyle("position")=="fixed" && tempEl.getStyle("z-index") > 19001) {
+children = scrollContainer.querySelector('div[x-mojo-element="_Menu"]');
+} else {
+children = this.controller.scene.sceneElement.querySelector('div[x-mojo-element="_Menu"]');
+}
+}
+if (children && children.children.length > 0 && children.firstChild.getStyle('bottom') === "0px") {
+children = children.firstChild.children;
+if (parseInt(children[children.length-1].getStyle("left"),10) + children[children.length-1].offsetWidth > viewportSize.width - 20) {
+firstBottomElement = children[children.length-1];
+if (scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom') && parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10) > children[children.length-1].offsetHeight * 1.5) {
+firstBottomElement = scrollContainer;
+bottomBound = parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10);
+} else {
+bottomBound = Math.max((Math.max(this.bounds.top,0) + this.dimensions.height) - (viewportSize.height - firstBottomElement.offsetHeight), 0);
+}
+if (firstBottomElement.offsetWidth > this.dimensions.width / 2) {
+heightCrop = bottomBound;
+} else {
+if (children.length == 2 && firstBottomElement.offsetWidth < 130) {
+rightBound = (Math.max(this.bounds.left,0) + this.dimensions.width) - (viewportSize.width - firstBottomElement.offsetWidth);
+} else if (children.length == 3 && parseInt(children[1].getStyle("left"),10) < 50) {
+rightBound = (Math.max(this.bounds.left,0) + this.dimensions.width) - (viewportSize.width - firstBottomElement.offsetWidth);
+leftBound = children[1].offsetWidth;
+} else if (children.length > 3 && children.length < 6) {
+if (children.length > 4 && !children[0].parentNode.hasClassName("no-fade")) {
+heightCrop = bottomBound;
+} else if (parseInt(children[2].getStyle("left"),10) < 60 || parseInt(children[2].getStyle("left"),10) > viewportSize.width-130) {
+rightBound = firstBottomElement.offsetWidth + (parseInt(children[2].getStyle("left"),10) > 60 ? children[2].offsetWidth : 0);
+leftBound = children[1].offsetWidth + (parseInt(children[2].getStyle("left"),10) < 60 ? children[2].offsetWidth : 0);
+} else if (!children[0].parentNode.hasClassName("no-fade")) {
+heightCrop = bottomBound;
+}
+}
+}
+} else {
+if (parseInt(children[children.length-1].getStyle("left"),10) + children[children.length-1].offsetWidth < viewportSize.width/3) {
+leftBound = parseInt(children[children.length-1].getStyle("left"),10) + children[children.length-1].offsetWidth;
+} else if (!children[0].parentNode.hasClassName("no-fade") && children[children.length-1].className === 'palm-menu-group') {
+firstBottomElement = children[0].parentNode;
+bottomBound = Math.max((Math.max(this.bounds.top,0) + this.dimensions.height) - (viewportSize.height - firstBottomElement.offsetHeight), 0);
+}
+}
+if (heightCrop < 0 && !children[0].parentNode.hasClassName("no-fade") && this.bounds.bottom >= viewportSize.height - 45) {
+this.controller.get(scrollContainer.id + "-scrollbar-y").style.zIndex = 100000;
+}
+}
+if (!bottomBound) {
+children = scrollContainer.querySelectorAll('img[src*="spacer"]');
+for (var i=0; i<children.length && !bottomBound; i++) {
+if (children[i].offsetHeight > 5) { 
+var tempElPos = this.getElementPosition(children[i]);
+if (tempElPos.top > Math.max(this.bounds.top,0) + 50) {
+firstBottomElement = children[i];
+bottomBound = children[i].offsetHeight;
+heightCrop = bottomBound;
+}
+}
+}
+if (!bottomBound) {
+var tempEl = doc.elementFromPoint(this.bounds.right - 20,this.bounds.bottom - 10);
+if (tempEl && tempEl !== scrollContainer && tempEl.offsetHeight < this.dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') === "fixed" && tempEl.offsetHeight < this.dimensions.height / 2) {
+firstBottomElement = tempEl;
+bottomBound = (Math.max(this.bounds.top,0) + this.dimensions.height) - (viewportSize.height - firstBottomElement.offsetHeight);
+if (firstBottomElement.offsetWidth > this.dimensions.width / 2) {
+heightCrop = bottomBound;
+} else {
+rightBound = (Math.max(this.bounds.left,0) + this.dimensions.width) - (viewportSize.width - firstBottomElement.offsetWidth);
+}
+}
+}
+}
+}
+return {botEl: firstBottomElement, heightCrop: heightCrop, bottom: (bottomBound || 0), right: (rightBound || 0), leftBound: leftBound};
+},
+
+getScrollerInfo: function() {
+var scrollContainer = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height: this.controller.window.innerHeight, width: this.controller.window.innerWidth};
+this.bounds = scrollContainer.getBoundingClientRect();
+this.dimensions = {height: Math.min(this.bounds.bottom, viewportSize.height) - Math.max(this.bounds.top,0), width: Math.min(this.bounds.right, viewportSize.width) - Math.max(this.bounds.left,0)};
+var contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+if (!this.savedData && this.isValid) this.isValid = this.isValid && !(this.controller.model&&this.mode.match(/snap/) && (this.snapElements.x && this.snapElements.x[this.snapIndex||0].getWidth() > this.dimensions.width * 0.9 || this.snapElements.y && this.snapElements.y[this.snapIndex||0].getHeight() > this.dimensions.height * 0.9) || false);
+if (!this.savedData || this.isValid && (this.savedData.contentSize.width < contentSize.width || scrollContainer.scrollTop < 10 && (this.savedData.contentSize.height !== contentSize.height) || this.savedData.viewport.height !== viewportSize.height || this.savedData.viewport.width !== viewportSize.width || this.savedData.firstBotEl && (this.savedData.firstBotEl.getStyle('position') === 'fixed' ? this.savedData.bottom !== this.savedData.firstBotEl.offsetHeight : this.savedData.bottom * 1.5 < parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10) || this.savedData.firstBotEl === scrollContainer && this.savedData.bottom !== parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10)))) {
+var topSpacerData = this.getTopSpacer();
+var bottomSpacerData = this.getBottomSpacer();
+this.savedData = {heightCrop: bottomSpacerData.heightCrop, widthCrop: 0, firstBotEl: bottomSpacerData.botEl, topBound: topSpacerData, leftBound: bottomSpacerData.leftBound, top: Math.max(this.bounds.top, 0), bottom: bottomSpacerData.bottom, left: Math.max(this.bounds.left, 0), right: bottomSpacerData.right, height: this.dimensions.height, width: this.dimensions.width, viewport: viewportSize, contentSize: contentSize};
+this.winOrientation = this.controller.stageController.getWindowOrientation();
+this.calcPreFix();
+}
+if (this.savedData.heightCrop >= 0) {
+var diff = (this.savedData.top + this.savedData.height) - (Math.max(this.bounds.top, 0) + this.dimensions.height);
+this.savedData.heightCrop = Math.min(Math.max(this.savedData.bottom - diff, 0), this.savedData.bottom);
+}
+return this.savedData;
+},
+
+calcPreFix: function() {
+var tempX, tempY;
+var isUp = this.winOrientation === 'up' && !this.controller.scene._enableFullScreenMode;
+if (isUp) {
+tempX = (this.savedData.top + this.savedData.height - this.savedData.heightCrop >= this.savedData.viewport.height ? (this.savedData.width - this.savedData.right >= this.savedData.viewport.width - 16 ? 34 : (this.savedData.left + this.savedData.leftBound < 17 || this.savedData.left + this.savedData.width - this.savedData.right == this.savedData.viewport.width ? 22 : 10)) : 10);
+tempY = (this.savedData.height - (this.savedData.topBound + this.savedData.bottom) == this.savedData.viewport.height ? 34 : (this.savedData.top + this.savedData.topBound < 17 || (this.savedData.top + this.savedData.height - this.savedData.bottom) > (this.savedData.viewport.height-17) ? 22 : 10));
+}
+} else {
+tempX = tempY = 10;
+}
+this.preFix = {x: tempX, y: tempY};
+},
+
+animateScrollbars: function() {
+if (this.controller.scene.isActive()) {
+var scrollContainer = this.controller.element;
+var scrollPos = {top: scrollContainer.scrollTop, left: scrollContainer.scrollLeft};
+var contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+var scrollInfo = this.getScrollerInfo();
+var viewportSize = scrollInfo.viewport;
+var axes = this.components;
+var overScroll = {height: Math.min(scrollPos.top, 0) || Math.max(scrollPos.top - Math.abs(this.minLimit.y), 0), width: Math.min(scrollPos.left, 0) || Math.max(scrollPos.left - Math.abs(this.minLimit.x), 0)};
+for (var i = axes.length - 1; i >= 0; i--) {
+var axis = axes[i];
+var scrollbar = this.controller.get(scrollContainer.id + "-scrollbar-" + axis);
+var property = this.PROPERTY_MAP[axis], revProperty = this.REVPROP_MAP[axis];
+var posit = this.POS_MAP[axis], revPosit = this.REVPOS_MAP[axis], opPosit = this.OPPOS_MAP[axis];
+var sidePosit = this.SIDEPOS_MAP[axis];
+var dimension = this.bounds[revPosit] - this.bounds[posit];
+var scrollSize = contentSize[property];
+if (scrollSize <= dimension) continue;
+var margin = scrollInfo[posit+"Bound"];
+var zoneDimen = this.dimensions[property] - (this.preFix[axis] + margin + scrollInfo[revPosit]);
+var scrollbarSize = Math.max(zoneDimen * dimension / (scrollSize + Math.abs(overScroll[property] * 5)), 20);
+var scrollbarPosition = (scrollPos[posit] > 0 ? (zoneDimen - scrollbarSize) * scrollPos[posit] / (Math.abs(this.minLimit[axis]) + Math.abs(overScroll[property])) : 0);
+if (this._cachedSize[axis] !== scrollbarSize) {
+this._cachedSize[axis] = scrollbarSize;
+scrollbar.style[property] = scrollbarSize + "px";
+}
+scrollbar.style[posit] = scrollPos[posit] + scrollbarPosition + (Math.max(this.bounds[posit],0) + margin <= 17 && this.preFix[axis] > 10 ? 17 : margin + 5) + "px";
+var sidePosition = Math.max(this.bounds[sidePosit] - viewportSize[revProperty], 0) - overScroll[revProperty] + scrollInfo[revProperty+"Crop"];
+if (this._cachedPos[axis] !== sidePosition) {
+this._cachedPos[axis] = sidePosition;
+scrollbar.style[sidePosit] = (this.bounds[opPosit] > viewportSize[revProperty] - 10 ? 0 : sidePosition) + 1.5 + "px";
+}
+if (!this.scrollbarVisibility[axis] && this.animating && this.isValid) {
+if (this.scrollbarsTransition) {
+this.controller.window.clearInterval(this.scrollbarsTransition);
+this.scrollbarsTransition = false;
+}
+scrollbar.style.display = "";
+this.scrollbarVisibility[axis] = true;
+}
+}
+}
+},
+
+hideScrollbars: function(timeout) {
+for (var axes = ["x", "y"], i = axes.length - 1; i >= 0; i--) {
+if (this.scrollbarVisibility[axes[i]]) {
+var scrollbar = this.controller.get(this.controller.element.id+"-scrollbar-"+axes[i]);
+if (!this.scrollbarsTransition) this.scrollbarsTransition = this.controller.window.setInterval(this.animateScrollbars.bind(this),0);
+this.controller.window.setTimeout(function(scrollbar) {scrollbar.style.display = "none", this.scrollbarVisibility[scrollbar.id.charAt(scrollbar.id.length-1)] = false, this.controller.window.clearInterval(this.scrollbarsTransition), this.scrollbarsTransition = false}.bind(this), timeout, scrollbar);
+}
+}
+},
+
+clearScrollbarsMemory: function() {
+if (this.scrollbarsTransition) this.controller.window.clearInterval(this.scrollbarsTransition)
+},
 
 flick:function(event){
 var factor;
@@ -13354,6 +13609,7 @@ stopAnimating:function(){
 if(this.animating){
 this.animating=false;
 this.getAnimationQueue().remove(this);
+if (this.isValid) this.hideScrollbars(200);
 }
 },
 
@@ -13630,6 +13886,7 @@ scrolled=true;
 if(scrolled){
 this.setScrollPosition(scrollPosition);
 this.notifyListeners(false,currentCoordinate);
+if (this.isValid && !this.hasScrollbars) this.animateScrollbars();
 }
 
 if(done.x&&done.y&&!this.unhandledAnimatingOverscroll()){
