diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework299.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework299.js
index 16111dd..32f3a9a 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework299.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework299.js
@@ -528,8 +528,9 @@ y:position.y-lastPosition.y};else lastPosition={x:position.x,y:position.y};if(!i
 Mojo.Widget.Scroller.prototype.getScrollerSize=function getScrollerSize(){var dimensions,parent;if(this.sizeToWindow)dimensions=Mojo.View.getViewportDimensions(this.controller.document);else{parent=this.target.parentNode;dimensions=Mojo.View.getUsableDimensions(parent,true)}return dimensions};
 Mojo.Widget.Scroller.validateScrollPositionForElement=function validateScrollPositionForElement(targetElement){var scroller=Mojo.View.getScrollerForElement(targetElement);while(scroller){scroller.mojo.validateScrollPosition();scroller=Mojo.View.getScrollerForElement(scroller.parentNode)}};
 (function(){var i;var publicMethods=["revealTop","revealBottom","revealLeft","revealRight","revealElement","scrollTo","getState","setState","adjustBy","scrollerSize","setMode","getScrollPosition","setScrollPosition","setSnapIndex","handleEdgeVisibility","validateScrollPosition","updatePhysicsParameters","addMovementListener","removeMovementListener","addStateListener","removeStateListener","getMode"];Mojo.Widget.Scroller.prototype.PUBLIC_METHODS=publicMethods;function getPassthroughMethod(methodName){return function(){if(this.strategy.animator[methodName])return this.strategy.animator[methodName].apply(this.strategy.animator,
-arguments);else if(this.strategy[methodName])return this.strategy[methodName].apply(this.strategy,arguments)}}for(i=publicMethods.length-1;i>=0;i--)if(!Mojo.Widget.Scroller.prototype[publicMethods[i]])Mojo.Widget.Scroller.prototype[publicMethods[i]]=getPassthroughMethod(publicMethods[i])})();Mojo.Widget.Scroller.Animator=function(scroller,strategy,options){this.scroller=scroller;this.controller=this.scroller.controller;this.strategy=strategy;this.scrollElement=scroller.controller.element;this.options=options;this.movementFilters=[];this.currentCoordinate={};this.originalCoordinate={};this.lastTarget={};this.animateComponent={};this.setupCoordinates();if(Mojo.Host.current===Mojo.Host.browser)this.FLICK_RATIO=0.3};
-Mojo.Widget.Scroller.Animator.prototype={cleanup:function(){function cleanupComponent(component,componentString){var comp=component[componentString];if(comp)comp.cleanup()}function cleanup(){var component=this.animateComponent;this.stopAnimating();cleanupComponent(component,"x");cleanupComponent(component,"y")}return cleanup}(),setStrategy:function(strategy){var components,component;var compAnimatorCtor=Mojo.Widget.Scroller.ComponentAnimator;this.strategy=strategy;components=strategy.getPermittedAxes();
+arguments);else if(this.strategy[methodName])return this.strategy[methodName].apply(this.strategy,arguments)}}for(i=publicMethods.length-1;i>=0;i--)if(!Mojo.Widget.Scroller.prototype[publicMethods[i]])Mojo.Widget.Scroller.prototype[publicMethods[i]]=getPassthroughMethod(publicMethods[i])})();Mojo.Widget.Scroller.Animator=function(scroller,strategy,options){this.scroller=scroller;this.controller=this.scroller.controller;this.strategy=strategy;this.scrollElement=scroller.controller.element;this.options=options;this.movementFilters=[];this.currentCoordinate={};this.originalCoordinate={};this.lastTarget={};this.animateComponent={};this.setupCoordinates();if(Mojo.Host.current===Mojo.Host.browser)this.FLICK_RATIO=0.3;
+this.winOrientation=this.controller.stageController.getWindowOrientation();this.isValid=(this.controller.stageController.window._mojoStageType=="card"||this.controller.stageController.window._mojoStageType=="childcard")&&(this.scrollElement.parentNode===this.controller.document.body||!((this.scrollElement.parentNode.className).match('-menu')!== null||(this.scrollElement.parentNode.className).match('palm-popup-wrapper')!== null||(this.scrollElement.parentNode.className).match('mv-value-list')!==null));var checkScrollbars=this.controller.document.getElementById('scrollbar-x');if(!checkScrollbars&&(this.controller.stageController.window._mojoStageType == "card"||this.controller.stageController.window._mojoStageType=="childcard")){var scrollbarXContent=this.controller.document.createElement('div');var scrollbarYContent=this.controller.document.createElement('div');scrollbarXContent.id="scrollbar-x";scrollbarXContent.style.cssText="position: fixed; z-index: 11000; background-color: #2e2e2e; width: 24px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; min-height: 4px; min-width: 4px; background-image: none; -webkit-palm-mouse-target: ignore; opacity: 0.0;";scrollbarYContent.id="scrollbar-y";scrollbarYContent.style.cssText="position: fixed; z-index: 100000; background-color: #2e2e2e; width: 4px; height: 24px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; min-height: 4px; min-width: 4px; background-image: none; -webkit-palm-mouse-target: ignore; opacity: 0.0;";this.controller.document.body.appendChild(scrollbarXContent);this.controller.document.body.appendChild(scrollbarYContent);}this.scrollbarVisibility={x:false,y:false}};
+Mojo.Widget.Scroller.Animator.prototype={cleanup:function(){function cleanupComponent(component,componentString){var comp=component[componentString];if(comp)comp.cleanup()}function cleanup(){var component=this.animateComponent;this.stopAnimating();cleanupComponent(component,"x");cleanupComponent(component,"y");this.clearScrollbarsMemory()}return cleanup}(),setStrategy:function(strategy){var components,component;var compAnimatorCtor=Mojo.Widget.Scroller.ComponentAnimator;this.strategy=strategy;components=strategy.getPermittedAxes();
 this.components={};this.animateComponent={};for(var i=components.length-1;i>=0;i--){component=components[i];this.animateComponent[component]=new compAnimatorCtor(this,this.scroller,component)}},PROPERTY_MAP:{x:"width",y:"height"},OVERSCROLL_CLIP_MARGIN:50,clip:function(value,property,scrollerSize,contentSize,allowOverscroll){var margin;if(value!==undefined){margin=allowOverscroll&&this.OVERSCROLL_CLIP_MARGIN||0;value=Math.min(contentSize[property]+margin-scrollerSize[property],value);value=Math.max(margin,
 value)}return value},canScroll:function(possibleComponents){var elementPos=this.getScrollPosition();var limits;elementPos.x=elementPos.left;elementPos.y=elementPos.top;limits=this.strategy.setComponentLimits();var thisCanScroll=false;for(var i=possibleComponents.length-1;i>=0&&!thisCanScroll;i--){var component=possibleComponents[i];var maxLimit=limits[component].maxLimit;if(maxLimit>0||elementPos[component]>maxLimit)thisCanScroll=true}return thisCanScroll},setupIndicators:function(){var indicatorElement,
 side,possibleComponents;var component,componentAnimator,limitName,indicators,indicator;var scrollerParent=this.controller.element.parentNode;var indicatorElements=scrollerParent.querySelectorAll(this.FADE_ELEMENT_SELECTOR);var indicatorElementsLength=indicatorElements.length;var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;var indicatorsCount={x:0,y:0};if(indicatorElementsLength>0){possibleComponents=this.strategy.getPermittedAxes();indicators={x:[],y:[]};for(var i=indicatorElementsLength-
@@ -548,12 +549,24 @@ component;var canScroll=this.canScroll(components);if(!canScroll)return;this.com
 motionArgs.animatedMotion;component.motionSM.nextState(motionArgs)}}function updateMovementState(animatedMotion){var motionArgs={userAction:true,animatedMotion:animatedMotion};var animateComponent=this.animateComponent;advanceStates(animateComponent,"x",motionArgs);advanceStates(animateComponent,"y",motionArgs)}return updateMovementState}(),correctingOverscroll:function(){var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;return xComponent&&xComponent.overscroller.correctingOverscroll||
 yComponent&&yComponent.overscroller.correctingOverscroll},inOverscroll:function(){var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;return xComponent&&xComponent.overscroller.inOverscroll||yComponent&&yComponent.overscroller.inOverscroll},getLimits:function(component){return this.strategy.getPermittedAxes()[component]},componentAnimate:function(){var i,axis;var axes=this.strategy.getPermittedAxes();var compAnimator;var moved;var target=this.targetCoordinate;var current=
 this.currentCoordinate;var done=true;var scrolled;for(i=axes.length-1;i>=0;i--){axis=axes[i];compAnimator=this.animateComponent[axis];if(compAnimator){done&=compAnimator.animate(target[axis],current[axis]);moved=this.roundTowardZero(compAnimator.currentCoordinate)-this.roundTowardZero(current[axis]);target[axis]=compAnimator.targetCoordinate;current[axis]=compAnimator.currentCoordinate;if(moved){scrolled=scrolled||{};scrolled[axis]=this.roundTowardZero(current[axis]);compAnimator.indicateLocationChange(done)}}}return{scrolled:scrolled,
-done:done}},animate:function(queue){var currentCoordinate=this.currentCoordinate;var scroller=this.scroller;var strategy=this.strategy;var scrollPosition;var animateResult=this.componentAnimate();scrollPosition=animateResult.scrolled;if(scrollPosition){this.setScrollPosition(scrollPosition);scroller.notifyMovementListeners(false,currentCoordinate)}if(animateResult.done){strategy.handleAnimateDone();if(!strategy.mouseTracker){this.stopAnimating();this.lastCurrent={};scroller.notifyMovementListeners(true,
-currentCoordinate);delete this.targetCoordinate}}},finishScroll:function(){var current=this.currentCoordinate;var target=this.targetCoordinate;if(this.animating){current.x=target.x;current.y=target.y;this.animate()}},setFrameDistanceRatio:function(frameDistanceRatio){var x=this.animateComponent.x;var y=this.animateComponent.y;if(x)x.setFrameDistanceRatio(frameDistanceRatio);if(y)y.setFrameDistanceRatio(frameDistanceRatio)},targetCoordinateExists:function(){return!!this.targetCoordinate},setComponentTarget:function(component,
+done:done}},animate:function(queue){var currentCoordinate=this.currentCoordinate;var scroller=this.scroller;var strategy=this.strategy;var scrollPosition;var animateResult=this.componentAnimate();scrollPosition=animateResult.scrolled;if(scrollPosition){this.setScrollPosition(scrollPosition);scroller.notifyMovementListeners(false,currentCoordinate);this.animateScrollbars()}if(animateResult.done){strategy.handleAnimateDone();if(!strategy.mouseTracker){this.stopAnimating();this.lastCurrent={};scroller.notifyMovementListeners(true,
+currentCoordinate);delete this.targetCoordinate}}},POS_MAP:{x:'left',y:'top'},STYLE_MAP:{x:'bottom',y:'right'},REVPROP_MAP:{x:'height',y:'width'},REVPOS_MAP:{x:'top',y:'left'},REVSTY_MAP:{x:'right',y:'bottom'},getElementPosition:function(el){var valueL=0,valueT=0;if(el.offsetParent){do{valueL+=el.offsetLeft;valueT+=el.offsetTop;}while(el=el.offsetParent);}
+valueL-=this.controller.document.body.scrollLeft||0;valueT-=this.controller.document.body.scrollTop||0;return{top:valueT,left:valueL};},getFixedElement:function(element){while(element.parentNode!==this.controller.scene.sceneElement&&element.parentNode!==this.controller.element&&element.parentNode!==this.controller.document&&Mojo.Dom.getStyle(element,'position')!=="fixed"){element=element.parentNode;}
+return element;},getTopSpacer:function(){var topBound=0,scrollerContainer=this.controller.element;var viewportSize={height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};var margins=this.getElementPosition(scrollerContainer);var tempEl=this.controller.document.elementFromPoint(margins.left+this.dimensions.width-20,margins.top+5);if(tempEl&&tempEl!==scrollerContainer&&tempEl.offsetHeight<this.dimensions.height){tempEl=this.getFixedElement(tempEl);if(Mojo.Dom.getStyle(tempEl,'position')==='fixed')topBound=tempEl.offsetHeight;}
+return topBound;},getBottomSpacer:function(){var scrollerContainer=this.controller.element;var doc=this.controller.document;var viewportSize={height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};var firstBottomElement,children,bottomBound,rightBound,leftBound=0,heightCrop=-0.1;if(scrollerContainer===this.controller.scene.sceneScroller){children=scrollerContainer.querySelector('div[x-mojo-element="_Menu"]');}else{children=this.controller.scene.sceneElement.querySelector('div[x-mojo-element="_Menu"]');}
+if(children&&children.children.length>0&&Mojo.Dom.getStyle(children.firstChild,'bottom')==="0px"){children=children.firstChild.children;if(parseInt(Mojo.Dom.getStyle(children[children.length-1],"left"),10)+children[children.length-1].offsetWidth>viewportSize.width-20){firstBottomElement=children[children.length-1];if(Mojo.Dom.getStyle(scrollerContainer,'-webkit-palm-scroll-margin-bottom')&&parseInt(Mojo.Dom.getStyle(scrollerContainer,'-webkit-palm-scroll-margin-bottom'),10)>children[children.length-1].offsetHeight*1.5){firstBottomElement=scrollerContainer;bottomBound=parseInt(Mojo.Dom.getStyle(scrollerContainer,'-webkit-palm-scroll-margin-bottom'),10);}else{bottomBound=Math.max((this.bounds.top+this.dimensions.height)-(viewportSize.height-firstBottomElement.offsetHeight),0);}
+if(children[children.length-1].offsetWidth>70||bottomBound>60){heightCrop=bottomBound;}else{if(children.length==3&&parseInt(Mojo.Dom.getStyle(children[1],"left"),10)<50){rightBound=firstBottomElement.offsetWidth;bottomBound=Math.max((this.bounds.top+this.dimensions.height)-(viewportSize.height-firstBottomElement.offsetHeight),0);leftBound=children[1].offsetWidth;}else if(children.length>3&&children.length<6){if(children.length>4&&!Mojo.Dom.hasClassName(children[0].parentNode,"no-fade")){heightCrop=bottomBound;}else if(parseInt(Mojo.Dom.getStyle(children[2],"left"),10)<60||parseInt(Mojo.Dom.getStyle(children[2],"left"),10)>viewportSize.width-130){rightBound=firstBottomElement.offsetWidth+(parseInt(children[2].getStyle("left"),10)>60?children[2].offsetWidth:0);leftBound=children[1].offsetWidth+(parseInt(children[2].getStyle("left"),10)<60?children[2].offsetWidth:0);}else if(!Mojo.Dom.hasClassName(children[0].parentNode,"no-fade")){heightCrop=bottomBound;}}}}else{if(parseInt(Mojo.Dom.getStyle(children[children.length-1],"left"),10)+children[children.length-1].offsetWidth<viewportSize.width/3){leftBound=parseInt(Mojo.Dom.getStyle(children[children.length-1],"left"),10)+children[children.length-1].offsetWidth;}else if(!Mojo.Dom.hasClassName(children[0].parentNode,"no-fade")&&children[children.length-1].className==='palm-menu-group'){firstBottomElement=children[0].parentNode;bottomBound=Math.max((this.bounds.top+this.dimensions.height)-(viewportSize.height-firstBottomElement.offsetHeight),0);}}}
+if(!bottomBound){var tempEl=doc.elementFromPoint(this.bounds.left+this.dimensions.width-20,this.bounds.top+this.dimensions.height-10);if(typeof tempEl!=="undefined"&&tempEl!==null&&tempEl!==scrollerContainer&&tempEl.offsetHeight<this.dimensions.height){tempEl=this.getFixedElement(tempEl);if(Mojo.Dom.getStyle(tempEl,'position')==="fixed"&&tempEl.offsetHeight<this.dimensions.height/2){firstBottomElement=tempEl;bottomBound=(this.bounds.top+this.dimensions.height)-(viewportSize.height-firstBottomElement.offsetHeight);if(firstBottomElement.offsetWidth>this.dimensions.width/2){heightCrop=bottomBound;}else{rightBound=firstBottomElement.offsetWidth;}}}}
+return{botEl:firstBottomElement,heightCrop:heightCrop,bottom:(bottomBound||0),right:(rightBound||0),leftBound:leftBound};},getScrollerPositionInfo:function(){var scrollContainer=this.controller.element;var doc=this.controller.document;var viewportSize={height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};this.bounds=scrollContainer.getBoundingClientRect();this.dimensions={height:this.bounds.bottom-Math.max(this.bounds.bottom-viewportSize.height,0)-this.bounds.top,width:this.bounds.right-Math.max(this.bounds.right-viewportSize.width,0)-this.bounds.left};if(this.savedData&&this.savedData.heightCrop>=0){var diff=(this.bounds.top+this.dimensions.height)-(this.savedData.top+this.savedData.height);if(diff!=0)this.savedData.heightCrop=(diff>0?Math.min(diff,this.savedData.bottom):(-diff>this.savedData.bottom?0:-diff));}
+var contentSize={width:scrollContainer.scrollWidth,height:scrollContainer.scrollHeight};if(!this.savedData||this.isValid&&(this.savedData.contentSize.width<contentSize.width||scrollContainer.scrollTop<10&&(this.savedData.contentSize.height!==contentSize.height)||this.savedData.viewport.height!==viewportSize.height||this.savedData.viewport.width!==viewportSize.width||this.savedData.firstBotEl&&(Mojo.Dom.getStyle(this.savedData.firstBotEl,'position')==='fixed'?this.savedData.bottom!==this.savedData.firstBotEl.offsetHeight:this.savedData.bottom*1.5<parseInt(Mojo.Dom.getStyle(scrollContainer,'-webkit-palm-scroll-margin-bottom'),10)||this.savedData.firstBotEl===scrollContainer&&this.savedData.bottom!==parseInt(Mojo.Dom.getStyle(scrollContainer,'-webkit-palm-scroll-margin-bottom'),10)))){var topSpacerReturn=this.getTopSpacer();var bottomSpacerReturn=this.getBottomSpacer();this.savedData={heightCrop:bottomSpacerReturn.heightCrop,widthCrop:0,firstBotEl:bottomSpacerReturn.botEl,topBound:topSpacerReturn,leftBound:bottomSpacerReturn.leftBound,top:this.bounds.top,bottom:bottomSpacerReturn.bottom,left:this.bounds.left,right:bottomSpacerReturn.right,height:this.dimensions.height,width:this.dimensions.width,viewport:viewportSize,contentSize:contentSize};this.winOrientation=this.controller.stageController.getWindowOrientation();this.calcPreFix();}
+return this.savedData;},calcPreFix:function(){var tempX,tempY;var isUp=this.winOrientation==='up'&&!this.controller.scene._enableFullScreenMode;if(isUp){tempX=(this.savedData.top+this.savedData.height-(this.savedData.heightCrop?this.savedData.bottom:0)==this.savedData.viewport.height?(this.savedData.width-this.savedData.right>=this.savedData.viewport.width-16?33:(this.savedData.left+this.savedData.leftBound<17||this.savedData.left+this.savedData.width-this.savedData.right==this.savedData.viewport.width?23:10)):10);tempY=(this.savedData.height-(this.savedData.topBound+this.savedData.bottom)==this.savedData.viewport.height?33:(this.savedData.top+this.savedData.topBound<17||(this.savedData.top+this.savedData.height-this.savedData.bottom)>(this.savedData.viewport.height-17)?23:10));}else{tempX=tempY=10;}
+this.preFix={x:tempX,y:tempY};},isNotInViewport:function(){var rect=this.bounds;return(rect.top>=this.controller.window.innerHeight||rect.left>=this.controller.window.innerWidth||rect.bottom<=0||rect.right<=0);},animateScrollbars:function(){var scrollContainer=this.controller.element;if(this.controller.scene.isActive()&&this.isValid){var scrollPos={top:scrollContainer.scrollTop,left:scrollContainer.scrollLeft};var contentSize={width:scrollContainer.scrollWidth,height:scrollContainer.scrollHeight};var scrollInfo=this.getScrollerPositionInfo();var viewportSize=scrollInfo.viewport;var axes=this.components;for(var i=axes.length-1;i>=0;i--){var axis=axes[i];var property=this.PROPERTY_MAP[axis],revProperty=this.REVPROP_MAP[axis];var posit=this.POS_MAP[axis],revPosit=this.REVPOS_MAP[axis];var stylePosit=this.STYLE_MAP[axis],revStyle=this.REVSTY_MAP[axis];var dimension=this.bounds[revStyle]-this.bounds[posit];var scrollSize=contentSize[property];if(scrollSize<=dimension||this.isNotInViewport())continue;var scrollbar=this.controller.get("scrollbar-"+axis);var margin=this.bounds[posit]+scrollInfo[posit+"Bound"];var zoneDimen=this.dimensions[property]-(this.preFix[axis]+scrollInfo[posit+"Bound"]+scrollInfo[revStyle]);var scrollbarSize=Math.max(Math.min(zoneDimen*dimension/scrollSize,zoneDimen),24);var axisPosition=(zoneDimen-scrollbarSize)*scrollPos[posit]/(scrollSize-dimension);if(scrollPos[posit]<0||scrollPos[posit]>scrollSize-dimension&&zoneDimen-(axisPosition+scrollbarSize)<0){scrollbarSize-=Math.min((scrollbarSize*Math.abs(Math.min(axisPosition,zoneDimen-(axisPosition+scrollbarSize))*2)/zoneDimen),scrollbarSize-4);axisPosition=(axisPosition>0?zoneDimen-scrollbarSize:0);}
+scrollbar.style[property]=scrollbarSize+"px";scrollbar.style[posit]=axisPosition+(margin<=17&&this.preFix[axis]>10?17:margin+5)+"px";var revStylePosition=viewportSize[revProperty]-(this.bounds[revPosit]+this.dimensions[revProperty])+scrollInfo[revProperty+"Crop"];scrollbar.style[stylePosit]=revStylePosition+1.5+"px";if(!this.scrollbarVisibility[axis]){scrollbar.style.opacity=0.8;this.scrollbarVisibility[axis]=true;}}}},hideScrollbar:function(axis){this.controller.get("scrollbar-"+axis).style.opacity=0.0;this.scrollbarVisibility[axis]=false;},clearScrollbarsMemory:function(){delete this.savedData;delete this.bounds;delete this.dimensions;delete this.scrollbarVisibility;delete this.winOrientation;delete this.preFix;delete this.isValid;},
+finishScroll:function(){var current=this.currentCoordinate;var target=this.targetCoordinate;if(this.animating){current.x=target.x;current.y=target.y;this.animate()}},setFrameDistanceRatio:function(frameDistanceRatio){var x=this.animateComponent.x;var y=this.animateComponent.y;if(x)x.setFrameDistanceRatio(frameDistanceRatio);if(y)y.setFrameDistanceRatio(frameDistanceRatio)},targetCoordinateExists:function(){return!!this.targetCoordinate},setComponentTarget:function(component,
 newVal){this.targetCoordinate[component]=newVal},getComponentTarget:function(component){return this.targetCoordinate[component]},setComponentCurrent:function(component,newVal){this.currentCoordinate[component]=newVal},getComponentCurrent:function(component){return this.currentCoordinate[component]},setComponentOriginal:function(component,newVal){this.originalCoordinate[component]=newVal},getComponentOriginal:function(component){return this.originalCoordinate[component]},adjustTarget:function(deltaCoordinates){var components=
 this.components;var animateComponent;var motionForCoordinate,component,targetForComponent;var limits=this.strategy.getPermittedAxes();var limit;for(var i=components.length-1;i>=0;i--){component=components[i];animateComponent=this.animateComponent[component];limit=limits[component];targetForComponent=this.targetCoordinate[component];if(targetForComponent>limit.maxLimit||targetForComponent<limit.minLimit)motionForCoordinate=0.5*deltaCoordinates[component];else motionForCoordinate=deltaCoordinates[component];
-targetForComponent+=motionForCoordinate;if(motionForCoordinate!==0){targetForComponent=Math.max(limit.minOverLimit,targetForComponent);targetForComponent=Math.min(limit.maxOverLimit,targetForComponent);this.targetCoordinate[component]=targetForComponent}}},stopAnimating:function(){if(this.animating){this.animating=false;this.getAnimationQueue().remove(this)}},startAnimating:function(){var elementPos;if(!this.animating&&this.targetCoordinate){if(typeof this.currentCoordinate.x==="undefined"&&typeof this.currentCoordinate.y===
-"undefined"){Mojo.Log.warn("currentCoordinate not set up before call to startAnimating");elementPos=this.getScrollPosition();this.currentCoordinate.y=elementPos.top;this.currentCoordinate.x=elementPos.left}this.getAnimationQueue().add(this);this.animating=true}},FLICK_RATIO:0.5,FLICK_SPEED:0.06,OVERSCROLL_SPEED:0.3,ANIMATE_SNAP_SPEED:0.3,NONFLICK_SPEED:0.6,FADE_ELEMENT_ATTRIBUTE:"x-mojo-scroll-fade"};
+targetForComponent+=motionForCoordinate;if(motionForCoordinate!==0){targetForComponent=Math.max(limit.minOverLimit,targetForComponent);targetForComponent=Math.min(limit.maxOverLimit,targetForComponent);this.targetCoordinate[component]=targetForComponent}}},stopAnimating:function(){if(this.animating){this.animating=false;this.getAnimationQueue().remove(this);for(var i=this.components.length-1;i>=0;i--){if(this.scrollbarVisibility[this.components[i]])this.controller.window.setTimeout(this.hideScrollbar.bind(this),200,this.components[i])}}},
+startAnimating:function(){var elementPos;if(!this.animating&&this.targetCoordinate){if(typeof this.currentCoordinate.x==="undefined"&&typeof this.currentCoordinate.y==="undefined"){Mojo.Log.warn("currentCoordinate not set up before call to startAnimating");elementPos=this.getScrollPosition();this.currentCoordinate.y=elementPos.top;this.currentCoordinate.x=elementPos.left}this.getAnimationQueue().add(this);this.animating=true}},FLICK_RATIO:0.5,FLICK_SPEED:0.06,OVERSCROLL_SPEED:0.3,ANIMATE_SNAP_SPEED:0.3,NONFLICK_SPEED:0.6,FADE_ELEMENT_ATTRIBUTE:"x-mojo-scroll-fade"};
 (function(){var proto=Mojo.Widget.Scroller.Animator.prototype;proto.FADE_ELEMENT_SELECTOR="*["+proto.FADE_ELEMENT_ATTRIBUTE+"]"})();Mojo.Widget.Scroller.ComponentAnimator=function(animator,scroller,component){this.minMoveDelta=1;this.animator=animator;this.scroller=scroller;this.roundTowardZero=animator.roundTowardZero;this.component=component;this.bindHandlers();this.animateAlgorithm=this.dragAnimate;this.currentLocation="bordering";this.motionMap={flick:this.flickStateHandler,drag:this.dragStateHandler};this.motionSM=new Mojo.Widget.Scroller.StateMachine("drag",this.motionMap,{stateSwitcher:this.motionStateSwitcher});this.overscroller=
 new Mojo.Widget.Scroller.Overscroller(scroller,this,scroller.controller.window,this.scroller.controller.element);this.getTime=Date.now};
 Mojo.Widget.Scroller.ComponentAnimator.prototype={cleanup:function(){this.overscroller.cleanup()},bindHandlers:function(){this.flickStateHandler=this.flickStateHandler.bind(this);this.dragStateHandler=this.dragStateHandler.bind(this)},dragAnimate:function(deltaDist){this.done=true;return deltaDist},_zenoCalculate:function(fdr,elapsedFrames){var approachFDR;var unitDistanceRemaining;var unitDistanceTraveled;approachFDR=1-fdr;unitDistanceRemaining=Math.pow(approachFDR,elapsedFrames);unitDistanceTraveled=
diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
index b062507..152ef80 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
@@ -12637,6 +12637,7 @@ this.hasPalmOverflow=(Mojo.Host.current!==Mojo.Host.browser);
 this.bindHandlers();
 this.setupChildElements();
 this.handleModelChanged();
+this.setupScrollbars();
 
 this.controller.exposeMethods(['revealTop','revealBottom','revealElement','scrollTo',
 'getState','setState','adjustBy','scrollerSize','setMode',
@@ -12675,6 +12676,7 @@ this.controller.stopListening(sceneElement,Mojo.Event.keydown,this.keyHandler);
 }
 this.clearCorrectOverscrollTimer();
 this.removeContinueOverscrollHandler();
+this.clearScrollbarsMemory();
 },
 
 
@@ -12718,6 +12720,32 @@ this.controller.instantiateChildWidgets(scrollContainer);
 }
 },
 
+setupScrollbars: function() {
+var scrollContainer = this.controller.element;
+this.winOrientation = this.controller.stageController.getWindowOrientation();
+this.isValid = (this.controller.stageController.window._mojoStageType == "card" || this.controller.stageController.window._mojoStageType == "childcard") && (scrollContainer.parentNode === this.controller.document.body || !((scrollContainer.parentNode.className).match('-menu') !== null || (scrollContainer.parentNode.className).match('palm-popup-wrapper') !== null || (scrollContainer.parentNode.className).match('mv-value-list') !== null));
+var checkScrollbars=this.controller.scene.sceneElement.querySelector('div[id*="crollbar"]');
+this.hasScrollbars = this.isValid && checkScrollbars && checkScrollbars.id.match("-scrollbar-x") === null;
+if (this.isValid && !this.hasScrollbars) {
+if(!scrollContainer.id) this.setElementId(scrollContainer);
+var scrollbarXContent=this.controller.document.createElement('div');
+var scrollbarYContent=this.controller.document.createElement('div');
+scrollbarXContent.id=scrollContainer.id+"-scrollbar-x";
+scrollbarXContent.style.cssText="position: absolute; z-index: 100; background-color: #2e2e2e; width: 20px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; min-height: 4px; min-width: 4px; background-image: none; -webkit-palm-mouse-target: ignore; opacity: 0.8; display: none;";
+scrollbarYContent.id=scrollContainer.id+"-scrollbar-y";
+scrollbarYContent.style.cssText="position: absolute; z-index: 100; background-color: #2e2e2e; width: 4px; height: 20px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; min-height: 4px; min-width: 4px; background-image: none; -webkit-palm-mouse-target: ignore; opacity: 0.8; display: none;";
+this.controller.element.insertBefore(scrollbarYContent, this.controller.element.firstChild);
+this.controller.element.insertBefore(scrollbarXContent, this.controller.element.firstChild);
+}
+this.scrollbarVisibility = {x: false, y: false};
+},
+
+setElementId:function(element) {
+var rand=1000;
+while(this.controller.get("_Scroller-"+rand))
+rand=Math.floor((Math.random()*1000000)+ 1);
+element.id="_Scroller-"+rand;
+},
 
 setupIndicators:function(){
 var indicatorElement,checkerFunction,side,possibleComponents;
@@ -13279,6 +13307,240 @@ this.startCorrectOverscrollTimer();
 }
 },
 
+PROPERTY_MAP: {x: 'width', y: 'height'},
+REVPROP_MAP: {x: 'height', y: 'width'},
+POS_MAP: {x: 'left', y: 'top'},
+REVPOS_MAP: {x: 'right', y: 'bottom'},
+OPPOS_MAP: {x: 'top', y: 'left'},
+SIDEPOS_MAP: {x: 'bottom', y: 'right'},
+_cachedSize: {x: 0, y: 0},
+_cachedPos: {x: 0, y: 0},
+
+getElementPosition: function(el) {
+var valueL = 0, valueT = 0;
+if (el.offsetParent) {
+do {
+valueL += el.offsetLeft;
+valueT += el.offsetTop;
+} while (el = el.offsetParent);
+}
+valueL -= this.controller.document.body.scrollLeft || 0;
+valueT -= this.controller.document.body.scrollTop || 0;
+return {top: valueT, left: valueL};
+},
+
+getFixedElement: function(element) {
+while (element.parentNode !== this.controller.scene.sceneElement && element.parentNode !== this.controller.element && element.parentNode !== this.controller.document && element.getStyle('position') !== "fixed") {
+element = element.parentNode;
+}
+return element;
+},
+
+getTopSpacer: function() {
+var topBound=0, scrollContainer = this.controller.element;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.bounds;
+var children = scrollContainer.querySelectorAll('div[class*="-spacer"],img[src*="spacer"]');
+for (var i=0; i<children.length && !topBound; i++) {
+if (children[i].nodeName == 'DIV' && (children[i].offsetHeight > 5||children[i].offsetHeight == 0)) {
+var tempEl = this.controller.document.elementFromPoint(Math.max(margins.left,0) + this.dimensions.width - 20,Math.max(margins.top,0) + 5);
+if (tempEl && tempEl !== scrollContainer && tempEl.offsetHeight < this.dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') === 'fixed') topBound = children[i].offsetHeight == 0 ? tempEl.offsetHeight : children[i].offsetHeight;
+} // Phnx fix
+} else if (children[i].nodeName == 'IMG' && children[i].offsetHeight > 5) {
+topBound = children[i].offsetHeight;
+} 
+}
+if (!topBound) {
+var tempEl = this.controller.document.elementFromPoint(Math.max(margins.left,0) + this.dimensions.width - 20,Math.max(margins.top,0) + 5);
+if (tempEl && tempEl !== scrollContainer && tempEl.offsetHeight < this.dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') === 'fixed' && tempEl.offsetHeight < this.dimensions.height / 2)
+topBound = tempEl.offsetHeight;
+}
+}
+return topBound;
+},
+
+getBottomSpacer: function() {
+var scrollContainer = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var firstBottomElement, children, bottomBound, rightBound, leftBound=0, heightCrop = -0.1;
+if (scrollContainer === this.controller.scene.sceneScroller) {
+children = scrollContainer.querySelector('div[x-mojo-element="_Menu"]');
+} else {
+var tempEl = this.getFixedElement(scrollContainer);
+if (tempEl.getStyle("position")=="fixed" && tempEl.getStyle("z-index") > 19001) {
+children = scrollContainer.querySelector('div[x-mojo-element="_Menu"]');
+} else {
+children = this.controller.scene.sceneElement.querySelector('div[x-mojo-element="_Menu"]');
+}
+}
+if (children && children.children.length > 0 && children.firstChild.getStyle('bottom') === "0px") {
+children = children.firstChild.children;
+if (parseInt(children[children.length-1].getStyle("left"),10) + children[children.length-1].offsetWidth > viewportSize.width - 20) {
+firstBottomElement = children[children.length-1];
+if (scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom') && parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10) > children[children.length-1].offsetHeight * 1.5) {
+firstBottomElement = scrollContainer;
+bottomBound = parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10);
+} else {
+bottomBound = Math.max((Math.max(this.bounds.top,0) + this.dimensions.height) - (viewportSize.height - firstBottomElement.offsetHeight), 0);
+}
+if (firstBottomElement.offsetWidth > this.dimensions.width / 2) {
+heightCrop = bottomBound;
+} else {
+if (children.length == 2 && firstBottomElement.offsetWidth < 130) {
+rightBound = (Math.max(this.bounds.left,0) + this.dimensions.width) - (viewportSize.width - firstBottomElement.offsetWidth);
+} else if (children.length == 3 && parseInt(children[1].getStyle("left"),10) < 50) {
+rightBound = (Math.max(this.bounds.left,0) + this.dimensions.width) - (viewportSize.width - firstBottomElement.offsetWidth);
+leftBound = children[1].offsetWidth;
+} else if (children.length > 3 && children.length < 6) {
+if (children.length > 4 && !children[0].parentNode.hasClassName("no-fade")) {
+heightCrop = bottomBound;
+} else if (parseInt(children[2].getStyle("left"),10) < 60 || parseInt(children[2].getStyle("left"),10) > viewportSize.width-130) {
+rightBound = firstBottomElement.offsetWidth + (parseInt(children[2].getStyle("left"),10) > 60 ? children[2].offsetWidth : 0);
+leftBound = children[1].offsetWidth + (parseInt(children[2].getStyle("left"),10) < 60 ? children[2].offsetWidth : 0);
+} else if (!children[0].parentNode.hasClassName("no-fade")) {
+heightCrop = bottomBound;
+}
+}
+}
+} else {
+if (parseInt(children[children.length-1].getStyle("left"),10) + children[children.length-1].offsetWidth < viewportSize.width/3) {
+leftBound = parseInt(children[children.length-1].getStyle("left"),10) + children[children.length-1].offsetWidth;
+} else if (!children[0].parentNode.hasClassName("no-fade") && children[children.length-1].className === 'palm-menu-group') {
+firstBottomElement = children[0].parentNode;
+bottomBound = Math.max((Math.max(this.bounds.top,0) + this.dimensions.height) - (viewportSize.height - firstBottomElement.offsetHeight), 0);
+}
+}
+if (heightCrop < 0 && !children[0].parentNode.hasClassName("no-fade") && this.bounds.bottom >= viewportSize.height - 45) {
+this.controller.get(scrollContainer.id + "-scrollbar-y").style.zIndex = 100000;
+}
+}
+if (!bottomBound) {
+children = scrollContainer.querySelectorAll('img[src*="spacer"]');
+for (var i=0; i<children.length && !bottomBound; i++) {
+if (children[i].offsetHeight > 5) { 
+var tempElPos = this.getElementPosition(children[i]);
+if (tempElPos.top > Math.max(this.bounds.top,0) + 50) {
+firstBottomElement = children[i];
+bottomBound = children[i].offsetHeight;
+heightCrop = bottomBound;
+}
+}
+}
+if (!bottomBound) {
+var tempEl = doc.elementFromPoint(this.bounds.right - 20,this.bounds.bottom - 10);
+if (tempEl && tempEl !== scrollContainer && tempEl.offsetHeight < this.dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') === "fixed" && tempEl.offsetHeight < this.dimensions.height / 2) {
+firstBottomElement = tempEl;
+bottomBound = (Math.max(this.bounds.top,0) + this.dimensions.height) - (viewportSize.height - firstBottomElement.offsetHeight);
+if (firstBottomElement.offsetWidth > this.dimensions.width / 2) {
+heightCrop = bottomBound;
+} else {
+rightBound = (Math.max(this.bounds.left,0) + this.dimensions.width) - (viewportSize.width - firstBottomElement.offsetWidth);
+}
+}
+}
+}
+}
+return {botEl: firstBottomElement, heightCrop: heightCrop, bottom: (bottomBound || 0), right: (rightBound || 0), leftBound: leftBound};
+},
+
+getScrollerInfo: function() {
+var scrollContainer = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height: this.controller.window.innerHeight, width: this.controller.window.innerWidth};
+this.bounds = scrollContainer.getBoundingClientRect();
+this.dimensions = {height: Math.min(this.bounds.bottom, viewportSize.height) - Math.max(this.bounds.top,0), width: Math.min(this.bounds.right, viewportSize.width) - Math.max(this.bounds.left,0)};
+var contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+if (!this.savedData && this.isValid) this.isValid = this.isValid && !(this.controller.model&&this.mode.match(/snap/) && (this.snapElements.x && this.snapElements.x[this.snapIndex||0].getWidth() > this.dimensions.width * 0.9 || this.snapElements.y && this.snapElements.y[this.snapIndex||0].getHeight() > this.dimensions.height * 0.9) || false);
+if (!this.savedData || this.isValid && (this.savedData.contentSize.width < contentSize.width || scrollContainer.scrollTop < 10 && (this.savedData.contentSize.height !== contentSize.height) || this.savedData.viewport.height !== viewportSize.height || this.savedData.viewport.width !== viewportSize.width || this.savedData.firstBotEl && (this.savedData.firstBotEl.getStyle('position') === 'fixed' ? this.savedData.bottom !== this.savedData.firstBotEl.offsetHeight : this.savedData.bottom * 1.5 < parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10) || this.savedData.firstBotEl === scrollContainer && this.savedData.bottom !== parseInt(scrollContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10)))) {
+var topSpacerData = this.getTopSpacer();
+var bottomSpacerData = this.getBottomSpacer();
+this.savedData = {heightCrop: bottomSpacerData.heightCrop, widthCrop: 0, firstBotEl: bottomSpacerData.botEl, topBound: topSpacerData, leftBound: bottomSpacerData.leftBound, top: Math.max(this.bounds.top, 0), bottom: bottomSpacerData.bottom, left: Math.max(this.bounds.left, 0), right: bottomSpacerData.right, height: this.dimensions.height, width: this.dimensions.width, viewport: viewportSize, contentSize: contentSize};
+this.winOrientation = this.controller.stageController.getWindowOrientation();
+this.calcPreFix();
+}
+if (this.savedData.heightCrop >= 0) {
+var diff = (this.savedData.top + this.savedData.height) - (Math.max(this.bounds.top, 0) + this.dimensions.height);
+this.savedData.heightCrop = Math.min(Math.max(this.savedData.bottom - diff, 0), this.savedData.bottom);
+}
+return this.savedData;
+},
+
+calcPreFix: function() {
+var tempX, tempY;
+var isUp = this.winOrientation === 'up' && !this.controller.scene._enableFullScreenMode;
+if (isUp) {
+tempX = (this.savedData.top + this.savedData.height - this.savedData.heightCrop >= this.savedData.viewport.height ? (this.savedData.width - this.savedData.right >= this.savedData.viewport.width - 16 ? 34 : (this.savedData.left + this.savedData.leftBound < 17 || this.savedData.left + this.savedData.width - this.savedData.right == this.savedData.viewport.width ? 22 : 10)) : 10);
+tempY = (this.savedData.height - (this.savedData.topBound + this.savedData.bottom) == this.savedData.viewport.height ? 34 : (this.savedData.top + this.savedData.topBound < 17 || (this.savedData.top + this.savedData.height - this.savedData.bottom) > (this.savedData.viewport.height-17) ? 22 : 10));
+} else {
+tempX = tempY = 10;
+}
+this.preFix = {x: tempX, y: tempY};
+},
+
+animateScrollbars: function() {
+if (this.controller.scene.isActive()) {
+var scrollContainer = this.controller.element;
+var scrollPos = {top: scrollContainer.scrollTop, left: scrollContainer.scrollLeft};
+var contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+var scrollInfo = this.getScrollerInfo();
+var viewportSize = scrollInfo.viewport;
+var axes = this.components;
+var overScroll = {height: Math.min(scrollPos.top, 0) || Math.max(scrollPos.top - Math.abs(this.minLimit.y), 0), width: Math.min(scrollPos.left, 0) || Math.max(scrollPos.left - Math.abs(this.minLimit.x), 0)};
+for (var i = axes.length - 1; i >= 0; i--) {
+var axis = axes[i];
+var scrollbar = this.controller.get(scrollContainer.id + "-scrollbar-" + axis);
+var property = this.PROPERTY_MAP[axis], revProperty = this.REVPROP_MAP[axis];
+var posit = this.POS_MAP[axis], revPosit = this.REVPOS_MAP[axis], opPosit = this.OPPOS_MAP[axis];
+var sidePosit = this.SIDEPOS_MAP[axis];
+var dimension = this.bounds[revPosit] - this.bounds[posit];
+var scrollSize = contentSize[property];
+if (scrollSize <= dimension) continue;
+var margin = scrollInfo[posit+"Bound"];
+var zoneDimen = this.dimensions[property] - (this.preFix[axis] + margin + scrollInfo[revPosit]);
+var scrollbarSize = Math.max(zoneDimen * dimension / (scrollSize + Math.abs(overScroll[property] * 5)), 20);
+var scrollbarPosition = (scrollPos[posit] > 0 ? (zoneDimen - scrollbarSize) * scrollPos[posit] / (Math.abs(this.minLimit[axis]) + Math.abs(overScroll[property])) : 0);
+if (this._cachedSize[axis] !== scrollbarSize) {
+this._cachedSize[axis] = scrollbarSize;
+scrollbar.style[property] = scrollbarSize + "px";
+}
+scrollbar.style[posit] = scrollPos[posit] + scrollbarPosition + (Math.max(this.bounds[posit],0) + margin <= 17 && this.preFix[axis] > 10 ? 17 : margin + 5) + "px";
+var sidePosition = Math.max(this.bounds[sidePosit] - viewportSize[revProperty], 0) - overScroll[revProperty] + scrollInfo[revProperty+"Crop"];
+if (this._cachedPos[axis] !== sidePosition) {
+this._cachedPos[axis] = sidePosition;
+scrollbar.style[sidePosit] = (this.bounds[opPosit] > viewportSize[revProperty] - 10 ? 0 : sidePosition) + 1.5 + "px";
+}
+if (!this.scrollbarVisibility[axis] && this.animating && this.isValid) {
+if (this.scrollbarsTransition) {
+this.controller.window.clearInterval(this.scrollbarsTransition);
+this.scrollbarsTransition = false;
+}
+scrollbar.style.display = "";
+this.scrollbarVisibility[axis] = true;
+}
+}
+}
+},
+
+hideScrollbars: function(timeout) {
+for (var axes = ["x", "y"], i = axes.length - 1; i >= 0; i--) {
+if (this.scrollbarVisibility[axes[i]]) {
+var scrollbar = this.controller.get(this.controller.element.id+"-scrollbar-"+axes[i]);
+if (!this.scrollbarsTransition) this.scrollbarsTransition = this.controller.window.setInterval(this.animateScrollbars.bind(this),0);
+this.controller.window.setTimeout(function(scrollbar) {scrollbar.style.display = "none", this.scrollbarVisibility[scrollbar.id.charAt(scrollbar.id.length-1)] = false, this.controller.window.clearInterval(this.scrollbarsTransition), this.scrollbarsTransition = false}.bind(this), timeout, scrollbar);
+}
+}
+},
+
+clearScrollbarsMemory: function() {
+if (this.scrollbarsTransition) this.controller.window.clearInterval(this.scrollbarsTransition)
+},
 
 flick:function(event){
 var factor;
@@ -13383,6 +13645,7 @@ stopAnimating:function(){
 if(this.animating){
 this.animating=false;
 this.getAnimationQueue().remove(this);
+if (this.isValid) this.hideScrollbars(200);
 }
 },
 
@@ -13659,6 +13922,7 @@ scrolled=true;
 if(scrolled){
 this.setScrollPosition(scrollPosition);
 this.notifyListeners(false,currentCoordinate);
+if (this.isValid && !this.hasScrollbars) this.animateScrollbars();
 }
 
 if(done.x&&done.y&&!this.unhandledAnimatingOverscroll()){
