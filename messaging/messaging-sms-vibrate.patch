diff --git a/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js b/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
index 5a5aec0..67ff11f 100644
--- a/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
+++ b/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
@@ -254,6 +254,52 @@ NotificationAssistant.prototype.considerForNotification = function(notificationD
 		} else {
 			Mojo.Log.error("Error: Unsupported notification type %s", notificationType);
 		}
+		if (this.Messaging.messagingPrefs.getNotificationSound() === "ringtone" || this.Messaging.messagingPrefs.getNotificationSound() === "alert" || this.Messaging.messagingPrefs.getNotificationSound() === "vibrate")
+		{
+		var vibrateperiod = 1;
+		var vibrateduration = 2000;
+					new Mojo.Service.Request('palm://com.palm.telephony', {method: 'callStateQuery',parameters: {},onSuccess : function (e){ 
+						if (e.lines == "")
+						{
+							new Mojo.Service.Request('palm://com.palm.keys/switches', {method: 'status',parameters: {"get": "ringer"},onSuccess : function (e){ 
+								if (e.state === "down")
+								{
+									new Mojo.Service.Request('palm://com.palm.audio/state', {method: 'getPreference',parameters: {"names": ["VibrateWhenRingerOff"]},onSuccess : function (e){ 
+										if (e.VibrateWhenRingerOff === true)
+										{
+											new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {method: "get", parameters:{owner: "com.signalofdawn.messaging.vibrate", keys: ["duration"]}, onSuccess : function (response) { if((response) &&
+											(response.duration)) {
+													vibrateduration = response.duration;
+													new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {method: "get", parameters: {owner: "com.signalofdawn.messaging.vibrate", keys: ["period"]}, onSuccess : function (response) { if((response)
+											&& (response.period)) {
+													vibrateperiod = response.period;
+													new Mojo.Service.Request("palm://com.palm.vibrate", {method: 'vibrate', parameters: { 'period': vibrateperiod,'duration': vibrateduration }});
+													}}});
+											}else{													new Mojo.Service.Request("palm://com.palm.vibrate", {method: 'vibrate', parameters: { 'period': vibrateperiod,'duration': vibrateduration }});}},onFailure : function (){													new Mojo.Service.Request("palm://com.palm.vibrate", {method: 'vibrate', parameters: { 'period': vibrateperiod,'duration': vibrateduration }});}});
+										} 
+									}}); 
+								}
+								else
+								{
+									new Mojo.Service.Request('palm://com.palm.audio/state', {method: 'getPreference',parameters: {"names": ["VibrateWhenRingerOn"]},onSuccess : function (e){ 
+										if (e.VibrateWhenRingerOn === true)
+										{
+											new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {method: "get", parameters:{owner: "com.signalofdawn.messaging.vibrate", keys: ["duration"]}, onSuccess : function (response) { if((response) &&
+											(response.duration)) {
+													vibrateduration = response.duration;
+													new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {method: "get", parameters: {owner: "com.signalofdawn.messaging.vibrate", keys: ["period"]}, onSuccess : function (response) { if((response)
+											&& (response.period)) {
+													vibrateperiod = response.period;
+													new Mojo.Service.Request("palm://com.palm.vibrate", {method: 'vibrate', parameters: { 'period': vibrateperiod,'duration': vibrateduration }});
+													}}});
+											}else {													new Mojo.Service.Request("palm://com.palm.vibrate", {method: 'vibrate', parameters: { 'period': vibrateperiod,'duration': vibrateduration }});}},onFailure : function (){													new Mojo.Service.Request("palm://com.palm.vibrate", {method: 'vibrate', parameters: { 'period': vibrateperiod,'duration': vibrateduration }});}});
+										} 
+									}}); 
+								}
+							}}); 
+						}
+					}}); 
+		}
 	}
 };
 
