diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppLaunch.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppLaunch.js
index 510366d..f762aef 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppLaunch.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppLaunch.js
@@ -41,6 +41,7 @@ enyo.kind ({
 		enyoApp.watch ({createEvent:this, currentDate:this});
 		enyoApp.app					= new calendar.App();
 		enyoApp.shareCurrentDate	= enyo.bind (this, this.shareCurrentDate);
+		enyoApp.getNotesIconParts	= enyo.bind (this, this.getNotesIconParts);
 	},
 
 	destroy: function destroy () {
@@ -220,6 +221,31 @@ enyo.kind ({
 		};
 		enyo.application.share ({currentDate: currentDate});
 	},
+	
+	getNotesIconParts: function(note){
+		//Mojo.Log.error("icon parsing note :::::: "+ note );
+		if(!note || note === ""){
+			return false;
+		}
+		var start = note.indexOf('ICON=');
+		if( start > -1) {
+			var test = note.indexOf(';',start);
+			if(test >-1 && test > start + 5 && test - start <20){
+				var startTxt, endTxt, result, vresult, resultArray, patt = /[^a-z0-9_-]/;
+				startTxt = note.substring(0,start);
+				endTxt = note.length > test +1 ? note.substring(test+1) : "";
+				result = note.substring(start+5,test);
+				vresult = !patt.test(result) && result;
+				resultArray = vresult && [startTxt, vresult, endTxt];
+				//Mojo.Log.error("icon parsing :::::: "+ resultArray );
+				return resultArray;
+			} else {
+				return false;
+			}
+		} else {
+			return false;
+		}
+	},
 
 	showCalendarView: function showCalendarView () {
 		var calendarWindow	= enyo.windows.fetchWindow ("Calendar")		// Find any pre-existing Calendar GUI Window.
@@ -228,11 +254,27 @@ enyo.kind ({
 
 		var	launchDate
 		,	timeMachine		= this.timeMachine
-
+		,	prefsMgr	= enyo.application.prefsManager
+		,	openInView	= prefsMgr && prefsMgr.prefs.openInView
 		// Show day view at launch.  Turn off auto-propogation of the previous view's date.
 		,	view			= {data: {view:"DayView", autoDate:false}, keep: true}
 		,	windowParams	= enyo.windowParams
 		;
+		
+		if(openInView) {
+			if(openInView === "last"){
+				var lastView = prefsMgr.getUberCalendarPrefs({name:"uberLastView"});
+				openInView	= lastView || "day";
+			}
+			if(openInView === "dayCarousel" || openInView === "day"){ 
+				view.data.view = "DayView";
+			} else if(openInView === "week" || openInView === "weekCarousel"){ 
+				view.data.view = "WeekView";
+			} else if(openInView === "month" || openInView === "monthCarousel"){ 
+				view.data.view = "MonthView";
+			}
+		}
+		//console.error("launch view: " +openInView +"; lastView: "+ lastView);
 		calendarWindow && (view.wait = true);									// If the window already exists, make it switch views first.
 		enyoApp.share ({showView: view});
 
@@ -283,7 +325,7 @@ enyo.kind ({
 //			enyo.application.launchCount = 1;
 //		}
 
-		if(params.alarm || params.alarmClose || params.alarmDeleted || params.alarmUpdated){
+		if(params.alarm || params.alarmClose || params.alarmDeleted || params.alarmUpdated || params.playAlarmSound){
 			DEBUG && this.log ("========= LAUNCHED REMINDER");
 			enyo.application.reminderManager.handleLaunchParams(params);
 		}
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppView.js
index 40d8368..bcff42c 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/AppView.js
@@ -19,7 +19,12 @@ enyo.kind({
 	published:
 	{	is24Hr		: null	// Boolean	: For watching 24hr clock mode changes.
 	,	showEvent	: null	// Object	: For watching all show event requests (i.e. From Day, Week, or Month views, ReminderDialog, or Cross Launch).
+	,	quickEdit	: null	// Object	: For watching all uc quick edit event requests (i.e. From Day, Week, agenda taps).
+	,	quickDate	: null	// date timestamp	: For watching all uc quick date event requests (i.e. From Day, Week, agenda taps).
 	,	showView	: null	// Object	: For watching all show view requests.
+	,	uberMode	: 2		// calendar mode: 0-move, 1-copy, 2-info
+	,	agendaRendered: null // watching list start up
+	,	uberWorkWeek : false //for work week in week view
 	},
 
 	components: [
@@ -47,33 +52,63 @@ enyo.kind({
 		,	onShowToday				: "showDate"
 		,	onSyncNow				: "syncNow"
 		},//End: AppMenu
-
 		{kind: enyo.Pane, flex: 1, onSelectView: "viewSelected", components: [
 			{name: "calendar", kind: enyo.VFlexBox,
 				components: [
-					{kind:"calendar.CalendarList"},
-					{name:"main", className:"view", kind:enyo.Pane, flex: 1, onSelectView: "viewSelected", transitionKind: "calendar.SimpleTransition", components: [  // Using a custom transition until the discovered enyo issue in enyo.transitions.Simple is resolved (DFISH-28771)
-						{name:"dayCarousel"		, kind:"calendar.day.DayCarousel"		, flex:1, lazy: true},
-						{name:"weekCarousel"	, kind:"calendar.week.WeekCarousel"		, flex:1, lazy: true},
-						{name:"monthCarousel"	, kind:"calendar.month.MonthCarousel"	, flex:1, lazy: true}
-					]},
-					{className:"view-controls", kind: enyo.HFlexBox, align:"center", pack:"center", components: [
-						{name: "btnNew", kind: enyo.Button, className: "enyo-button-light" , caption:$L("New event"), i_con: "../images/menu-icon-createNew.png"	, onclick:"createTimedEvent"},
-						{kind: enyo.Spacer},
-						{name:"viewSwitcher", kind: enyo.RadioGroup, className: "Rbutton", onChange:"switchView", onclick:"switchViewClicked", value:-1, components: [
-							{name:"daySwitch"	, kind: enyo.RadioButton, lab_el: $L("Day")		, icon: "../images/menu-icon-day.png"	, value: 0 },	// lab_el is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
-							{name:"weekSwitch"	, kind: enyo.RadioButton, lab_el: $L("Week")	, icon: "../images/menu-icon-week.png"	, value: 1 },	// lab_el is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
-							{name:"monthSwitch"	, kind: enyo.RadioButton, lab_el: $L("Month")	, icon: "../images/menu-icon-month.png"	, value: 2 }	// lab_el is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
+					{name:"defCalList", kind:"calendar.CalendarList", onEditGroups: "showEditGroups"},
+					{name: "uberView", kind: enyo.SlidingPane, style:"background:#fff;padding:0px;margin-top:-8px;", onSlideComplete:"ucPaneMove", flex: 1,components: [
+						{name: "left", width: "250px", kind:enyo.SlidingView, dragAnywhere:false, fixedWidth:true, style:"background:#fff;margin:0px;padding:0px;", components: [
+								{name: "ucListView", kind: "calendar.uc.UberAgenda", linked:true, uberMode:2, flex:1, onUcSearchDone:"ucSearchDone", onUcSearchStart:"hideMiniMonth", onDelete:"showDeleteConfirm"},
+								{name:"miniMonthDrawer", kind: "DividerDrawer", caption: $L("mini month"), style:"background:#fff;",components:[
+									{kind:enyo.HFlexBox, pack:"center", align:"center", components:[
+										{name:"miniMonth", kind:"calendar.uc.MiniMonth", linked:true, onMiniMonDateTap:"miniMonDateTap", followMe: ["currentDate","days","prefs", "uberMode"]},
+									]}
+								]},
+								{className:"footerPageEffect"},
+								{kind: enyo.Toolbar, components: [
+									//{kind: enyo.GrabButton},
+									//{kind: enyo.Spacer},
+									{name: "appMiniLinked", kind: enyo.ToggleButton, onLabel:$L('link'), onChange:"ucMiniLinked", state:true},
+									{name:"uberModeSwitch", kind: enyo.RadioGroup, value:2, onChange:"switchUberMode", onclick:"uberModeClicked", components: [
+										{name:"uberMove", kind: enyo.RadioButton, l_abel:$L("T"), icon:"../images/menu-icon-showToday.png", value:0},
+										{name:"uberCopy", kind: enyo.RadioButton, l_abel:$L("C"), icon: "../images/menu-icon-jumpTo.png", value:1},
+										{name:"uberInfo", kind: enyo.RadioButton, label:$L("i"), value:2}
+									]},
+									{name:"uc_PrevDate", kind:enyo.ToolButton, icon:'/usr/palm/applications/com.palm.app.browser/images/chrome/menu-icon-refresh.png', onclick:"ucPrevDate"}
+									
+								]}
+						]},
+						{name: "right", kind:enyo.SlidingView, dragAnywhere:false, flex: 1,style:"background:#fff;padding:0px;margin:0px;", peekWidth: 0, components: [
+						{name:"main", className:"view", kind:enyo.Pane, style:"background:#fff;padding:1px;margin:0px;", flex: 1, onSelectView: "viewSelected", transitionKind: "calendar.SimpleTransition", components: [  // Using a custom transition until the discovered enyo issue in enyo.transitions.Simple is resolved (DFISH-28771)
+							{name:"dayCarousel"		, kind:"calendar.day.DayCarousel"		, flex:1, lazy: true},
+							{name:"weekCarousel"	, kind:"calendar.week.WeekCarousel"		, flex:1, lazy: true},
+							{name:"monthCarousel"	, kind:"calendar.month.MonthCarousel"	, flex:1, lazy: true}
 						]},
-						{kind: enyo.Spacer},
-						{name: "btnJump",   kind: enyo.IconButton, className: "enyo-button-light", caption: $L("Jump to..."), i_con: "../images/menu-icon-jumpTo.png", onclick:"showJumpTo"}
-						//{name: "btnJump",   kind: enyo.IconButton, className: "menuButtons enyo-button-light", ca_ption: $L("Jump to..."), icon: "../images/menu-icon-jumpTo.png", onclick:"showJumpTo"},				// ca_ption is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
-						//{name: "btnToday",  kind: enyo.IconButton, className: "menuButtons btnToday enyo-button-light", ca_ption: $L("Show today"), icon: "../images/menu-icon-showToday.png", onclick:"showToday"}		// ca_ption is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
-					]},
-					{className:"footerPageEffect"}
+						{className:"footerPageEffect"},
+							{kind: enyo.Toolbar, components: [
+								{kind: enyo.GrabButton},
+								{kind:enyo.ToolButtonGroup, components:[
+									//{className:"view-controls", kind: enyo.HFlexBox, align:"center", pack:"center", components: [
+									{name: "btnNew", kind: enyo.ToolButton, style:"padding-left:5px;", caption:$L("New event"), i_con: "../images/menu-icon-createNew.png"	, onclick:"createTimedEvent"},
+									{kind: enyo.Spacer},
+									{name:"viewSwitcher", kind: enyo.RadioGroup, onChange:"switchView", onclick:"switchViewClicked", value:-1, components: [
+										{name:"daySwitch"	, kind: enyo.RadioButton, lab_el: $L("Day")		, icon: "../images/menu-icon-day.png"	, value: 0 },	// lab_el is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
+										{name:"weekSwitch"	, kind: enyo.RadioButton, lab_el: $L("Week")	, icon: "../images/menu-icon-week.png"	, value: 1 },	// lab_el is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
+										{name:"monthSwitch"	, kind: enyo.RadioButton, lab_el: $L("Month")	, icon: "../images/menu-icon-month.png"	, value: 2 }	// lab_el is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
+									]},
+									{kind: enyo.Spacer},
+									{name: "btnJump",   kind: enyo.ToolButton, caption: $L("Jump to..."), i_con: "../images/menu-icon-jumpTo.png", onclick:"showJumpTo"}
+									//{name: "btnJump",   kind: enyo.IconButton, className: "menuButtons enyo-button-light", ca_ption: $L("Jump to..."), icon: "../images/menu-icon-jumpTo.png", onclick:"showJumpTo"},				// ca_ption is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
+									//{name: "btnToday",  kind: enyo.IconButton, className: "menuButtons btnToday enyo-button-light", ca_ption: $L("Show today"), icon: "../images/menu-icon-showToday.png", onclick:"showToday"}		// ca_ption is intentionally misspelled to keep but not use the display text per Calendar's Visual Design.
+								]},
+							]}
+						]}
+					]} //end sliding Pane
 			]},//End: calendar
 			{name:"editView"		, kind:"calendar.edit.EditView"			, lazy: true, showing: false, onExit:"closeView", onDelete:"showDeleteConfirm", flex:1},
-			{name:"prefsView"		, kind:"calendar.prefs.PreferencesView"	, lazy: true, showing: false, onExit:"closeView"}
+			{name:"prefsView"		, kind:"calendar.prefs.PreferencesView"	, lazy: true, showing: false, onExit:"closeView"},
+			{name:"missedRemindersView"		, kind:"calendar.reminders.MissedRemindersView"	, lazy: true, showing: false, onExit:"closeView", onShowEventDetails:"closeView"},
+			{name:"editUberGroupsView"		, kind:"calendar.UberGroupsEdit"	, lazy: true, showing: false, onExit:"closeGroupsEditView"}
 //			{name:"firstLaunchView"	, kind:"calendar.FirstLaunchView"		, lazy: true, showing: false, onExit:"exitFirstLaunch"}	// TODO: Move from calendar.js
 		]}//End: pane
 	],//End:components
@@ -87,6 +122,16 @@ enyo.kind({
 		]},
 		{name: "deleteDialog", kind: enyo.ModalDialog, scrim:true, showing:false, components: [
 			{name: "deleteConfirm", kind: "calendar.edit.DeleteConfirm"}
+		]},
+		{name: "uberToolTip", kind: enyo.Popup, style:"padding:0px; margin: 0px; min-width:60px;", components: [
+		    {name:"uberToolTipText", content: "", kind:enyo.HFlexbox, style:"font-size: 0.8em;"}
+		]},
+		{name: "confirmUCAction", kind: enyo.ModalDialog, scrim:true,  caption: $L("Attention"), components:[
+			{name:"actionText", kind:enyo.Control, content: "hi", align:"center", pack:"center", className:"enyo-text-info"},
+			{kind:enyo.HFlexBox, align:"center", pack:"center", flex:1, components:[
+				{kind: enyo.Button, caption: $L("OK"), onclick: "ConfirmUberAction", className:"enyo-button-affirmative"},
+				{kind: enyo.Button, caption: $L('Cancel'), onclick: "CancelUberAction", className:"enyo-button-negative"}
+			]}
 		]}
 	],//End:popups
 
@@ -98,6 +143,7 @@ enyo.kind({
 
 	constructed: function constructed () {
 		this.createEventThen			=	enyo.bind (this, this.createEventThen);
+		this.createUCEventThen			=	enyo.bind (this, this.createUCEventThen);
 		this.createLaunchEventThen		=	enyo.bind (this, this.createLaunchEventThen);
 		this.handleUniversalSearch		=	enyo.bind (this, this.handleUniversalSearch);
 
@@ -111,20 +157,30 @@ enyo.kind({
 
 		var enyoApp	= enyo.application
 		,	ui		= this.$
+		,	name
+		,	prefsMgr = enyoApp.prefsManager
+		,	prefs = prefsMgr.prefs
+		,	openInView	= prefs && prefs.openInView
 		;
-		ui.daySwitch.clickHandler();
-		ui.pane.selectView (ui.calendar);
+		ui.left.applyStyle("width", ((prefs && prefs.shrinkAgenda) ? "250px" : "320px"));
+		ui.right.setPeekWidth((prefs && prefs.showPeek) ? 30 : 0);
+		ui.miniMonthDrawer.setOpen((prefs && prefs.showMini) ? true : false);
+		//ui.daySwitch.clickHandler();
+		//ui.pane.selectView (ui.calendar);
 
 		this.createComponents (this.popups);
+		ui.ucListView.uberMode = this.uberMode;
+		ui.uberModeSwitch.value = this.uberMode;
+		enyo.application.uberMode = this.uberMode;
 
 		this.is24Hr = !enyoApp.fmts.isAmPm();	// Use the current 24hr mode system setting as default.
 		enyoApp.autoDate = true;				// When switching views (example: WeekView->DayView), use the previous view's date.
 
-		enyoApp.watch	({ is24Hr:this, showEvent:this, showView:this });
+		enyoApp.watch	({ is24Hr:this, showEvent:this, quickEdit:this, quickDate: this, showView:this, agendaRendered: this});
 	},
 
 	destroy: function destroy () {
-		enyo.application.ignore ({ is24Hr:this, showEvent:this, showView:this });
+		enyo.application.ignore ({ is24Hr:this, showEvent:this, quickEdit:this, quickDate: this, showView:this, agendaRendered: this});
 		this.inherited (arguments);
 	},
 
@@ -162,10 +218,50 @@ enyo.kind({
 
 	windowHiddenHandler: function windowHiddenHandler () {		// TODO: Set start date & view based on user's app preferences.
 		DEBUG && this.log ("======= HIDDEN\t");
-		var	view	= {data: {view: calendar.day.DayView, autoDate: false}, wait: true};	// Since keep-alive suspends timers, make share synchronous.
-
-		enyo.application.share	({showView: view});							// Ensure that "today" view is already displayed when opened with keep-alive.
-		enyo.application.shareCurrentDate	({date:new Date(), wait:true});	// Ensure that the current date is already today when opened with keep-alive.
+		var prefsMgr	= enyo.application.prefsManager
+		,	nowShowing = this.$.main.getViewName()
+		,	needChange
+		,	view	= {data: {view: calendar.day.DayView, autoDate: false}, wait: true}	// Since keep-alive suspends timers, make share synchronous.
+		,	linkOffAfterLoad = prefsMgr && prefsMgr.prefs.linkOffAfterLoad
+		,	openInView	= prefsMgr && prefsMgr.prefs.openInView;
+		
+		if(linkOffAfterLoad){
+			this.$.appMiniLinked.setState(true);
+			this.ucMiniLinked(this, true);
+		}
+		if(openInView) {
+			if(openInView === "last"){
+				var lastView = prefsMgr.getUberCalendarPrefs({name:"uberLastView"});
+				openInView	= lastView || "day";
+			}
+			if(openInView === "dayCarousel" || openInView === "day"){ 
+				view.data.view = calendar.day.DayView;
+			} else if(openInView === "week" || openInView === "weekCarousel"){ 
+				view.data.view = calendar.week.WeekView;
+			} else if(openInView === "month" || openInView === "monthCarousel"){ 
+				view.data.view = calendar.month.MonthView;
+			}
+		}
+		switch(nowShowing) {
+			case "dayCarousel":
+				if(openInView !== "dayCarousel" && openInView !== "day"){ needChange = true;}
+				break;
+			case "weekCarousel":
+				if(openInView !== "week" && openInView !== "weekCarousel"){ needChange = true;}
+				break;
+			case "monthCarousel":
+				if(openInView === "month" && openInView === "monthCarousel"){ needChange = true;}
+			default:
+				break;
+		}
+		//console.error("in hidden view: "+ openInView+ "; needChange: "+ needChange + ", nowShowing: " + nowShowing);
+		if(needChange){
+			//view.wait = true;
+			enyo.application.share	({showView: view});
+		}
+		enyo.application.shareCurrentDate	({date:new Date(), wait:true});
+		//enyo.application.share	({showView: view});							// Ensure that "today" view is already displayed when opened with keep-alive.
+		//enyo.application.shareCurrentDate	({date:new Date(), wait:true});	// Ensure that the current date is already today when opened with keep-alive.
 	},
 
 	windowParamsChangeHandler: function windowParamsChangeHandler () {
@@ -197,6 +293,67 @@ enyo.kind({
 		this.log(" ENYO PERF: TRANSITION DONE time: "+ Date.now());
 	},
 
+	quickEditChanged: function quickEditChanged (lastEventShown) {
+		if(!this.quickEdit){return;}
+		if(this.uberMode ===2) {
+			this.uberQuickEdit (this, this.quickEdit);
+		} else {
+			if(this.quickEdit){
+				var event = this.quickEdit;
+				var isReadOnly = enyo.application.calendarsManager.isCalendarReadOnly(event.calendarId)
+				if(isReadOnly){
+					var errorTxt = $L('Error!  Can not move or copy read only events')
+					this.quickEdit = null;
+					enyo.application.free ({quickEdit: true});
+					this.toolTipDisplay(errorTxt);
+					return;
+				}
+				//do move & copy here
+				var msg = '"'+(event && event.subject)+'"';
+				if(!this.quickDate){
+					msg = msg + $L("--> select date");
+					this.toolTipDisplay(msg);
+				} else {
+					var dtxt, dFMT, date = new Date(this.quickDate);
+					if((this.quickEdit && this.quickEdit.allDay) || (date.getHours() === 0 && date.getMinutes() === 0)){
+						dFMT = new enyo.g11n.DateFmt({date:"short"});
+					} else {
+						dFMT = new enyo.g11n.DateFmt({date:"short", time:(!!this.is24Hr ? "HH:mm" : "hh:mm a")});
+					}
+					dtxt = dFMT.format(date);
+					var moveTemplate =  new enyo.g11n.Template($L("Move #{msg} to #{dtxt}"));
+					var copyTemplate =  new enyo.g11n.Template($L("Copy #{msg} to #{dtxt}"));
+					msgTxt = this.uberMode === 0 ? moveTemplate.evaluate({msg: msg, dtxt:dtxt}) :  copyTemplate.evaluate({msg: msg, dtxt:dtxt}); 
+					this.showConfirm(msgTxt);
+				}
+			}
+		}
+	},
+	
+	quickDateChanged: function quickDateChanged(lastQuickDate){
+		if(this.uberMode === 2){
+			return;
+		}
+		var date, msg, dFMT, subject, dtxt;
+		date = !!this.quickDate ? new Date(this.quickDate) : new Date();
+		if((this.quickEdit && this.quickEdit.allDay) || (date.getHours() === 0 && date.getMinutes() === 0)){
+			dFMT = new enyo.g11n.DateFmt({date:"short"});
+		} else {
+			dFMT = new enyo.g11n.DateFmt({date:"short", time:(!!this.is24Hr ? "HH:mm" : "hh:mm a")});
+		}
+		dtxt = dFMT.format(date);
+		if(!this.quickEdit){
+			msg = '"' + dtxt +'"' + $L("--> select event");
+			this.toolTipDisplay(msg);
+		} else {
+			msg = this.quickEdit && this.quickEdit.subject;
+			var moveTemplate =  new enyo.g11n.Template($L("Move #{msg} to #{dtxt}"));
+			var copyTemplate =  new enyo.g11n.Template($L("Copy #{msg} to #{dtxt}"));
+			msgTxt = this.uberMode === 0 ? moveTemplate.evaluate({msg: msg, dtxt:dtxt}) :  copyTemplate.evaluate({msg: msg, dtxt:dtxt}); 
+			this.showConfirm(msgTxt);
+		}
+	},
+
 	showViewChanged: function showViewChanged (lastShowView) {
 		enyo.application.free ({showView:true});	// Free the showView from datahub just in case it is being kept.
 
@@ -238,6 +395,11 @@ enyo.kind({
 		this.$.pane.back();
 	},
 
+	closeGroupsEditView: function closeGroupsEditView (event){
+		this.$.pane.back();
+		this.$.defCalList.setupUberGroups();
+	},
+
 	createAllDayEvent: function createAllDayEvent (from, domEvent) {
 		var date = this.timeMachine;
 		date.setTime (Date.now());
@@ -258,6 +420,17 @@ enyo.kind({
 		return true;
 	},
 
+	createUCEventThen: function createUCEventThen (event) {
+		if (!event) {
+			this.error ("\tFailed to create event GUI using event [", event, "].\t");
+			return;
+		}
+		//enyo.application.shareCurrentDate ({date:new Date (event.dtstart).clearTime(), wait:true});
+		event.saveAsIs=true;
+		var addEvent = {event:event, show:true, then:undefined};	// "then" can be a Function or be omitted.
+		enyo.application.share ({addEvent: {data: addEvent}});				// Request adding the event to a view.
+	},
+
 	createEventThen: function createEventThen (event) {
 		if (!event) {
 			this.error ("\tFailed to create event GUI using event [", event, "].\t");
@@ -301,6 +474,24 @@ enyo.kind({
 		return true;
 	},
 
+	uberQuickEdit: function uberQuickEdit(from, event){
+		if (!event) {
+			this.error ("\tUnable to quick edit non-existent event.\t");
+			return;
+		}
+		var	hasId	= ("_id" in event)
+		,	ui		= this.$
+		,	isReadOnly = enyo.application.calendarsManager.isCalendarReadOnly(event.calendarId)
+		,	view
+		;
+		if(hasId && !isReadOnly){
+			ui.pane.viewByName ("editView").setEvent (event);	//		Update Edit View with the event's content.
+			ui.pane.selectView (ui.editView);					//		then show Edit View.
+		} else{
+			this.displayEvent(from, event);
+		}
+	},
+	
 	displayEvent: function displayEvent (from, eventGUIOrEvent) {
 		DEBUG && this.log ("Event:", eventGUIOrEvent);
 
@@ -338,9 +529,33 @@ enyo.kind({
 
 			case ("newEvent"		in params):				// Supports "New Calendar Event" Spec on webOS Developer Network:
 			case ("quickLaunchText"	in params):				// Supports Just Type "New Calendar Event" Quick Action:
+				
+				if(!params.newEvent && params.quickLaunchText){
+					var datetxt, loc, subject, evt, fmt, fmtm, fmtl, dtStr, dt, parts = [], str = params.quickLaunchText.toString();
+					parts = str.split(";");
+					loc = ((parts.length > 0) && parts[2]) ? parts[2] : "";
+					datetxt = ((parts.length > 0) && parts[1]) ? parts[1] : "";
+					var UcDate =this.getUcDateParser();
+					fmtl = new enyo.g11n.DateFmt({date: "long"});
+					fmtm  = new enyo.g11n.DateFmt({date: "medium"});
+					fmt  = new enyo.g11n.DateFmt();
+					dtStrs = [fmt.toString(), fmtm.toString(), fmtl.toString()];
+					dt = !!datetxt ? UcDate.parseExact(datetxt, dtStrs) : "";
+					dt = (!!datetxt && (dt === null || dt === "")) ? UcDate.parse(datetxt): dt;
+					dt = (!!datetxt && (dt === null || dt === "")) ? Date.parse(datetxt): dt;
+					dt = ((dt === null) || (dt === "") || (dt && isNaN(dt.getTime()))) ? "" : dt.getTime();
+					
+					subject = ((parts.length > 0) && parts[0]) ? parts[0] : params.quickLaunchText;
+					evt = {subject: subject, dtstart: dt, location: loc};
+					// console.error("quicktext :::::: " + JSON.stringify(evt));
+					// console.error("quicktext :::::: " + fmt.toString());
+					// console.error("quicktext :::::: " + fmtm.toString());
+					// console.error("quicktext :::::: " + fmtl.toString());
+					//return;
+				}
 				var createEvent =
-				{	event		: params.newEvent || {subject: params.quickLaunchText}
-				,	keepTime	: !!params.newEvent
+				{	event		: params.newEvent || evt
+				,	keepTime	: !!params.newEvent || dt !== ""
 				,	then		: this.createLaunchEventThen
 				};
 				enyo.application.share ({createEvent: {data: createEvent}});
@@ -373,6 +588,10 @@ enyo.kind({
 				);
 				return;	
 
+			case ("reminders" in params):
+				this.$.pane.selectViewByName ("missedRemindersView");
+				return;
+
 			default:
 				break;
 		}
@@ -407,6 +626,293 @@ enyo.kind({
 		this.showDate (date);
 	},
 
+	miniMonDateTap: function miniMonDateTap(from, date){
+		//depending on mode do something with date
+		if(date && ( date instanceof Date ==true)){
+			//test for mode here 
+			if(this.uberMode === 2){
+				enyo.application.shareCurrentDate({date: new Date(date)});
+			} else {
+				enyo.application.share({quickDate: {data: date.getTime()}});
+			}
+		}
+	},
+	
+	hideMiniMonth: function hideMiniMonth(inSender, inEvent){
+		var txt = this.$.ucListView.$.ucAgendaSearch.getValue();
+		if(txt ===""){
+			this.miniDrawerState = this.$.miniMonthDrawer.getOpen();
+		}
+		this.$.miniMonthDrawer.close();
+	},
+	
+	saveLastView: function saveLastView(viewName){
+		var prefsMgr = enyo.application.prefsManager;
+		DEBUG && this.log("previous Cookie setting: ", prefsMgr.getUberCalendarPrefs({name:"uberLastView"}));
+		prefsMgr.setUberCalendarPrefs({name:"uberLastView", values: viewName});
+		DEBUG && this.log("last Cookie setting: ", viewName);
+	},
+	
+	ucSearchDone: function ucSearchDone(){
+		if(this.miniDrawerState){
+			this.$.miniMonthDrawer.setOpen(true);
+		}
+	},
+	
+	ucPrevDate: function ucPrevDate(){
+		var prev = this.$.miniMonth.getPrevDate();
+		DEBUG && this.log("get miniMonth previous date:  ", prev);
+		if(prev && (prev instanceof Date == true)){
+			enyo.application.shareCurrentDate({date: new Date(prev)});
+		}
+	},
+	
+	ucMiniLinked: function ucMiniLinked(inSender, inState){
+		this.$.miniMonth.setLinked(inState);
+		this.$.ucListView.setLinked(inState);
+	},
+	
+	ucPaneMove: function ucPaneMove(inSender, inValue){
+		var view = this.$.main.getViewName();
+		DEBUG && this.log("why am I here??????????????????????????????????", inSender.name);
+		if(this.$.weekCarousel){
+			this.$.weekCarousel.showing && this.$.weekCarousel.resized();
+			this.$.weekCarousel.performResize(true);
+		}
+		if(this.$.dayCarousel){
+			this.$.dayCarousel.broadcastMessage("childNeedsResize", [true]);
+		}
+	},
+	
+	switchUberMode: function switchUberMode(from, i){
+		var ui = this.$;
+		if(this.uberMode !== i){
+			this.uberMode = i;
+			enyo.application.uberMode = this.uberMode;
+			enyo.application.share({uberMode: {data: this.uberMode}});
+		}
+	},
+	
+	uberModeClicked: function uberModeClicked(from, domEvent){
+		var msg, mode = this.$.uberModeSwitch.getValue();
+		switch(mode){
+			case 0:
+				msg = $L("Move");
+				break;
+			case 1:
+				msg = $L("Copy");
+				break;
+			case 2:
+				msg = $L("Information");
+				this.quickEdit = null;
+				this.quickDate = null;
+				enyo.application.free({quickDate: true, quickEdit:true});
+				break;
+		}
+		this.toolTipDisplay(msg, domEvent);
+	},
+	
+	uberModeChanged: function uberModeChanged (oldMode){
+		
+	},
+	
+	agendaRenderedChanged: function agendaRendered(oldMode){
+		if(enyo.application.prefsManager.prefs.linkOffAfterLoad){
+			this.$.appMiniLinked.setState(false);
+			this.$.appMiniLinked.doChange();
+		}
+	},
+	
+	showConfirm: function showConfirm(msg){
+		var time, ui = this.$;
+		ui.confirmUCAction.lazy && ui.confirmUCAction.validateComponents();
+		ui.actionText && ui.actionText.setContent(msg);
+		ui.confirmUCAction.openAtCenter();
+	},
+	
+	ConfirmUberAction: function ConfirmUberAction(from, inEvent){
+		//console.error("event ::: " + JSON.stringify(this.quickEdit) + " , date :::: " + this.quickDate);
+		this.$.confirmUCAction.close();
+		if(!this.quickDate || !this.quickEdit || !("_id" in this.quickEdit)){
+			return;
+		}
+		var event = this.quickEdit
+		,	date = new Date(this.quickDate)
+		,	start = event.currentLocalStart || event.dtstart
+		,	end = event.currentLocalEnd || event.dtend
+		,	duration = end - start
+		,	hours = date.getHours()
+		,	mins = date.getMinutes()
+		,	workDay = new Date()
+		,	ui = this.$
+		,	editView = ui.pane.viewByName("editView")
+		,	newStart, newEnd
+		;
+
+		if(this.uberMode === 0){ //move
+			if((hours === 0 && mins=== 0) || event.allDay){
+				var newTime = workDay.setTime(date);
+				if(event.allDay){
+					editView.setEvent(event);
+					editView.pickerStart = +date;
+					workDay.setTime(+date);
+					workDay.setHours(23);
+					workDay.setMinutes(59);
+					workDay.setSeconds(59);
+					workDay.setMilliseconds(0);
+					editView.pickerEnd = workDay.getTime();
+					newStart = new Date(+date);
+					newEnd = new Date(workDay);
+					editView.$.editMiniMonth.setViewDay();
+					editView.$.startDate.setValue(newStart);
+					editView.$.startTime.setValue(newStart);
+					editView.$.endDate.setValue(newEnd);
+					editView.$.endTime.setValue(newEnd);
+					editView.startOrEndDateModified = true;
+					ui.pane.selectView(ui.editView);
+				} else {
+					editView.setEvent(event);
+					workDay.setTime(start);
+					hours = workDay.getHours();
+					mins = workDay.getMinutes()
+					workDay.setTime(+date);
+					workDay.setHours(hours);
+					workDay.setMinutes(mins);
+					workDay.setSeconds(0);
+					workDay.setMilliseconds(0);
+					editView.pickerStart = workDay.getTime();
+					editView.pickerEnd = workDay.getTime() + duration;
+					newStart = new Date(workDay);
+					newEnd = new Date(workDay.getTime() + duration);
+					editView.$.editMiniMonth.setViewDay();
+					editView.$.startDate.setValue(newStart);
+					editView.$.startTime.setValue(newStart);
+					editView.$.endDate.setValue(newEnd);
+					editView.$.endTime.setValue(newEnd);
+					editView.startOrEndDateModified = true;
+					ui.pane.selectView(ui.editView);
+				}
+			} else {
+				editView.setEvent(event);
+				editView.pickerStart = +date;
+				workDay.setTime(+date + duration);
+				editView.pickerEnd = workDay.getTime();
+				newStart = new Date(+date);
+				newEnd = new Date(workDay.getTime());
+				editView.$.editMiniMonth.setViewDay();
+				editView.$.startDate.setValue(newStart);
+				editView.$.startTime.setValue(newStart);
+				editView.$.endDate.setValue(newEnd);
+				editView.$.endTime.setValue(newEnd);
+				editView.startOrEndDateModified = true;
+				ui.pane.selectView(ui.editView);
+			}
+		} else if(this.uberMode === 1){ //copy
+			event = JSON.parse(JSON.stringify(this.quickEdit));
+			event._id && delete event._id;
+			event.etag && delete event.etag;
+			if(event.rrule){event.rrule = null;}
+			event.parentId && delete event.parentId;
+			event.sequence && delete event.sequence;
+			event.parentDtstart && delete event.parentDtstart;
+			event.lastModified && delete event.lastModified;
+			event.recurrenceId && delete event.recurrenceId;
+			event.remoteId && delete event.remoteId;
+			event.exdates && delete event.exdates;
+			event.saveAsIs = true;
+			if((hours === 0 && mins=== 0) || event.allDay){
+				if(event.allday){
+					event.dtstart = +date;
+					workDay.setTime(+date);
+					workDay.setHours(23);
+					workDay.setMinutes(59);
+					workDay.setSeconds(59);
+					workDay.setMilliseconds(0);
+					event.dtend = +workDay;
+				} else {
+					workDay.setTime(start);
+					hours = workDay.getHours();
+					mins = workDay.getMinutes()
+					workDay.setTime(+date);
+					workDay.setHours(hours);
+					workDay.setMinutes(mins);
+					workDay.setSeconds(0);
+					workDay.setMilliseconds(0);
+					event.dtstart = +workDay;
+					event.dtend = +workDay + duration;
+				}
+			} else {
+				event.dtstart = +date;
+				workDay.setTime(+date + duration);
+				event.dtend = workDay.getTime();
+			}
+			//console.error("event ::: " + JSON.stringify(event) + " , date :::: " + this.quickDate);
+			var createEvent =
+				{	event	: event
+				,	keepTime:true
+				,	then	: this.createUCEventThen
+				};
+			
+			enyo.application.share ({createEvent: {data: createEvent}});	// Request event creation.
+		}
+		var needChange, cDate = new Date(enyo.application.currentDate), nowShowing = this.$.main.getViewName();
+		date = date.clearTime();
+		cDate = cDate.clearTime();
+		switch(nowShowing) {
+			case "dayCarousel":
+				if(date.getTime() !== cDate.getTime()){ needChange = true;}
+				break;
+			case "weekCarousel":
+				if(!(cDate.getTime() <= date.getTime() && date.getTime() < (cDate.getTime()+7*24*3600000))){ needChange = true;}
+				break;
+			case "monthCarousel":
+				if(date.getMonth() !== cDate.getMonth() || (date.getMonth() === cDate.getMonth() && date.getFullYear() !== cDate.getFullYear())){ needChange = true;}
+			default:
+				break;
+		}
+		//console.error("need change ::: " + needChange + ", view ::: " + nowShowing);
+		if(needChange) {
+			enyo.application.shareCurrentDate ({date:new Date (date).clearTime(), wait:false});
+		}
+		this.$.uberModeSwitch.setValue(2)
+		this.uberMode = 2;
+		enyo.application.uberMode = this.uberMode;
+		this.quickEdit = null;
+		this.quickDate = null;
+		enyo.application.free({quickDate: true, quickEdit:true});
+		enyo.application.share({uberMode: {data: this.uberMode}});
+	},
+	
+	CancelUberAction: function CancelUberAction(from, inEvent){
+		this.$.confirmUCAction.close();
+		this.quickEdit = null;
+		this.quickDate = null;
+		enyo.application.free({quickDate: true, quickEdit:true});
+	},
+	
+	toolTipDisplay: function toolTipDisplay(msg, domEvent){
+		if(!msg){
+			return;
+		}
+		var time, ui = this.$;
+		ui.uberToolTip.lazy && ui.uberToolTip.validateComponents();
+		ui.uberToolTipText && ui.uberToolTipText.setContent(msg);
+		if(domEvent){
+			time = 1000;
+			ui.uberToolTip.openAtEvent(domEvent, {top: -80});
+		} else {
+			time = 2000;
+			ui.uberToolTip.openAtCenter();
+		}
+		setTimeout(enyo.bind(this, this.toolTipDown), 1000);
+	},
+	
+	toolTipDown: function toolTipDown(){
+		//console.log("firing nowwwwwwwwww");
+		var ui = this.$;
+		ui.uberToolTip.close();
+	},
+
 	resetMenu: function resetMenu (from) {
 		this.log(" ENYO PERF: SINGLE CLICK OCCURED time: "+ Date.now());
 		this.viewSelected (from, this.$.main.getView(), from);
@@ -441,13 +947,82 @@ enyo.kind({
 		this.$.pane.selectViewByName ("prefsView");
 	},
 
+	showEditGroups: function showEditGroups () {
+		this.$.pane.selectViewByName ("editUberGroupsView");
+	},
+
 	viewIdNameMap: ["dayCarousel", "weekCarousel", "monthCarousel"],
+	prefsIdName:["dayShowMini", "weekShowMini", "monthShowMini"],
 
 	switchView: function switchView (from, i) {							// This is called when switching between views.
+		var oldView = this.$.main.getViewName();
 		var name = this.viewIdNameMap [i];	
+		var prefs = enyo.application.prefsManager.prefs;
+		var prefName = this.prefsIdName[i];
+		var showMini = prefs && prefName && !!prefs[prefName];
 		this.switchViewClicked.lastClickedViewName = name;				//	Set the view switching flag.
+		this.saveLastView(name);
 		this.log(" ENYO PERF: SINGLE CLICK OCCURED time: "+ Date.now());
 		this.$.main.selectViewByName (name);							//	Switch to the selected view.
+		this.$.ucListView.setCurrentView(name);
+		this.$.miniMonthDrawer.setOpen(showMini);
+		//this.preloadDays(name, oldView);
+	},
+
+	preloadDays: function preloadDays(name, oldView){
+		var mon, yr, today, wkStart, wkEnd, cTS, expand, type, enyoApp = enyo.application, date = new Date()
+		, prefsStartOfWeek = enyoApp.prefsManager.prefs.startOfWeek - 1;
+		date.clearTime();
+		mon = date.getMonth();
+		yr = date.getFullYear();
+		today = date.getTime();
+		wkStart = date.moveToDayOfWeek(prefsStartOfWeek, -1).getTime();
+		wkEnd = date.addDays(7).getTime();
+		date.setTime(+enyoApp.currentDate);
+		date.clearTime();
+		cTS = date.getTime();
+		if(date.getMonth() === mon && date.getFullYear() === yr){
+			if(oldView && oldView === "monthCarousel"){
+				date.setTime(Date.now());
+				date.clearTime();
+			} else if(oldView && oldView === "weekCarousel"){
+				if(wkStart <= cTS && cTS <= wkEnd){
+					date.setTime(Date.now());
+					date.clearTime();
+				} else {
+					if(date.getDay() !== prefsStartOfWeek){
+						date.moveToDayOfWeek(prefsStartOfWeek, -1);
+					}
+				}
+			}
+		} else if(oldView && oldView === "monthCarousel"){
+			date.setDate(1);
+		}else if(oldView && oldView === "weekCarousel"){
+			date.moveToDayOfWeek(prefsStartOfWeek, -1);
+		}
+		DEBUG && console.error("currentDate is :::::: " + date);
+		switch(name){
+			case "dayCarousel":
+				expand = 0;
+				type = "preload"
+				break;
+			case "weekCarousel":
+				if(date.getDay() !== prefsStartOfWeek){date.moveToDayOfWeek(prefsStartOfWeek, -1);}
+				date.addDays(3);
+				expand = 3;
+				type = "preload"
+				break;
+			case "monthCarousel":
+				if(date.getDate() != 1){date.setDate(1);}
+				date.addDays(15);
+				expand = 16;
+				type = "preload"
+				break;
+		}
+		if(date && expand !== undefined && type){
+			enyoApp.ucRequest = {type: type, date: date.getTime(), expand: expand};
+			enyo.application.cacheManager.getDays ({ date:date, expand:expand, type: type });
+		}
 	},
 
 	switchViewClicked: function switchViewClicked (from, domEvent) {	// This is automatically called after switchView.
@@ -470,6 +1045,1053 @@ enyo.kind({
 			viewName = this.$.main.getViewName();
 		}
 		this.$.pane.broadcastMessage("viewSwitched", [viewName]);
+	},
+	
+	getUcDateParser: function(){
+		var cusDate, dTimeHash, formatHash;
+		cusDate = new Date();
+		dTimeHash = enyo.application.fmts.dateTimeHash;
+		formatHash = enyo.application.fmts.dateTimeFormatHash;
+		if(!(dTimeHash && formatHash)){
+			//just use default
+			cusDate.parse = Date.parse;
+			return cusDate;
+		}
+		//cusDate.prototype = Object.create(Date.prototype);
+		cusDate.CultureInfo = JSON.parse(JSON.stringify(Date.CultureInfo));
+		var defRegExp = Date.CultureInfo.regexPatterns;
+		//region formatting
+		var CI = cusDate.CultureInfo;
+		if(dTimeHash && formatHash){
+			CI.name = enyo.application.fmts.locale;
+			CI.dayNames = dTimeHash["long"].day ? dTimeHash["long"].day.slice(0) : CI.dayNames;
+			var cleanArr = [], hArr = dTimeHash["medium"].day ? dTimeHash["medium"].day.slice(0): CI.abbreviatedDayNames;
+			for(var i=0;i<hArr.length;i++){
+				cleanArr.push(hArr[i].replace(/(\.$|\s$|^\s)/g,""));
+			}
+			CI.abbreviatedDayNames = cleanArr.slice(0);
+			var cleanArr = [], hArr =  dTimeHash["short"].day ? dTimeHash["short"].day.slice(0): CI.shortestDayNames;
+			for(var i=0;i<hArr.length;i++){
+				cleanArr.push(hArr[i].replace(/(\.$|\s$|^\s)/g,""));
+			}
+			CI.shortestDayNames =cleanArr.slice(0);
+			CI.firstLetterDayNames = dTimeHash["single"].day ? dTimeHash["single"].day.slice(0):CI.firstLetterDayNames;
+			CI.monthNames = dTimeHash["long"].month ? dTimeHash["long"].month.slice(0): CI.monthNames;
+			var cleanArr = [], hArr = dTimeHash["medium"].month ? dTimeHash["medium"].month.slice(0) : CI.abbreviatedMonthNames;
+			for(var i=0;i<hArr.length;i++){
+				cleanArr.push(hArr[i].replace(/(\.$|\s$|^\s)/g,""));
+			}
+			CI.abbreviatedMonthNames = cleanArr.slice(0);
+			CI.amDesignator = dTimeHash["am"];
+			CI.pmDesignator = dTimeHash["pm"];
+			CI.firstDayOfWeek = !isNaN(formatHash["firstDayOfWeek"]) ? formatHash["firstDayOfWeek"] : CI.firstDayOfWeek;
+			CI.dateElementOrder = formatHash["dateFieldOrder"] ? formatHash["dateFieldOrder"]: CI.dateElementOrder;
+			CI.formatPatterns.shortDate = formatHash["shortDate"] ? formatHash["shortDate"]: CI.formatPatterns.shortDate;
+			if(formatHash["fullDate"]){
+				var mod = formatHash["fullDate"].replace(/E/g,"d");
+				CI.formatPatterns.longDate = mod;
+			}
+			CI.formatPatterns.shortTime = formatHash["is12HourDefault"]?formatHash["shortTime12"]&&formatHash["shortTime12"].replace("a","tt"):formatHash["shortTime24"] && formatHash["shortTime24"].replace("a","tt");
+			CI.formatPatterns.longTime = formatHash["is12HourDefault"]?formatHash["fullTime12"]&&formatHash["fullTime12"].replace("a","tt"):formatHash["fullTime24"] && formatHash["fullTime24"].replace("a","tt");
+			//CI.formatPatterns.fullDateTime = formatHash["shortDate"];
+			CI.formatPatterns.monthDay = (formatHash["longDate"].replace(/y*/g,"")).replace(/\s*$/,"");
+			CI.formatPatterns.yearMonth = (formatHash["longDate"].replace(/d*/g,"")).replace(/^\s*/,"");
+			//regex 
+			function transRegE(word, shrt, med, lng){
+				var part = false, whole;
+				if(word){
+					whole = $L(word);
+					if(whole === word){
+						return false;
+					}
+					if(shrt !== undefined && !isNaN(parseInt(shrt,10))){
+						part = whole.length > shrt ? whole.substring(0,shrt) + "("+whole.substring(shrt) +")?":whole;
+						return part;
+					} else {
+						part = whole.length > 4 ? whole.substring(0,4) + "("+whole.substring(4) +")?" : whole;
+						return part;
+					}
+				} else {
+					var doMed, doLong, cleanS, cleanM, cleanL;
+					if( !(isNaN(parseInt(shrt,10)) && !!shrt) && !(!!med && isNaN(parseInt(med,10))) && !(!!lng && isNaN(parseInt(lng,10))) ){
+						//no short, no med, no long
+						return false;
+					}
+					if(isNaN(parseInt(shrt,10)) && !!shrt) {//short
+						cleanS = (shrt.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						if(!!med && isNaN(parseInt(med,10))){//short,med
+							cleanM = (med.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+							if(!!lng && isNaN(parseInt(lng,10))){//short, med, long
+								cleanL = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+							}
+						} else if(!!lng && isNaN(parseInt(lng,10)) ){// short, no med, long
+							cleanM = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						}
+					} else if(!(isNaN(shrt) && !!shrt) && (!!med && isNaN(parseInt(med,10))) ){// no short, med
+						cleanS = (med.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						if(!!lng && isNaN(parseInt(lng,10))){// no short, med, long
+							cleanM = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						}
+					} else if(!!lng && isNaN(parseInt(lng,10)) ){// no short or med, long
+						cleanS = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+					}
+					if(!!cleanS){ //should always be a cleanS, unless the entry is "." was " "
+						if(!!cleanM && cleanS !== cleanM && cleanM.length > cleanS.length && cleanM.indexOf(cleanS) === 0){
+							doMed = cleanM.substring(cleanS.length);
+							if(!!doMed){// med ok
+								if(!!cleanL && cleanS !== cleanL && cleanL.length > cleanS.length && cleanL.indexOf(cleanS) === 0){
+									doLong = cleanL.substring(cleanS.length);
+								}
+								if(!!doLong && doLong !== doMed && doLong.length > doMed.length && doLong.indexOf(doMed) === 0){
+									doLong = doLong.substring(doMed.length);
+									if(!!doLong){//long ok
+										part = cleanS+"("+doMed+"("+doLong+")?)?";
+										
+									} else {//no long
+										part = cleanS+"("+doMed+")?";
+									}
+								} else { // no long
+									part = cleanS+"("+doMed+")?";
+								}
+							} else { // no med
+								if(!!cleanL && cleanS !== cleanL && cleanL.length > cleanS.length && cleanL.indexOf(cleanS) === 0){
+									doLong = cleanL.substring(cleanS.length);
+								}
+								if(!!doLong){//long ok
+									part = cleanS+"("+doLong+")?";
+								} else {//no long
+									part = cleanS.length > 4 ? cleanS.substring(0,4) + "("+cleanS.substring(4) +")?" : cleanS;
+								}
+							}
+							return part;
+						} else { //short, but no med ?long
+							if(!!cleanL && cleanS !== cleanL && cleanL.length > cleanS.length && cleanL.indexOf(cleanS) === 0){
+								doLong = cleanL.substring(cleanS.length);
+							}
+							if(!!doLong){//long ok
+								part = cleanS+"("+doLong+")?";
+							} else {//no long
+								part = cleanS.length > 4 ? cleanS.substring(0,4) + "("+cleanS.substring(4) +")?" : cleanS;
+							}
+						}
+					}
+					return part;
+				}
+			}
+			var regE = CI.regexPatterns = {
+					millisecond: /^(ms|milli(second)?s?)/i,
+					second: /^sec(ond)?s?/i,
+					minute: /^min(ute)?s?/i,
+					hour: /^h(ou)?rs?/i,
+					week: /^w(ee)?k/i,
+					month: /^m(o(nth)?s?)?/i,
+					day: /^d(ays?)?/i,
+					year: /^y((ea)?rs?)?/i,
+					
+					shortMeridian: /^(a|p)/i,
+					longMeridian: /^(a\.?m?\.?|p\.?m?\.?)/i,
+					timezone: /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,
+					ordinalSuffix: /^\s*(st|nd|rd|th)/i,
+					timeContext: /^\s*(\:|a|p)/i
+				};
+			regE.future = transRegE("next") ? new RegExp("^("+transRegE("next")+"|next)", "i") : /^next/i ;
+			var lastTxt = transRegE("last") ? "^("+transRegE("last") + "|last" : "^(last";
+			lastTxt += transRegE("past") ? "|"+transRegE("past") + "|past" : "|past";
+			lastTxt += transRegE("previous") ? "|"+transRegE("previous") + "|prev(ious)?)" : "|prev(ious)?)";
+			regE.past = new RegExp(lastTxt, "i");
+			
+			lastTxt = transRegE("after") ? "^(\\+|"+transRegE("after") + "|after" : "^(\\+|after";
+			lastTxt += transRegE("from") ? "|"+transRegE("from") + "|from)" : "|from)";
+			regE.add = new RegExp(lastTxt, "i");
+			
+			lastTxt = transRegE("before") ? "^(\\-|"+transRegE("before") + "|before" : "^(\\-|before";
+			lastTxt += transRegE("ago") ? "|"+transRegE("ago") + "|ago)" : "|ago)";
+			regE.subtract = new RegExp(lastTxt, "i");
+			
+			var hashTxt = dTimeHash.relative.yesterday;
+			lastTxt = transRegE(false, hashTxt) ? "^("+transRegE(false, hashTxt) + "|yesterday)" : "^yesterday";
+			regE.yesterday = new RegExp(lastTxt, "i");
+			
+			hashTxt = dTimeHash.relative.today;
+			lastTxt = transRegE(false, hashTxt) ? "^("+transRegE(false, hashTxt) + "|t(oday)?)" : "^t(oday)?";
+			regE.today = new RegExp(lastTxt, "i");
+			
+			hashTxt = dTimeHash.relative.tomorrow;
+			lastTxt = transRegE(false, hashTxt) ? "^("+transRegE(false, hashTxt) + "|tomorrow)" : "^tomorrow";
+			regE.tomorrow = new RegExp(lastTxt, "i");
+			
+			lastTxt = transRegE("now") ? "^("+transRegE("now") + "|n(ow)?)" : "^n(ow)?";
+			regE.now = new RegExp(lastTxt, "i");
+			//days
+			var i=0, dArr = {"sun": "su(n(day)?)?", "mon": "mo(n(day)?)?", "tue": "tu(e(s(day)?)?)?", "wed": "we(d(nesday)?)?", "thu": "th(u(r(s(day)?)?)?)?", "fri": "fr(i(day)?)?", "sat": "sa(t(urday)?)?"};
+			for(var prop in dArr){
+				if(prop && dArr.hasOwnProperty(prop)){
+					var sTxt = dTimeHash["short"].day[i], mTxt = dTimeHash["medium"].day[i], lTxt = dTimeHash["long"].day[i];
+					lastTxt = (transRegE(false, sTxt, mTxt, lTxt) && (transRegE(false, sTxt, mTxt, lTxt) !== dArr[prop])) ? "^("+transRegE(false, sTxt, mTxt, lTxt) + "|"+dArr[prop]+")" : "^"+dArr[prop];
+					regE[prop] = new RegExp(lastTxt, "i");
+					i++
+				}
+			}
+			//months
+			var i=0, mArr = {jan: "jan(uary)?",feb: "feb(ruary)?",mar:"mar(ch)?", apr: "apr(il)?",may: "may",jun:"jun(e)?",jul:"jul(y)?",aug:"aug(ust)?",sep:"sep(t(ember)?)?",oct:"oct(ober)?",nov:"nov(ember)?",dec:"dec(ember)?"};
+			for(var prop in mArr){
+				if(prop && mArr.hasOwnProperty(prop)){
+					var sTxt = dTimeHash["short"].month[i], mTxt = dTimeHash["medium"].month[i], lTxt = dTimeHash["long"].month[i];
+					lastTxt = (transRegE(false, sTxt, mTxt, lTxt) && (transRegE(false, sTxt, mTxt, lTxt) !== mArr[prop])) ? "^("+transRegE(false, sTxt, mTxt, lTxt) + "|"+mArr[prop]+")" : "^"+mArr[prop];
+					regE[prop] = new RegExp(lastTxt, "i");
+					i++
+				}
+			}
+		}
+		cusDate.getMonthNumberFromName = function (name) {
+		var n = Date.CultureInfo.monthNames,
+			m = Date.CultureInfo.abbreviatedMonthNames,
+			s = name.toLowerCase();
+			for (var i = 0; i < n.length; i++) {
+				if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
+					return i;
+				}
+			}
+			return -1;
+		};
+		
+		cusDate.getDayNumberFromName = function (name) {
+			var n = Date.CultureInfo.dayNames,
+				m = Date.CultureInfo.abbreviatedDayNames,
+				o = Date.CultureInfo.shortestDayNames,
+				s = name.toLowerCase();
+			for (var i = 0; i < n.length; i++) {
+				if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
+					return i;
+				}
+			}
+			return -1;
+		};
+		cusDate.getWeekOfYear = function (firstDayOfWeek) {
+			var y = this.getFullYear(),
+				m = this.getMonth(),
+				d = this.getDate();
+			var dow = firstDayOfWeek || cusDate.CultureInfo.firstDayOfWeek;
+			var offset = 7 + 1 - new Date(y, 0, 1).getDay();
+			if (offset == 8) {
+				offset = 1;
+			}
+			var daynum = ((Date.UTC(y, m, d, 0, 0, 0) - Date.UTC(y, 0, 1, 0, 0, 0)) / 86400000) + 1;
+			var w = Math.floor((daynum - offset + 7) / 7);
+			if (w === dow) {
+				y--;
+				var prevOffset = 7 + 1 - new Date(y, 0, 1).getDay();
+				if (prevOffset == 2 || prevOffset == 8) {
+					w = 53;
+				} else {
+					w = 52;
+				}
+			}
+			return w;
+		};
+		cusDate.getDayName = function (abbrev) {
+			return abbrev ? cusDate.CultureInfo.abbreviatedDayNames[cusDate.getDay()] : cusDate.CultureInfo.dayNames[cusDate.getDay()];
+		};
+		cusDate.getMonthName = function (abbrev) {
+			return abbrev ? cusDate.CultureInfo.abbreviatedMonthNames[cusDate.getMonth()] : cusDate.CultureInfo.monthNames[cusDate.getMonth()];
+		};
+		cusDate._toString = Date.toString;
+		cusDate.toString = function (format) {
+			var self = cusDate;
+			var p = function p(s) {
+				return (s.toString().length == 1) ? "0" + s : s;
+			};
+			return format ? format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g, function (format) {
+				switch (format) {
+					case "hh":
+						return p(self.getHours() < 13 ? self.getHours() : (self.getHours() - 12));
+					case "h":
+						return self.getHours() < 13 ? self.getHours() : (self.getHours() - 12);
+					case "HH":
+						return p(self.getHours());
+					case "H":
+						return self.getHours();
+					case "mm":
+						return p(self.getMinutes());
+					case "m":
+						return self.getMinutes();
+					case "ss":
+						return p(self.getSeconds());
+					case "s":
+						return self.getSeconds();
+					case "yyyy":
+						return self.getFullYear();
+					case "yy":
+						return self.getFullYear().toString().substring(2, 4);
+					case "dddd":
+						return self.getDayName();
+					case "ddd":
+						return self.getDayName(true);
+					case "dd":
+						return p(self.getDate());
+					case "d":
+						return self.getDate().toString();
+					case "MMMM":
+						return self.getMonthName();
+					case "MMM":
+						return self.getMonthName(true);
+					case "MM":
+						return p((self.getMonth() + 1));
+					case "M":
+						return self.getMonth() + 1;
+					case "t":
+						return self.getHours() < 12 ? cusDate.CultureInfo.amDesignator.substring(0, 1) : cusDate.CultureInfo.pmDesignator.substring(0, 1);
+					case "tt":
+						return self.getHours() < 12 ? cusDate.CultureInfo.amDesignator : cusDate.CultureInfo.pmDesignator;
+					case "zzz":
+					case "zz":
+					case "z":
+						return "";
+				}
+			}) : cusDate._toString();
+		};
+		cusDate.isLeapYear = function (year) {
+			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
+		};
+		cusDate.getDaysInMonth = function (year, month) {
+			return [31, (cusDate.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
+		};
+		cusDate.getTimezoneOffset = function (s, dst) {
+			return (dst || false) ? cusDate.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()] : cusDate.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];
+		};
+		cusDate.getTimezoneAbbreviation = function (offset, dst) {
+			var n = (dst || false) ? cusDate.CultureInfo.abbreviatedTimeZoneDST : cusDate.CultureInfo.abbreviatedTimeZoneStandard,
+				p;
+			for (p in n) {
+				if (n[p] === offset) {
+					return p;
+				}
+			}
+			return null;
+		};
+		cusDate._validate = function (value, min, max, name) {
+			if (typeof value != "number") {
+				throw new TypeError(value + " is not a Number.");
+			} else if (value < min || value > max) {
+				throw new RangeError(value + " is not a valid value for " + name + ".");
+			}
+			return true;
+		};
+		cusDate.validateMillisecond = function (n) {
+			return cusDate._validate(n, 0, 999, "milliseconds");
+		};
+		cusDate.validateSecond = function (n) {
+			return cusDate._validate(n, 0, 59, "seconds");
+		};
+		cusDate.validateMinute = function (n) {
+			return cusDate._validate(n, 0, 59, "minutes");
+		};
+		cusDate.validateHour = function (n) {
+			return cusDate._validate(n, 0, 23, "hours");
+		};
+		cusDate.validateDay = function (n, year, month) {
+			return cusDate._validate(n, 1, cusDate.getDaysInMonth(year, month), "days");
+		};
+		cusDate.validateMonth = function (n) {
+			return cusDate._validate(n, 0, 11, "months");
+		};
+		cusDate.validateYear = function (n) {
+			return cusDate._validate(n, 1, 9999, "seconds");
+		};
+		cusDate.now2 = function () {
+			return new Date();
+		};
+		cusDate.today = function () {
+			return cusDate.now2().clearTime();
+		};
+		
+		cusDate.Parsing = {
+				Exception: function (s) {
+					this.message = "Parse error at '" + s.substring(0, 10) + " ...'";
+				}
+		};
+		//(function () {
+			
+			var $P = cusDate.Parsing;
+			var _ = cusDate.Parsing.Operators = {
+				rtoken: function (r) {
+					return function (s) {
+						//console.error("_.rtoken " + r + ", s: "+s);
+						var mx = s.match(r);
+						if (mx) {
+							return ([mx[0], s.substring(mx[0].length)]);
+						} else {
+							throw new $P.Exception(s);
+						}
+					};
+				},
+				token: function (s) {
+					return function (s) {
+						return _.rtoken(new RegExp("^\s*" + s + "\s*"))(s);
+					};
+				},
+				stoken: function (s) {
+					return _.rtoken(new RegExp("^" + s));
+				},
+				until: function (p) {
+					return function (s) {
+						var qx = [],
+							rx = null;
+						while (s.length) {
+							try {
+								rx = p.call(this, s);
+							} catch (e) {
+								qx.push(rx[0]);
+								s = rx[1];
+								continue;
+							}
+							break;
+						}
+						return [qx, s];
+					};
+				},
+				many: function (p) {
+					return function (s) {
+						var rx = [],
+							r = null;
+						while (s.length) {
+							try {
+								r = p.call(this, s);
+							} catch (e) {
+								return [rx, s];
+							}
+							rx.push(r[0]);
+							s = r[1];
+						}
+						return [rx, s];
+					};
+				},
+				optional: function (p) {
+					return function (s) {
+						var r = null;
+						try {
+							r = p.call(this, s);
+						} catch (e) {
+							return [null, s];
+						}
+						return [r[0], r[1]];
+					};
+				},
+				not: function (p) {
+					return function (s) {
+						try {
+							p.call(this, s);
+						} catch (e) {
+							return [null, s];
+						}
+						throw new $P.Exception(s);
+					};
+				},
+				ignore: function (p) {
+					return p ? function (s) {
+						var r = null;
+						r = p.call(this, s);
+						return [null, r[1]];
+					} : null;
+				},
+				product: function () {
+					var px = arguments[0],
+						qx = Array.prototype.slice.call(arguments, 1),
+						rx = [];
+					for (var i = 0; i < px.length; i++) {
+						rx.push(_.each(px[i], qx));
+					}
+					return rx;
+				},
+				cache: function (rule) {
+					var cache = {}, r = null;
+					return function (s) {
+						try {
+							r = cache[s] = (cache[s] || rule.call(this, s));
+						} catch (e) {
+							r = cache[s] = e;
+						}
+						if (r instanceof $P.Exception) {
+							throw r;
+						} else {
+							return r;
+						}
+					};
+				},
+				any: function () {
+					var px = arguments;
+					return function (s) {
+						var r = null;
+						for (var i = 0; i < px.length; i++) {
+							if (px[i] == null) {
+								continue;
+							}
+							try {
+								r = (px[i].call(this, s));
+							} catch (e) {
+								r = null;
+							}
+							if (r) {
+								return r;
+							}
+						}
+						throw new $P.Exception(s);
+					};
+				},
+				each: function () {
+					var px = arguments;
+					return function (s) {
+						var rx = [],
+							r = null;
+						for (var i = 0; i < px.length; i++) {
+							if (px[i] == null) {
+								continue;
+							}
+							try {
+								r = (px[i].call(this, s));
+							} catch (e) {
+								throw new $P.Exception(s);
+							}
+							rx.push(r[0]);
+							s = r[1];
+						}
+						return [rx, s];
+					};
+				},
+				all: function () {
+					var px = arguments,
+						_ = _;
+					return _.each(_.optional(px));
+				},
+				sequence: function (px, d, c) {
+					d = d || _.rtoken(/^\s*/);
+					c = c || null;
+					if (px.length == 1) {
+						return px[0];
+					}
+					return function (s) {
+						var r = null,
+							q = null;
+						var rx = [];
+						for (var i = 0; i < px.length; i++) {
+							try {
+								r = px[i].call(this, s);
+							} catch (e) {
+								break;
+							}
+							rx.push(r[0]);
+							try {
+								q = d.call(this, r[1]);
+							} catch (ex) {
+								q = null;
+								break;
+							}
+							s = q[1];
+						}
+						if (!r) {
+							throw new $P.Exception(s);
+						}
+						if (q) {
+							throw new $P.Exception(q[1]);
+						}
+						if (c) {
+							try {
+								r = c.call(this, r[1]);
+							} catch (ey) {
+								throw new $P.Exception(r[1]);
+							}
+						}
+						return [rx, (r ? r[1] : s)];
+					};
+				},
+				between: function (d1, p, d2) {
+					d2 = d2 || d1;
+					var _fn = _.each(_.ignore(d1), p, _.ignore(d2));
+					return function (s) {
+						var rx = _fn.call(this, s);
+						return [[rx[0][0], r[0][2]], rx[1]];
+					};
+				},
+				list: function (p, d, c) {
+					d = d || _.rtoken(/^\s*/);
+					c = c || null;
+					return (p instanceof Array ? _.each(_.product(p.slice(0, - 1), _.ignore(d)), p.slice(-1), _.ignore(c)) : _.each(_.many(_.each(p, _.ignore(d))), px, _.ignore(c)));
+				},
+				set: function (px, d, c) {
+					d = d || _.rtoken(/^\s*/);
+					c = c || null;
+					return function (s) {
+						var r = null,
+							p = null,
+							q = null,
+							rx = null,
+							best = [
+								[], s],
+							last = false;
+						for (var i = 0; i < px.length; i++) {
+							q = null;
+							p = null;
+							r = null;
+							last = (px.length == 1);
+							try {
+								r = px[i].call(this, s);
+							} catch (e) {
+								continue;
+							}
+							rx = [
+								[r[0]], r[1]
+							];
+							if (r[1].length > 0 && !last) {
+								try {
+									q = d.call(this, r[1]);
+								} catch (ex) {
+									last = true;
+								}
+							} else {
+								last = true;
+							}
+							if (!last && q[1].length === 0) {
+								last = true;
+							}
+							if (!last) {
+								var qx = [];
+								for (var j = 0; j < px.length; j++) {
+									if (i != j) {
+										qx.push(px[j]);
+									}
+								}
+								p = _.set(qx, d).call(this, q[1]);
+								if (p[0].length > 0) {
+									rx[0] = rx[0].concat(p[0]);
+									rx[1] = p[1];
+								}
+							}
+							if (rx[1].length < best[1].length) {
+								best = rx;
+							}
+							if (best[1].length === 0) {
+								break;
+							}
+						}
+						if (best[0].length === 0) {
+							return best;
+						}
+						if (c) {
+							try {
+								q = c.call(this, best[1]);
+							} catch (ey) {
+								throw new $P.Exception(best[1]);
+							}
+							best[1] = q[1];
+						}
+						return best;
+					};
+				},
+				forward: function (gr, fname) {
+					return function (s) {
+						return gr[fname].call(this, s);
+					};
+				},
+				replace: function (rule, repl) {
+					return function (s) {
+						var r = rule.call(this, s);
+						return [repl, r[1]];
+					};
+				},
+				process: function (rule, fn) {
+					return function (s) {
+						var r = rule.call(this, s);
+						//console.error(".process " +r+ ", s: "+s);
+						return [fn.call(this, r[0]), r[1]];
+					};
+				},
+				min: function (min, rule) {
+					return function (s) {
+						var rx = rule.call(this, s);
+						if (rx[0].length < min) {
+							throw new $P.Exception(s);
+						}
+						return rx;
+					};
+				}
+			};
+			var _generator = function (op) {
+				return function () {
+					var args = null,
+						rx = [];
+					if (arguments.length > 1) {
+						args = Array.prototype.slice.call(arguments);
+					} else if (arguments[0] instanceof Array) {
+						args = arguments[0];
+					}
+					if (args) {
+						for (var i = 0, px = args.shift(); i < px.length; i++) {
+							args.unshift(px[i]);
+							rx.push(op.apply(null, args));
+							args.shift();
+							return rx;
+						}
+					} else {
+						return op.apply(null, arguments);
+					}
+				};
+			};
+			var gx = "optional not ignore cache".split(/\s/);
+			for (var i = 0; i < gx.length; i++) {
+				_[gx[i]] = _generator(_[gx[i]]);
+			}
+			var _vector = function (op) {
+				return function () {
+					if (arguments[0] instanceof Array) {
+						return op.apply(null, arguments[0]);
+					} else {
+						return op.apply(null, arguments);
+					}
+				};
+			};
+			var vx = "each any all".split(/\s/);
+			for (var j = 0; j < vx.length; j++) {
+				_[vx[j]] = _vector(_[vx[j]]);
+			}
+		//}());
+		//(function () {
+			var flattenAndCompact = function (ax) {
+				var rx = [];
+				for (var i = 0; i < ax.length; i++) {
+					if (ax[i] instanceof Array) {
+						rx = rx.concat(flattenAndCompact(ax[i]));
+					} else {
+						if (ax[i]) {
+							rx.push(ax[i]);
+						}
+					}
+				}
+				return rx;
+			};
+			cusDate.Grammar = {};
+			cusDate.Translator = {
+				hour: function (s) {
+					return function () {
+						this.hour = Number(s);
+					};
+				},
+				minute: function (s) {
+					return function () {
+						this.minute = Number(s);
+					};
+				},
+				second: function (s) {
+					return function () {
+						this.second = Number(s);
+					};
+				},
+				meridian: function (s) {
+					return function () {
+						this.meridian = s.slice(0, 1).toLowerCase();
+					};
+				},
+				timezone: function (s) {
+					return function () {
+						var n = s.replace(/[^\d\+\-]/g, "");
+						if (n.length) {
+							this.timezoneOffset = Number(n);
+						} else {
+							this.timezone = s.toLowerCase();
+						}
+					};
+				},
+				day: function (x) {
+					var s = x[0];
+					return function () {
+						this.day = Number(s.match(/\d+/)[0]);
+					};
+				},
+				month: function (s) {
+					return function () {
+						this.month = ((s.length == 3) ? cusDate.getMonthNumberFromName(s) : (Number(s) - 1));
+					};
+				},
+				year: function (s) {
+					return function () {
+						var n = Number(s);
+						this.year = ((s.length > 2) ? n : (n + (((n + 2000) < cusDate.CultureInfo.twoDigitYearMax) ? 2000 : 1900)));
+					};
+				},
+				rday: function (s) {
+					return function () {
+						switch (s) {
+							case "yesterday":
+								this.days = -1;
+								break;
+							case "tomorrow":
+								this.days = 1;
+								break;
+							case "today":
+								this.days = 0;
+								break;
+							case "now":
+								this.days = 0;
+								this.now = true;
+								break;
+						}
+					};
+				},
+				finishExact: function (x) {
+					x = (x instanceof Array) ? x : [x];
+					var now = new Date();
+					this.year = now.getFullYear();
+					this.month = now.getMonth();
+					this.day = 1;
+					this.hour = 0;
+					this.minute = 0;
+					this.second = 0;
+					for (var i = 0; i < x.length; i++) {
+						if (x[i]) {
+							x[i].call(this);
+						}
+					}
+					this.hour = (this.meridian == "p" && this.hour < 13) ? this.hour + 12 : this.hour;
+					if (this.day > cusDate.getDaysInMonth(this.year, this.month)) {
+						throw new RangeError(this.day + " is not a valid value for days.");
+					}
+					var r = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second);
+					if (this.timezone) {
+						r.set({
+							timezone: this.timezone
+						});
+					} else if (this.timezoneOffset) {
+						r.set({
+							timezoneOffset: this.timezoneOffset
+						});
+					}
+					return r;
+				},
+				finish: function (x) {
+					x = (x instanceof Array) ? flattenAndCompact(x) : [x];
+					if (x.length === 0) {
+						return null;
+					}
+					for (var i = 0; i < x.length; i++) {
+						if (typeof x[i] == "function") {
+							x[i].call(this);
+						}
+					}
+					if (this.now) {
+						return new Date();
+					}
+					var today = Date.today();
+					var method = null;
+					var expression = !! (this.days != null || this.orient || this.operator);
+					if (expression) {
+						var gap, mod, orient;
+						orient = ((this.orient == "past" || this.operator == "subtract") ? -1 : 1);
+						if (this.weekday) {
+							this.unit = "day";
+							gap = (cusDate.getDayNumberFromName(this.weekday) - today.getDay());
+							mod = 7;
+							this.days = gap ? ((gap + (orient * mod)) % mod) : (orient * mod);
+						}
+						if (this.month) {
+							this.unit = "month";
+							gap = (this.month - today.getMonth());
+							mod = 12;
+							this.months = gap ? ((gap + (orient * mod)) % mod) : (orient * mod);
+							this.month = null;
+						}
+						if (!this.unit) {
+							this.unit = "day";
+						}
+						if (this[this.unit + "s"] == null || this.operator != null) {
+							if (!this.value) {
+								this.value = 1;
+							}
+							if (this.unit == "week") {
+								this.unit = "day";
+								this.value = this.value * 7;
+							}
+							this[this.unit + "s"] = this.value * orient;
+						}
+						return today.add(this);
+					} else {
+						if (this.meridian && this.hour) {
+							this.hour = (this.hour < 13 && this.meridian == "p") ? this.hour + 12 : this.hour;
+						}
+						if (this.weekday && !this.day) {
+							//console.error("finish :::: " + cusDate.getDayNumberFromName(this.weekday));
+							this.day = (today.addDays((cusDate.getDayNumberFromName(this.weekday) - today.getDay()))).getDate();
+						}
+						if (this.month && !this.day) {
+							this.day = 1;
+						}
+						return today.set(this);
+					}
+				}
+			};
+			//var _ = cusDate.Parsing.Operators,
+			var	g = cusDate.Grammar,
+				t = cusDate.Translator,
+				_fn;
+			g.datePartDelimiter = _.rtoken(/^([\s\-\.\,\/\x27]+)/);
+			g.timePartDelimiter = _.stoken(":");
+			g.whiteSpace = _.rtoken(/^\s*/);
+			g.generalDelimiter = _.rtoken(/^(([\s\,]|at|on)+)/);
+			var _C = {};
+			g.ctoken = function (keys) {
+				var fn = _C[keys];
+				if (!fn) {
+					var c = cusDate.CultureInfo.regexPatterns;
+					var kx = keys.split(/\s+/),
+						px = [];
+					for (var i = 0; i < kx.length; i++) {
+						px.push(_.replace(_.rtoken(c[kx[i]]), kx[i]));
+					}
+					fn = _C[keys] = _.any.apply(null, px);
+				}
+				return fn;
+			};
+			g.ctoken2 = function (key) {
+				return _.rtoken(cusDate.CultureInfo.regexPatterns[key]);
+			};
+			g.h = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/), t.hour));
+			g.hh = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/), t.hour));
+			g.H = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/), t.hour));
+			g.HH = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/), t.hour));
+			g.m = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.minute));
+			g.mm = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.minute));
+			g.s = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.second));
+			g.ss = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.second));
+			g.hms = _.cache(_.sequence([g.H, g.mm, g.ss], g.timePartDelimiter));
+			g.t = _.cache(_.process(g.ctoken2("shortMeridian"), t.meridian));
+			g.tt = _.cache(_.process(g.ctoken2("longMeridian"), t.meridian));
+			g.z = _.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/), t.timezone));
+			g.zz = _.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/), t.timezone));
+			g.zzz = _.cache(_.process(g.ctoken2("timezone"), t.timezone));
+			g.timeSuffix = _.each(_.ignore(g.whiteSpace), _.set([g.tt, g.zzz]));
+			g.time = _.each(_.optional(_.ignore(_.stoken("T"))), g.hms, g.timeSuffix);
+			g.d = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/), _.optional(g.ctoken2("ordinalSuffix"))), t.day));
+			g.dd = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/), _.optional(g.ctoken2("ordinalSuffix"))), t.day));
+			g.ddd = g.dddd = _.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"), function (s) {
+				return function () {
+					//console.error("g.ddd weekday: " +s);
+					this.weekday = s;
+				};
+			}));
+			g.M = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/), t.month));
+			g.MM = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/), t.month));
+			g.MMM = g.MMMM = _.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"), t.month));
+			g.y = _.cache(_.process(_.rtoken(/^(\d\d?)/), t.year));
+			g.yy = _.cache(_.process(_.rtoken(/^(\d\d)/), t.year));
+			g.yyy = _.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/), t.year));
+			g.yyyy = _.cache(_.process(_.rtoken(/^(\d\d\d\d)/), t.year));
+			_fn = function () {
+				return _.each(_.any.apply(null, arguments), _.not(g.ctoken2("timeContext")));
+			};
+			g.day = _fn(g.d, g.dd);
+			g.month = _fn(g.M, g.MMM);
+			g.year = _fn(g.yyyy, g.yy);
+			g.orientation = _.process(g.ctoken("past future"), function (s) {
+				return function () {
+					this.orient = s;
+				};
+			});
+			g.operator = _.process(g.ctoken("add subtract"), function (s) {
+				return function () {
+					this.operator = s;
+				};
+			});
+			g.rday = _.process(g.ctoken("yesterday tomorrow today now"), t.rday);
+			g.unit = _.process(g.ctoken("minute hour day week month year"), function (s) {
+				return function () {
+					this.unit = s;
+				};
+			});
+			g.value = _.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/), function (s) {
+				return function () {
+					this.value = s.replace(/\D/g, "");
+				};
+			});
+			g.expression = _.set([g.rday, g.operator, g.value, g.unit, g.orientation, g.ddd, g.MMM]);
+			_fn = function () {
+				return _.set(arguments, g.datePartDelimiter);
+			};
+			g.mdy = _fn(g.ddd, g.month, g.day, g.year);
+			g.ymd = _fn(g.ddd, g.year, g.month, g.day);
+			g.dmy = _fn(g.ddd, g.day, g.month, g.year);
+			g.date = function (s) {
+				return ((g[cusDate.CultureInfo.dateElementOrder] || g.mdy).call(this, s));
+			};
+			g.format = _.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/), function (fmt) {
+				if (g[fmt]) {
+					return g[fmt];
+				} else {
+					throw cusDate.Parsing.Exception(fmt);
+				}
+			}), _.process(_.rtoken(/^[^dMyhHmstz]+/), function (s) {
+				return _.ignore(_.stoken(s));
+			}))), function (rules) {
+				return _.process(_.each.apply(null, rules), t.finishExact);
+			});
+			var _F = {};
+			var _get = function (f) {
+				return _F[f] = (_F[f] || g.format(f)[0]);
+			};
+			g.formats = function (fx) {
+				if (fx instanceof Array) {
+					var rx = [];
+					//console.error("g.formats " + JSON.stringify(fx));
+					for (var i = 0; i < fx.length; i++) {
+						rx.push(_get(fx[i]));
+					}
+					return _.any.apply(null, rx);
+				} else {
+					//console.error("g.formats " + JSON.stringify(fx));
+					return _get(fx);
+				}
+			};
+			g._formats = g.formats(["yyyy-MM-ddTHH:mm:ss", "ddd, MMM dd, yyyy H:mm:ss tt", "ddd MMM d yyyy HH:mm:ss zzz", "d"]);
+			g._start = _.process(_.set([g.date, g.time, g.expression], g.generalDelimiter, g.whiteSpace), t.finish);
+			g.start = function (s) {
+				try {
+					var r = g._formats.call({}, s);
+					//console.error("cusDate.start " + JSON.stringify(s));
+					if (r[1].length === 0) {
+						return r;
+					}
+				} catch (e) {/* console.error("cusDate.start " + JSON.stringify(e)); */}
+				return g._start.call({}, s);
+			};
+		//}());
+		cusDate._parse = cusDate.parse;
+		cusDate.parse = function (s) {
+			var r = null;
+			if (!s) {
+				return null;
+			}
+			try {
+				r = cusDate.Grammar.start.call({}, s);
+			} catch (e) {
+				console.error("cusDate.parse " + JSON.stringify(e)); 
+				return null;
+			}
+			return ((r[1].length === 0) ? r[0] : null);
+		};
+		cusDate.getParseFunction = function (fx) {
+			var fn = cusDate.Grammar.formats(fx);
+			return function (s) {
+				var r = null;
+				try {
+					r = fn.call({}, s);
+				} catch (e) {
+					return null;
+				}
+				return ((r[1].length === 0) ? r[0] : null);
+			};
+		};
+		cusDate.parseExact = function (s, fx) {
+			return cusDate.getParseFunction(fx)(s);
+		};
+		
+		return cusDate;
 	}
 
 });//END:calendar.AppView
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/MiniMonth.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/MiniMonth.js
new file mode 100644
index 0000000..de8c10e
--- /dev/null
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/MiniMonth.js
@@ -0,0 +1,454 @@
+enyo.kind({
+	name: "calendar.uc.MiniMonth", 
+	kind: enyo.Control,
+    nodeTag: "canvas",
+    domAttributes: { 
+    	width:"240px", 
+    	height:"240px", 
+    	style: "border: 2px solid #000; background-color:#fff;"
+	},
+	
+	events:{
+		onMiniMonDateTap: ""
+	},
+	
+	published:
+	{	currentDate: null // for tracking current displayed day
+	,	days: null // for tracking current displayed day
+	,	linked: false // for following currentDate
+	,	uberMode: 2 // operational mode for calendar 0-move, 1-copy, 2-info
+	,	prevDate: ""
+	,	prefs: null	// watching start of week
+	,	viewDay: null // day used in EditView
+	,	followViewDay: false //set to true to follow days and redraw used in editView
+	},
+	
+	constructor: function MiniMonth () {
+		//this.followCD = this.getLinked();
+		this.inherited (arguments);
+		this.useISOweekNum = true;
+		this.startOfWeek = 1; // 1 = Sunday, this is to set first day for week numbering
+		this.prefStartDoW = 0; //0 = Sunday
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.RM = {};
+		this.RM.month = "";
+		this.RM.year = "";
+		this.RM.fstDayLidx = 1;
+		this.RM.fstDayTidx = 1;
+		this.RM.maxdays = 1;
+		this.CDchanging = false;
+	},
+	
+	create: function create(){
+		this.inherited (arguments);
+		this.startOfWeek = enyo.application.prefsManager.prefs.startOfWeek;
+		this.prefStartDoW = this.startOfWeek -1;
+		this.useISOweekNum = enyo.application.prefsManager.prefs.useISOWeekNumber;
+		this.weekNumOffset = enyo.application.prefsManager.prefs.weekNumberOffset;
+		this.weekModulusNum = enyo.application.prefsManager.prefs.weekModulusNum;
+		this.viewDay = this.viewDay ? new Date(this.viewDay) : new Date(+enyo.application.currentDate);
+		this.watching = this.followMe && this.followMe.length;
+		this.miniWatches = {};
+		for(var i=0; i<this.watching; i++){
+			this.miniWatches[this.followMe[i]] = this; 
+		}
+		if(this.watching) {
+			enyo.application.watch(this.miniWatches);
+		}
+		//enyo.application.watch({currentDate: this, days: this});
+		this.followCD = this.linked;
+		this.followViewDay = !!this.followViewDay;
+	},
+	
+	destroy: function destroy(){
+		//enyo.application.ignore({currentDate: this, date: this});
+		if(this.watching) {
+			enyo.application.ignore(this.miniWatches);
+		}
+		this.inherited(arguments);
+	},
+	
+	rdayNames: function() {
+		var stday = 0;
+		this._rdNames = [];
+		if(isNaN(this.startOfWeek) || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		var fmt = new enyo.g11n.DateFmt({date:"E"});
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = fmt.format(tday);
+			tday.addDays(1);
+		}
+	},
+	
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	isLeapYear: function(year) {
+		if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) {
+			return true;
+		}
+		return false;
+	},
+	
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year) {
+		// date object
+		this.RM.month = month;
+		this.RM.year = year;
+		var rmon = new Date(year, month, 1);
+		var rwk = new Date(Date.UTC(year, month, 1));
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rwkNum, maxwkn, rd1dayOfMon = rmon.getDay();
+		if(this.useISOweekNum === true){
+			rwkNum = rwk.getISO8601Week();
+			maxwkn = new Date(Date.UTC((month != 0 ? year : year -1), 11, 28)).getISO8601Week();
+		} else {
+				var tempDate = (rd1dayOfMon !== this.prefStartDoW) ? new Date(rwk.getTime()).moveToDayOfWeek(this.prefStartDoW, -1) : new Date(+rwk);
+				rwkNum = tempDate.getWeekOfYear(this.prefStartDoW);
+				tempDate.setTime(Date.UTC((month != 0 ? year : year -1), 11, 31));
+				tempDate.getDay() !== this.prefStartDoW && tempDate.moveToDayOfWeek(this.prefStartDoW, -1);
+				maxwkn = tempDate.getWeekOfYear(this.prefStartDoW);
+				rwkNum = rwkNum === 0 ? 1 : rwkNum;
+		}
+		//var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		//var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(this.isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM.maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx.strokeStyle = "black";
+		this.mthctx.lineWidth =1;
+		this.mthctx.fillStyle = "rgb(0, 0, 0)";
+		this.mthctx.font = "bold 14px Prelude";
+		this.mthctx.textAlign = "left";
+		this.mthctx.textBaseline = "top";
+		var top = 7;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 52 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM.fstDayLidx = r1offset;
+		this.RM.fstDayTidx = 1;
+		// setup title and week header
+		var fmtTitle = new enyo.g11n.DateFmt({date: "long", dateComponents: "my"})
+		var titleTxt = fmtTitle.format(rmon);
+		this.mthctx.strokeText(titleTxt, left + 75, top);
+		this.mthctx.textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 8;//13 is for font &txt to ctr
+			top = 32;
+			this.mthctx.strokeText(txt, left, top);	
+		}
+		this.mthctx.fillStyle = "rgb(104, 104, 104)";
+		this.mthctx.font = "12px Prelude";
+		this.mthctx.textAlign = "left";
+		this.mthctx.textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx.strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx.fillStyle = "rgb(0, 0, 0)";
+		this.mthctx.font = "bold 12px Prelude";
+		this.mthctx.textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM.maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 8;
+				this.mthctx.strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM.maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	mousedownHandler: function(inSender, inEvent) {
+		this.startX = inEvent.offsetX;
+		this.startY = inEvent.offsetY;
+	},
+	
+	mouseupHandler: function(inSender, inEvent) {
+		this.endX = inEvent.offsetX;
+		this.endY = inEvent.offsetY;
+		this.nextMonth = this.startMonth;
+		this.nextYear = this.startYear;
+		if((this.endX - this.startX) < -40 ) {
+			this.nextMonth = this.startMonth +1 > 11 ? 0 : this.startMonth + 1;
+			this.nextYear = this.startMonth +1 > 11 ? this.startYear +1 : this.startYear;
+			this.goX = true;
+		} else if((this.endX - this.startX) > 40) {
+			this.nextMonth = this.startMonth -1 < 0 ? 11 : this.startMonth - 1;
+			this.nextYear = this.startMonth -1 < 0 ? this.startYear -1 : this.startYear;
+			this.goX = true;
+		} else {
+			this.goX = false;
+		}
+		if((this.endY - this.startY) < -40 ) {
+			this.nextYear = this.startYear +1;
+			this.goY=true;
+		} else if((this.endY - this.startY) > 40) {
+			this.nextYear = this.startYear -1 ;
+			this.goY=true;
+		} else {
+			this.goY=false;
+		}
+		if(this.goX || this.goY){
+			this.mthctx.clearRect(0, 0, 240,240);
+			this.canvasRM(this.nextMonth, this.nextYear);
+			this.startYear = this.nextYear;
+			this.startMonth = this.nextMonth;
+			this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+			//this.markDay(new Date(), null/*img*/, "event"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+			(this.followCD || this.followViewDay) && this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		} else if(this.startX && this.startY){ // tap to jump, copy
+			if(this.startX <= 30 || this.startY <= 50 || this.startX>= 235) {
+				return;
+			}
+			var calx = this.startX - this.colHW +4;
+			var caly = this.startY - 50;
+			var cald1idx = this.RM.fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM.maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				return;
+			}
+			var calmon = this.RM.month;
+			var calyear = this.RM.year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				var tappedDate = new Date(calyear, calmon, caldate, 0, 0, 0, 0);
+				this.doMiniMonDateTap(new Date(tappedDate));
+				//console.log("tapped date:  " + tappedDate);
+			}
+		}
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		if(whatMn !== this.RM.month || whatYr !== this.RM.year) { return; }
+		var fstDayLidx = this.RM.fstDayLidx;
+		var fstDayTidx = this.RM.fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 50;
+		var ileft = (col * this.colHW) + this.colHW -6;
+		itop = (ry != undefined) ? itop + ry : itop;
+		ileft = (rx != undefined) ? ileft + rx : ileft;
+		if (rmimgsrc != undefined) {
+			this.mthctx.drawImage(rmimgsrc, ileft, itop, (rwt != undefined)? rwt : this.colHW,(rht != undefined)? rht : this.colHW);
+		} else if(color != undefined && color === "today") {
+			this.mthctx.strokeStyle = "blue";
+			this.mthctx.lineWidth = 2;
+			this.mthctx.strokeRect(ileft, itop, this.colHW, this.colHW);
+		} else if(color != undefined && color === "event") {
+			this.mthctx.strokeStyle = "green";
+			this.mthctx.lineWidth = 2;
+			this.mthctx.strokeRect(ileft+1, itop+1, this.colHW-5, this.colHW-5);
+		} else if(color != undefined && color === "repeat") {
+			this.mthctx.strokeStyle = "yellow";
+			this.mthctx.lineWidth = 2;
+			this.mthctx.strokeRect(ileft+6, itop+6, this.colHW-12, this.colHW-12);
+		} else if(color != undefined) {
+			this.mthctx.fillStyle = color;
+			this.mthctx.fillRect(ileft, itop, this.colHW, this.colHW);
+		} else {
+			this.mthctx.fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx.fillRect(ileft, itop, this.colHW, this.colHW);
+		}
+	},
+	
+	// After the canvas is rendered
+	rendered: function() {
+		// Fill in the canvas node property
+		this.hasNode();
+		this.startMonth = this.viewDay.getMonth();
+		this.startYear = this.viewDay.getFullYear();
+		this.rdayNames();
+		var can = this.node;
+		var c = can.getContext('2d');
+		this.mthctx = can.getContext('2d');
+		this.canvasRM(this.startMonth, this.startYear);
+		this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		(this.followCD || this.followViewDay) && this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		this.inherited(arguments);
+	},
+	
+	currentDateChanged: function currentDateChanged (oldDate) {
+		if(!this.prevDate){this.prevDate = oldDate ? oldDate : new Date(); this.prevDate.clearTime();};
+		if(oldDate && +oldDate !== +this.prevDate) {this.prevDate = new Date(+oldDate)};
+		//console.log("previous date:  " + this.prevDate);
+		if(!this.viewDay || (+this.viewDay != +enyo.application.currentDate)){
+			this.viewDay = new Date(+enyo.application.currentDate);
+			this.CDchanging = true;
+			if(this.followCD){
+				//console.log("new date:  " + this.viewDay);
+				this.mthctx.clearRect(0, 0, 240,240);
+				this.canvasRM(this.viewDay.getMonth(), this.viewDay.getFullYear());
+				this.startMonth = this.viewDay.getMonth();
+				this.startYear = this.viewDay.getFullYear();
+				this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+				//this.markDay(new Date(), null/*img*/, "event"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+				this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+			}
+		}
+	},
+	
+	daysChanged: function dateChanged () {
+		if(this.days && this.days[0] && this.days[0].date){
+			if(this.days.length > 7){ // compensate for month view behavior
+				var newDay = this.days[1].date;
+			} else{
+				var newDay = this.days[0].date;
+			}
+		}
+		if(newDay && (+this.viewDay != newDay)){
+			this.prevDate.setTime(+this.viewDay);
+			this.viewDay.setTime(+newDay);
+			if(this.followCD){
+				//console.log("new date:  " + this.viewDay + "  ; days length:" +this.days.length);
+				this.mthctx.clearRect(0, 0, 240,240);
+				this.canvasRM(this.viewDay.getMonth(), this.viewDay.getFullYear());
+				this.startMonth = this.viewDay.getMonth();
+				this.startYear = this.viewDay.getFullYear();
+				this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+				//this.markDay(new Date(), null/*img*/, "event"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+				this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+			}
+		}
+	},
+	
+	viewDayChanged: function viewDayChanged () {
+		if(!this.followViewDay){
+			return;
+		}
+		if(this.viewDay && this.hasNode()){
+			//console.log("viewDay changed:  " + this.viewDay);
+			this.mthctx.clearRect(0, 0, 240,240);
+			this.canvasRM(this.viewDay.getMonth(), this.viewDay.getFullYear());
+			this.startMonth = this.viewDay.getMonth();
+			this.startYear = this.viewDay.getFullYear();
+			this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+			//this.markDay(new Date(), null/*img*/, "event"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+			this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		}
+	},
+	
+	uberModeChanged: function uberModeChanged (oldMode){
+		if(oldMode === this.uberMode){
+			return;
+		}
+		//this.hasNode();
+		var ui = this;
+		//var can = this.node;
+		switch(this.uberMode){
+			case 0:
+				ui.setStyle("border: 2px solid blue; background-color:#fff;");
+				break;
+			case 1:
+				ui.setStyle("border: 2px solid green; background-color:#fff;");
+				break;
+			case 2:
+				ui.setStyle("border: 2px solid #000; background-color:#fff;");
+				break;
+		}
+	},
+	
+	prefsChanged: function prefsChanged (oldPrefs) {
+		var prefs = enyo.application.prefsManager.prefs;
+		if (!prefs || ((isNaN (prefs.startOfWeek) || prefs.startOfWeek === this.startOfWeek) && (this.useISOweekNum === prefs.useISOWeekNumber) && (this.weekNumOffset === prefs.weekNumberOffset) && (this.weekModulusNum === prefs.weekModulusNum))) {
+			return;
+		}
+		this.startOfWeek = prefs.startOfWeek;
+		this.prefStartDoW = this.startOfWeek -1;
+		this.useISOweekNum = prefs.useISOWeekNumber;
+		this.weekNumOffset = prefs.weekNumberOffset;
+		this.weekModulusNum = prefs.weekModulusNum;
+		this.rdayNames();
+		//console.log("new date:  " + this.viewDay);
+		this.mthctx.clearRect(0, 0, 240,240);
+		this.canvasRM(this.viewDay.getMonth(), this.viewDay.getFullYear());
+		this.startMonth = this.viewDay.getMonth();
+		this.startYear = this.viewDay.getFullYear();
+		this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		//this.markDay(new Date(), null/*img*/, "event"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		this.followCD && this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+	},
+	
+	linkedChanged: function linkChanged(oldState) {
+		this.followCD = this.linked;
+		if(!this.viewDay || (+this.viewDay != +enyo.application.currentDate)){
+			this.viewDay = new Date(+enyo.application.currentDate);
+		}
+		//console.log("new date:  " + this.viewDay);
+		this.mthctx.clearRect(0, 0, 240,240);
+		this.canvasRM(this.viewDay.getMonth(), this.viewDay.getFullYear());
+		this.startMonth = this.viewDay.getMonth();
+		this.startYear = this.viewDay.getFullYear();
+		this.markDay(new Date(), null/*img*/, "today"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		//this.markDay(new Date(), null/*img*/, "event"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+		this.followCD && this.markDay(this.viewDay, null/*img*/, "repeat"/*color*/, null/*x adjust*/,null/*y adjust*/ ,null /*wd adjust*/,null /*ht adjust*/);
+	}
+});
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/UberAgenda.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/UberAgenda.js
new file mode 100644
index 0000000..86b09aa
--- /dev/null
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/UberAgenda.js
@@ -0,0 +1,683 @@
+enyo.kind({
+	name: "calendar.uc.UberAgenda",
+	kind: enyo.VFlexBox,
+	
+	events:{
+		onUcSearchDone: ""	// for notifying that the keyboard will come up
+	,	onUcSearchStart:""	// for notifying the keyboard will go down
+	,	onDelete: ""		// for swipe to delete
+	},
+	
+	published: {
+		//selectedRecord: null
+		days: null		//watching events from the views
+	,	is24Hr: false	//watching time format changes
+	,	currentDate: "" //for watching current date
+	,	calendars: null	//watching calendar list changes
+	,	currentView: "" //watching current view and view changes
+	//,	allCals: false	//for following check box
+	//,	incAllDay: false	//check box for allday
+	,	linked: true	//for following the views display date
+	,	uberMode: 2 	// operational mode for calendar 0-move, 1-copy, 2-info
+	,	autoConfirm: false
+	},
+	
+	components: [
+		{kind: enyo.HFlexBox, components:[
+				{content: $L("All Calendars"), domStyles: {font: "14px prelude",display: "inline-block", padding: "2px 8px 10px 8px"}}, 
+				{name:"ucAllCals", kind: enyo.CheckBox, checked:false, onChange:"allCalsChanged"},
+				{content: $L("All day"), domStyles: {font: "14px prelude", display: "inline-block", padding: "2px 8px 10px 8px"}}, 
+				{name:"ucAllDay", checked:true, onChange:"incAllDayChanged", kind: enyo.CheckBox},
+				{kind:enyo.Spacer},
+				{name:"ucSearchBtn", kind:enyo.ToolButton, style:"height:25px;width:25px;padding-right:4px;", icon:"/usr/palm/applications/com.palm.app.dateandtime/images/search-icon.png", onclick:"toggleSearch"}
+		]},
+		{kind: enyo.SearchInput, name: 'ucAgendaSearch', hint: 'Search', spellcheck: false, autocorrect: false, autoCapitalize: "lowercase", changeOnInput: true, keypressInputDelay: 100, onfocus: 'SearchStart', onblur:"SearchDone", onchange:"SearchChanging", showing:false},
+		{kind: enyo.VFlexBox, flex:1, components:[	
+			{name:'uberDaysList', kind: enyo.VirtualList, flex:1, style:"background:#fff;", onSetupRow:"buildDaysList", components:[
+				{name: 'dayItemDrawer', kind: enyo.Divider },
+				{name: "dayEventItem", kind: enyo.VirtualRepeater, onSetupRow: "buildDayEvents", components:[
+					{name: "evtRow", kind:enyo.SwipeableItem, onCancel:"CancelDelete", confirmRequired: !this.autoConfirm, onConfirm:"ConfirmDelete", onclick:"EventSelected", style:"padding:0px;", components:[
+						{ kind:enyo.VFLexBox, flex:1, components: [
+							{kind: enyo.RowItem, style:"border:1px solid black;padding:1px;", components:[
+								{kind:enyo.HFlexBox, style:"padding:0px;", components: [
+									{name:"itemTimeBlock", kind:enyo.Control, components:[
+										{name: "itemStart", style:"font:14px prelude; padding-top:5px"},
+										{name: "itemEnd", style:"font:14px prelude;"}
+									]},
+									{kind: enyo.Control, style:"width:10px"},
+									{kind:enyo.Control, flex:1, align:"start", components:[
+										{name: "itemSubject", className:"ellipsis", style:"font:14px prelude"},
+										{name: "itemLocation", className:"ellipsis", style:"font:12px prelude"},
+										{name: "itemNote", className:"ellipsis", style:"font:12px prelude"}
+									]},
+									{kind:enyo.Control, style:"width:20px", align:"right", components:[
+										{name: "itemAlarmIcon", kind:enyo.Image, style:"height:12px", src:""},
+										{name: "itemAttendeeIcon", kind:enyo.Image, style:"height:12px", src:""},
+										{name: "itemUberIcon", kind:enyo.Image, style:"height:12px", src:""}
+									]}
+								]} // end event HFlexBox for event item in a horizontal layout
+							]} // end rowItem
+						]},// event VFlexBox ensures accurate vertical scroller in the Vlist
+					]}//end swipeableItem
+				]} // days[i].event[j] Virtual repeater
+			]},// end agenda list
+		]},
+		{kind: enyo.ModalDialog, name: "uberError", caption: $L("Attention"), onBeforeOpen:"errorOpening", components:[
+			{name:"errText", kind: enyo.Control, content: "Hi", className: "enyo-text-error warning-icon"},
+			{kind: enyo.Button, caption: $L("OK"), onclick: "closeUberError", style: "margin-top:10px"},
+		]},
+		{kind:"ApplicationEvents"
+		,	onWindowHidden			: "windowHiddenHandler"
+		,	onWindowShown			: "windowShownHandler"
+		}
+	],	
+	
+	constructor: function UberAgenda() {
+		this.autoConfirm = !!enyo.application.prefsManager.prefs.autoConfirmAgendaSwipe;
+		this.inherited(arguments);
+	},
+	
+	create: function create(){
+		this.inherited (arguments);
+		this.followCD = this.linked;
+		//this.autoConfirm = !!enyo.application.prefsManager.prefs.autoConfirmAgendaSwipe;
+		this.viewDay = (new Date(+enyo.application.currentDate)).clearTime();
+		this.agendaDays = [];
+		this.agendaCache = [];
+		this.allCals = enyo.application.prefsManager.prefs.ucAgendaAllCals === undefined ? false : enyo.application.prefsManager.prefs.ucAgendaAllCals;
+		this.$.ucAllCals.setChecked(this.allCals);
+		this.incAllDay = enyo.application.prefsManager.prefs.ucAgendaAllDay === undefined ? true : enyo.application.prefsManager.prefs.ucAgendaAllDay;
+		this.$.ucAllDay.setChecked(this.incAllDay);
+		this.renderedEvts = [];
+		this.renderedTS =[];
+		this.workDay = new Date();
+		this.buildDataSets();
+		this.firstLoad = true;
+		
+		this.dayFmt = new enyo.g11n.DateFmt({date:"medium", dateComponents: "mdy", weekday:"medium"});
+		this._hourFmt12 = new enyo.g11n.DateFmt({time: "h:mm a"});
+		this._hourFmt24 = new enyo.g11n.DateFmt({time: "HH:mm"});
+
+		//enyo.application.watch({currentDate: this, date: this});
+		enyo.application.watch({currentDate: this, calendars:this, days: this, is24Hr: this, linked:this, uberMode:this});
+	},
+	
+	destroy: function destroy(){
+		//enyo.application.ignore({currentDate: this, date: this});
+		enyo.application.ignore({currentDate: this, calendars:this, days: this, is24Hr: this, linked:this, uberMode:this});
+		this.inherited(arguments);
+	},
+	
+	rendered: function rendered(){
+		this.inherited(arguments);
+		this.$.ucAgendaSearch.setShowing(enyo.application.prefsManager.prefs.showSearch)
+	},
+	
+	toggleSearch: function toggleSearch(){
+		var search = this.$.ucAgendaSearch;
+		if(search){
+			search.setShowing(!search.getShowing());
+		}
+	},
+	
+	SearchStart: function SearchStart(inSender, inEvent){
+		this.doUcSearchStart();
+	},
+	
+	SearchChanging: function SearchChanging(inSender, inEvent){
+		var txt = this.$.ucAgendaSearch.getValue();
+		if(txt !== "") {
+			this.listSearching = true;
+			this.searchTxt = txt;
+			this.$.uberDaysList.punt();
+			this.wasSearching = true;
+		} else {
+			this.listSearching = false;
+			this.searchTxt = "";
+		}
+		//console.log("search input txt:  "+ txt)
+	},
+	
+	SearchDone: function ucSearchDone(){
+		// check for empty and need to refresh list
+		var txt = this.$.ucAgendaSearch.getValue();
+		if(txt === "" ){
+			this.listSearching = false;
+			this.searchTxt ="";
+			this.doUcSearchDone();
+			if(this.wasSearching){
+				this.$.uberDaysList.punt();
+				this.uberScroll();
+				this.wasSearching = false;
+			}
+		}
+	},
+	
+	buildDataSets: function buildDataSets() {
+		//console.error("build data sers: " + ((!!this.days && !!this.days) ? JSON.stringify(Object.keys(this.days)) : "no data"));
+		//format of this.days = {data: {datestring: {dayseventsObject}}} 
+		// days[datestring] = {allDayEvents: [], events: [], hiddenAllDay: [], hiddenEvents:[]}
+		// allDay event{_id:"e6", calendarId:"c4", dtstart: times[8], dtend: times[9], accountId:"a4", subject: "Building the future...", location: "Silicon Valley", 
+		//			attendees: [{commonName: "Mike Lee (Palm GBU)", role: "REQ-PARTICIPANT"}], allDay: true}
+		// event {_id:"e1", calendarId:"c2", dtstart: times[0], dtend: times[1], accountId:"a2", 	subject: "02:00 am", location: "t"	, note: "outside",
+		//		rrule:{freq:"WEEKLY", interval:4, wkst:0, rules: [{"ruleType": "BYDAY", "ruleValue": [{"day": 1},{"day": 3}]}] }}
+		this.autoConfirm = (this.autoConfirm == undefined) ? !!enyo.application.prefsManager.prefs.autoConfirmAgendaSwipe : this.autoConfirm;
+		
+		if(this.cacheDays) {
+			if(this.followCD) {
+				this.renderedTS = this.cacheTS;
+				this.agendaDays = this.cacheDays;
+			} else {
+				this.agendaCache = [];
+				this.renderedTS=[];
+				var i, len = this.cacheDays.length;
+				for(i=0; i<len;i++){
+					this.renderedTS.push(this.cacheTS[i]);
+					this.agendaCache.push(JSON.parse(JSON.stringify(this.cacheDays[i])));
+				}
+			}
+		}
+	},
+	
+	buildDaysList: function buildDaysList(inSender, inIndex) {
+		// build divider for days of events
+		var dayTS, okay = false;
+		this.dayEvts = {events:[], allDayEvents:[], renderEvts:[]};
+		this.renderedEvts[inIndex] = [];
+		if(this.followCD && this.agendaDays && this.agendaDays[inIndex]){
+			dayTS = this.renderedTS[inIndex];
+			// if(!this.allCals && this.incAllDay){
+				// this.dayEvts.events = this.agendaDays[inIndex].events;
+				// this.dayEvts.allDayEvents = this.agendaDays[inIndex].allDayEvents
+			// } else if(!this.allCals && !this.incAllDay) {
+				// this.dayEvts.events = this.agendaDays[inIndex].events;
+			// } else 
+			if(!this.incAllDay) {
+				// this.agendaDays is a reference array when linked is true, sorting will cause errors in other views
+				var i=0, evAr = this.agendaDays[inIndex].events, evlen = evAr.length;
+				var j=0, hidAr = this.agendaDays[inIndex].hiddenEvents, hidlen = hidAr.length;
+				if(hidlen===0 || hidlen === undefined) {
+					this.dayEvts.events = this.agendaDays[inIndex].events;
+				} else {
+					while(i < evlen || j < hidlen) {
+						if(hidAr[j] === undefined || !hidAr[j].renderStartTime || ((evAr[i] && evAr[i].renderStartTime) <= hidAr[j].renderStartTime)){
+							//console.log("evAr renderStartTime: " + hidAr[j]);
+							this.dayEvts.events.push(evAr[i]);
+							i++;
+						} else if(evAr[i] === undefined || !evAr[i].renderStartTime || (evAr[i].renderStartTime > (hidAr[j] && hidAr[j].renderStartTime))){
+							this.dayEvts.events.push(hidAr[j]);
+							j++;
+						}
+					}
+				}
+			} else if(this.incAllDay) {
+				this.dayEvts.allDayEvents = this.agendaDays[inIndex].allDayEvents.concat(this.agendaDays[inIndex].hiddenAllDay);
+				// this.agendaDays is a reference array when linked is true, sorting will cause errors in other views
+				var i=0, evAr = this.agendaDays[inIndex].events, evlen = evAr.length;
+				var j=0, hidAr = this.agendaDays[inIndex].hiddenEvents, hidlen = hidAr.length;
+				if(hidlen===0 || hidlen === undefined) {
+					this.dayEvts.events = this.agendaDays[inIndex].events;
+				} else {
+					while(i < evlen || j < hidlen) {
+						if(hidAr[j] === undefined || !hidAr[j].renderStartTime || ((evAr[i] && evAr[i].renderStartTime) <= hidAr[j].renderStartTime)){
+							this.dayEvts.events.push(evAr[i]);
+							i++;
+						} else if(evAr[i] === undefined || !evAr[i].renderStartTime || (evAr[i].renderStartTime > (hidAr[j] && hidAr[j].renderStartTime))){
+							this.dayEvts.events.push(hidAr[j]);
+							j++;
+						}
+					}
+				}
+			}
+			okay = true;
+		} else if(!this.followCD && this.agendaCache && this.agendaCache[inIndex]){
+			dayTS = this.renderedTS[inIndex];
+			// if(!this.allCals && this.incAllDay){
+				// this.dayEvts.events = this.agendaCache[inIndex].events;
+				// this.dayEvts.allDayEvents = this.agendaCache[inIndex].allDayEvents
+			// } else if(!this.allCals && !this.incAllDay) {
+				// this.dayEvts.events = this.agendaCache[inIndex].events;
+			// } else 
+			if(!this.incAllDay) {
+				this.dayEvts.events = this.agendaCache[inIndex].events.concat(this.agendaCache[inIndex].hiddenEvents);
+				this.dayEvts.events.sort(function(ev1, ev2){
+						var score = 0;
+						if((ev1.renderStartTime && ev2.renderStartTime) && (ev1.renderStartTime === ev2.renderStartTime)){
+							score = (ev1.renderEndTime && ev2.renderEndTime) ? ev1.renderEndTime - ev2.renderEndTime : 0;
+						} else if(ev1.renderStartTime && ev2.renderStartTime){
+							score = ev1.renderStartTime - ev2.renderStartTime;
+						}
+						return  score;
+				});
+			} else if(this.incAllDay) {
+				this.dayEvts.allDayEvents = this.agendaCache[inIndex].allDayEvents.concat(this.agendaCache[inIndex].hiddenAllDay);
+				this.dayEvts.events = this.agendaCache[inIndex].events.concat(this.agendaCache[inIndex].hiddenEvents);
+				this.dayEvts.events.sort(function(ev1, ev2){
+						var score = 0;
+						if((ev1.renderStartTime && ev2.renderStartTime) && (ev1.renderStartTime === ev2.renderStartTime)){
+							score = (ev1.renderEndTime && ev2.renderEndTime) ? ev1.renderEndTime - ev2.renderEndTime : 0;
+						} else if(ev1.renderStartTime && ev2.renderStartTime){
+							score = ev1.renderStartTime - ev2.renderStartTime;
+						}
+						return  score;
+					});
+			}
+			okay = true;
+		}
+		if(okay) {
+			if(this.listSearching && this.searchTxt){
+				var txt = this.searchTxt.toLowerCase(), searchList = [], tempList = this.dayEvts.allDayEvents.concat(this.dayEvts.events);
+				var attLen, len = tempList.length, item ={};
+				if(len){
+					for(var i=0; i <len; i++){
+						item = tempList[i];
+						if(item.subject && item.subject.toLowerCase().indexOf(txt)>= 0){
+							searchList.push(item);
+						} else if(item.location && item.location.toLowerCase().indexOf(txt)>= 0) {
+							searchList.push(item);
+						} else if(item.note && item.note.toLowerCase().indexOf(txt)>= 0) {
+							searchList.push(item);
+						} else if(item.attendees && (attLen = item.attendees.length) > 1) {
+							for(var j=0;j<attLen; j++){
+								var atte = item.attendees[j];
+								if(atte.commonName && atte.commonName.toLowerCase().indexOf(txt)>= 0) {
+									searchList.push(item);
+								} else if(atte.email && atte.email.toLowerCase().indexOf(txt)>= 0) {
+									searchList.push(item);
+								}
+							}
+						}
+					}
+				}
+				this.renderedEvts[inIndex] = searchList;
+			} else {
+				this.renderedEvts[inIndex] = this.dayEvts.allDayEvents.concat(this.dayEvts.events);
+			}
+			this.dayEvts.renderEvts = this.renderedEvts[inIndex];
+			this.workDay.setTime(dayTS);
+			
+			//console.log("days list index: "+ inIndex+", day TS: " + dayTS);
+			this.$.dayItemDrawer.setCaption(this.dayFmt.format(this.workDay));
+			return true;
+		}
+		
+	},
+	
+	buildDayEvents: function buildDayEvents(inSender, inIndex) {
+		//build rows of each days events
+		if(!this.followCD){
+			this.$.evtRow.setSwipeable(false);
+		} else{
+			this.$.evtRow.setSwipeable(true);
+		}
+		this.$.evtRow.setConfirmRequired((this.autoConfirm === false ? true : false));
+		//console.error("confirm required ::::::::: " + !this.autoConfirm);
+		var evt = this.dayEvts.renderEvts[inIndex];
+		if(!evt){
+			//console.log("agenda list repeater no evts"); 
+			return;
+		}
+		if(evt && evt.subject){
+			if(evt.color){
+				this.$.itemTimeBlock.setClassName('theme-'+evt.color);
+			} else if(evt.calendarId){
+				var color =  enyo.application.calendarsManager.getCalColor(evt.calendarId);
+				this.$.itemTimeBlock.setClassName('theme-'+color);
+			}
+			
+			this.$.itemSubject.setContent(evt.subject);
+			
+			if(evt.location) {
+				this.$.itemLocation.setContent(evt.location);
+			}
+			
+			if(evt.note) {
+				var cat, note, wholeNote = evt.note !== "\n" ? evt.note : "";
+				//var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = enyo.application.getNotesIconParts(wholeNote);
+					if(result && result[1]) {
+						cat = result[1];
+						note = result[0] + result[2];
+					} else {
+						note = wholeNote;
+					}
+				}
+				if(cat){
+					this.$.itemUberIcon.setSrc('/media/internal/.scrims/ubercalendar/icon-'+cat+'.png');
+				}
+				if(note){
+					this.$.itemNote.setContent(note);
+				}
+			}
+			var alarmIndex = Utilities.findDisplayAlarm(evt.alarm);
+			if(alarmIndex !== null){
+				if(evt.alarm  && evt.alarm[alarmIndex] &&  evt.alarm[alarmIndex].alarmTrigger && evt.alarm[alarmIndex].alarmTrigger.valueType && evt.alarm[alarmIndex].alarmTrigger.valueType === "DURATION" && evt.alarm[alarmIndex].alarmTrigger.value && evt.alarm[alarmIndex].alarmTrigger.value !== "" && evt.alarm[alarmIndex].alarmTrigger.value !== "none"){
+					this.$.itemAlarmIcon.setSrc('/media/internal/.scrims/ubercalendar/alarm-icon.png');
+				}
+			}
+			if(evt.allDay){
+				this.$.itemStart.setContent($L('all '));
+				this.$.itemEnd.setContent($L('day '));
+			} else {
+				this.workDay.setTime(evt.renderStartTime);
+				var start, end;
+				start = this.is24Hr ? this._hourFmt24.format(this.workDay) : this._hourFmt12.format(this.workDay);
+				this.$.itemStart.setContent(start);
+				this.workDay.setTime(evt.renderEndTime);
+				end = this.is24Hr ? this._hourFmt24.format(this.workDay) : this._hourFmt12.format(this.workDay);
+				this.$.itemEnd.setContent(end);
+			}
+			if(evt.attendees && evt.attendees.length > 1){
+				this.$.itemAttendeeIcon.setSrc('/media/internal/.scrims/ubercalendar/icon-meeting.png');
+			}
+			
+			var calendar = this.calendars && this.calendars[evt.calendarId];
+			
+			if(calendar){
+				var showing = this.allCals ? true : !!calendar.on;
+				this.$.evtRow.setShowing(showing);
+			}
+			//console.log("scroll top:" + this.$.uberDaysList.$.scroller.top +", scroll y:" + this.$.uberDaysList.$.scroller.$.scroll.y + ", bottom: " +this.$.uberDaysList.$.scroller.bottom + ", day evt index: " + inIndex);
+			return true;
+		}
+	},
+	
+	showUberError: function showUberError(msg){
+		var errorBox = this.$.uberError;
+		this.uberTxt = msg || "Not possible in this mode";
+		//this.$.errText.content =$L(txt);
+		errorBox.openAtCenter();
+	},
+	
+	errorOpening: function(){
+		this.$.errText.setContent($L(this.uberTxt));
+	},
+	
+	closeUberError: function closeUberError(){
+		var errorBox = this.$.uberError;
+		errorBox.close();
+	},
+	
+	uberScroll: function uberScroll(timeStamp){
+		if(!this.$.uberDaysList.hasNode()) {return;}
+		var tday = timeStamp || new Date().clearTime()
+		,	dayIndex = this.renderedTS.indexOf(String(+tday));
+		
+		if(dayIndex  === -1){
+			if(this.currentView === "dayCarousel"){
+				dayIndex = 1;
+			} else if(this.currentView === "weekCarousel"){
+				dayIndex = 7;
+			} else if(this.currentView === "monthCarousel"){
+				tday.setTime(this.renderedTS[4]);
+				tday.moveToFirstDayOfMonth();
+				tday.addMonths(1);
+				tday.clearTime();
+				dayIndex = this.renderedTS.indexOf(String(+tday));
+				if(dayIndex === -1) {return;}
+			}
+		}
+		
+		var top = this.$.uberDaysList.$.scroller.top
+		,	bottom = this.$.uberDaysList.$.scroller.bottom
+		,	diff = bottom - top
+		,	y	= this.$.uberDaysList.$.scroller.$.scroll.y;
+
+		this.$.uberDaysList.$.scroller.adjustTop(dayIndex);
+		//this.$.uberDaysList.$.scroller.adjustBottom(dayIndex-1);
+		this.$.uberDaysList.$.scroller.top = dayIndex;
+		this.$.uberDaysList.$.scroller.bottom = dayIndex-1;
+		this.$.uberDaysList.reset();
+		this.$.uberDaysList.prepareRow(dayIndex);
+		this.$.uberDaysList.update();
+		this.$.uberDaysList.refresh();
+		//this.$.uberDaysList.$.scroller.findBottom();
+		//console.log("moving !!!!!! top:" + this.$.uberDaysList.$.scroller.top +", scroll y:" + y + ", bottom: " +this.$.uberDaysList.$.scroller.bottom + ", dayIndex: " + dayIndex);
+	},
+	
+	ConfirmDelete: function ConfirmDelete(inSender, inIndex){
+		var row = this.$.uberDaysList.fetchRowIndex();
+		var event = this.renderedEvts[row][inIndex];
+		//this.log("this confirm delete evt: ",event);
+		this.renderedEvts[row].splice(inIndex,1);
+		this.$.uberDaysList.refresh();
+		this.doDelete(event);
+	},
+	
+	CancelDelete: function CancelDelete(inSender, inIndex){
+		this.$.uberDaysList.punt();
+	},
+	
+	EventSelected: function EventSelected(inSender, inEvent){
+		if(!this.linked){
+			var msg, okay;
+			switch (this.uberMode){
+				case 0:
+					msg = "Link must be ON to move";
+					okay = false;
+					break;
+				case 1:
+					//msg = "Link must be ON to copy";
+					okay = true;
+					break;
+				case 2:
+					msg = "Link must be ON to edit";
+					if(enyo.application.prefsManager.prefs.tapInUberAgenda === "edit"){
+						okay = false;
+					} else {
+						okay = true;
+					}
+					break;
+			}
+			if(!okay) {
+				this.showUberError(msg);
+				return true;
+			}
+		}
+		var row = this.$.uberDaysList.fetchRowIndex();
+		var event = this.renderedEvts[row][inEvent.rowIndex];
+		if (!event) {
+			this.error ("\tUnable to quick edit non-existent event.\t");
+			return true;
+		}
+		//this.log("this select evt: ",event)
+		if(enyo.application.prefsManager.prefs.tapInUberAgenda === "edit" || this.uberMode !== 2){
+			enyo.application.share ({ quickEdit: {data: event} });
+		} else if(this.uberMode ===2){
+			if(!this.linked){
+				event.uberCached = true;
+			}
+			enyo.application.share ({ showEvent: {data:event} });
+		}
+		return true;
+	},
+	
+	uberModeChanged: function uberModeChanged(oldMode){
+		if(oldMode === this.uberMode){
+			return;
+		}
+		//console.log("Agenda List uberMode: " + this.uberMode);
+	},
+	
+	daysChanged: function daysChanged() {
+		//rebuild list if followCD is true
+		if(!this.days){return;}
+		this.autoConfirm = !!(enyo.application.prefsManager.prefs.autoConfirmAgendaSwipe);
+		if(enyo.application.prefsManager.prefs.linkOffAfterLoad && this.firstLoad){
+			this.firstLoad = false;			
+			enyo.application.share({agendaRendered: {data:true}});
+			//console.error("agenda rendered!!!!!!!!!!!!!");
+		}
+		var dateStrings = [], len;
+		dateStrings = Object.keys(this.days);
+		len = dateStrings.length;
+		if(this.flushData || !(this.cacheTS && this.cacheTS.length > 0) || (this.cacheTS && this.cacheTS.length === len)){
+			// currentDate changed or switchView pushed or cached events changed
+			this.cacheTS=[];
+			this.cacheDays =[];
+			this.flushData = false;
+			if(len>0){
+				for(var i=0;i<len;i++){
+					this.cacheTS.push(dateStrings[i]);
+					this.cacheDays[i] = this.days[dateStrings[i]];
+				}
+			}
+			//console.error("days changed --------> flushing, new length:" + len);
+		} else { //swipes
+			var cacheLength = this.cacheTS ? this.cacheTS.length : 0;
+			if(cacheLength > 0 && len > 0){
+				var testTS, idx, TS, cTS, tempD = [], tempTS = [];
+				sTS = parseInt(this.cacheTS[0]);
+				testTS = parseInt(dateStrings[0]);
+				eTS = parseInt(this.cacheTS[cacheLength-1]);
+				idx = this.cacheTS.indexOf(dateStrings[0]);
+				if(len < 8 && idx === -1){
+					if(testTS > eTS){// week or day swipe
+						for(var i =0;i <len; i++){
+							this.cacheTS.push(dateStrings[i]);
+							this.cacheTS.shift();
+							this.cacheDays.push(this.days[dateStrings[i]]);
+							this.cacheDays.shift();
+						}
+						//console.error("days changed --------> d/w swipe on end, adding length:" + len);
+					} else if(testTS < sTS){// week or day swipe
+						for(var i =len;i >0; i--){
+							this.cacheTS.unshift(dateStrings[i-1]);
+							this.cacheTS.pop();
+							this.cacheDays.unshift(this.days[dateStrings[i-1]]);
+							this.cacheDays.pop();
+						}
+						//console.error("days changed --------> d/w swipe on begining, adding length:" + len);
+					}
+				} else if(len < 8 && idx !== -1){//week or day swipe
+					this.cacheDays.splice(idx,1,this.days[dateStrings[0]]);
+					if(len > 1){
+						for(var i = 1; i<len; i++){
+							idx = this.cacheTS.indexOf(dateStrings[i]);
+							if(idx !== -1){
+								this.cacheDays.splice(idx,1,this.days[dateStrings[i]]);
+							}
+						}
+					}
+					//console.error("days changed --------> d/w swipe updating, new length:" + len);
+				} else if(len > 8){ //month swipe
+					if((testTS < sTS && idx=== -1) || (idx !== -1 && idx <46)){ //start at begining of cacheDays
+						for(var i =len;i >0; i--){
+							testTS = dateStrings[i-1];
+							idx = this.cacheTS.indexOf(testTS);
+							if(idx === -1){
+								this.cacheTS.unshift(dateStrings[i-1]);
+								this.cacheTS.pop();
+								this.cacheDays.unshift(this.days[dateStrings[i-1]]);
+								this.cacheDays.pop();
+								//console.error("days changed --------> month swipe add begin, TS:" + dateStrings[i-1]);
+							} else{ //data is updated
+								this.cacheDays.splice(idx,1,this.days[dateStrings[i-1]]);
+								//console.error("days changed --------> month swipe updating, TS:" + dateStrings[i-1]);
+							}
+						}
+						
+					} else { //start at end of cacheDays
+						for(var i =0;i <len; i++){
+							testTS = dateStrings[i];
+							idx = this.cacheTS.indexOf(testTS);
+							if(idx === -1){
+								this.cacheTS.push(dateStrings[i]);
+								this.cacheTS.shift();
+								this.cacheDays.push(this.days[dateStrings[i]]);
+								this.cacheDays.shift();
+								//console.error("days changed --------> month swipe add end, TS:" + dateStrings[i]);
+							} else{ //data is updated
+								this.cacheDays.splice(idx,1,this.days[dateStrings[i]]);
+								//console.error("days changed --------> month swipe updating, TS:" + dateStrings[i]);
+							}
+						}
+					}
+				}
+			} else {//this.days is empty???? error somewhere
+				this.cacheTS=[];
+				this.cacheDays =[];
+				//console.error("no DATAAAAAAAAAAA");
+			}
+		}
+		if(this.followCD){
+			this.buildDataSets();
+			this.$.uberDaysList.punt();
+			this.uberScroll();
+		}
+	},
+	
+	linkedChanged: function linkedChanged (oldState) {
+		if (oldState !== undefined && this.linked  == oldState) {		
+			return;														//	So do nothing.
+		}
+		this.followCD = this.linked;
+		this.buildDataSets();
+		this.$.uberDaysList.punt();
+		this.uberScroll();
+	},
+	
+	is24HrChanged: function is24HrChanged (was24Hr) {
+		this.is24Hr = !!this.is24Hr;
+		if (was24Hr !== undefined && this.is24Hr == was24Hr) {		// 24Hr mode was previously defined and still has the same value:
+			return;														//	So do nothing.
+		}
+		// refresh list?
+	},
+	
+	calendarsChanged: function calendarsChanged(old) {
+		//console.error("UC agenda cals changed:::::::::::::: "+ JSON.stringify(this.calendars));
+		if(!this.calendars){return;}
+		//this.buildDataSets();
+		this.$.uberDaysList.punt();
+		this.uberScroll();
+	},
+	
+	allCalsChanged: function allCalsChanged() {
+		if(this.allCals === this.$.ucAllCals.getChecked()){return;}
+		this.allCals = this.$.ucAllCals.getChecked();
+		enyo.application.prefsManager.prefs.ucAgendaAllCals = this.allCalls;
+		if(this.followCD){
+			this.buildDataSets();
+		}
+		this.$.uberDaysList.punt();
+		this.uberScroll();
+	},
+	
+	currentDateChanged: function currentDateChanged(){
+		this.flushData = true;
+		//console.error("currentDateChanged !!!!! flushing");
+	},
+	
+	currentViewChanged: function currentViewChanged(){
+		this.flushData = true;
+		//console.error("currentViewChanged --------> flushing");
+	},
+	
+	incAllDayChanged: function incAllDayChanged(){
+		if(this.incAllDay === this.$.ucAllDay.getChecked()){return;}
+		this.incAllDay = this.$.ucAllDay.getChecked();
+		enyo.application.prefsManager.prefs.ucAgendaAllDay = this.incAllDay;
+		if(this.followCD){
+			this.buildDataSets();
+		}
+		this.$.uberDaysList.punt();
+		this.uberScroll();
+	},
+	
+	windowHiddenHandler: function windowHiddenHandler () {
+		this.firstLoad = true;
+		//console.error ("======= hidden agenda\t");
+	},
+	
+	windowShownHandler: function windowShownHandler () {
+		//console.error ("======= SHOWN agenda\t");
+		this.firstLoad = true;
+	},
+	
+	windowRotatedHandler: function windowRotatedHandler (from, orientation) {
+		DEBUG && this.log ("======= ROTATED\t");
+	},
+	
+});
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/AllDayEvent.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/AllDayEvent.js
index ba59f97..4d6b5af 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/AllDayEvent.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/AllDayEvent.js
@@ -11,12 +11,23 @@ enyo.kind({
 	className	: "allday-event",
 	kind		: "calendar.EventView",
 
+	published:{
+		uberMode	: null //watching calendar mode
+	,	enhancedView: true
+	,	useIcons	:true
+	},
+
 	components: [
-		{name:"text", className:"text ellipsis", layoutKind: enyo.HLayout}
+		{name:"box", layoutKind: enyo.HLayout, components: [
+			{name:"text", className:"text ellipsis", style:"top:3px;", layoutKind: enyo.HLayout},
+			{name: "image", kind: enyo.Image, showing:false, style:"right:-14px; top:8px;padding:0px;margin:0px;", src:""}
+		]}
 	],
 
 	create: function create () {
 		this.inherited (arguments);
+		
+		this.uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
 	},
 
 	destroy: function destroy () {
@@ -24,7 +35,12 @@ enyo.kind({
 	},
 
 	clickHandler: function allDayEventClicked (from, domEvent) {
-		enyo.application.share ({showEvent: {data: this}});
+		this.uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
+		if(enyo.application.prefsManager.prefs.tapInView === "edit"  || this.uberMode !== 2){
+			enyo.application.share ({ quickEdit: {data: this.event} });
+		} else {
+			enyo.application.share ({ showEvent: {data: this} });
+		}
 		return true;
 	},
 	
@@ -42,6 +58,21 @@ enyo.kind({
 
 	eventChanged: function allDayEventChanged (oldEvent) {
 		this.event && this.$.text.setContent (this.event.subject || $L("No Subject"));
+		var bgimage, start;
+		if(this.enhancedView && this.useIcons){
+			start = this.event && this.event.note && enyo.application.getNotesIconParts(this.event.note);
+			if (start && start[1]) {
+				var icon = start[1];
+				bgimage = "/media/internal/.scrims/ubercalendar/icon-" + icon + ".png";
+				var bgrepeat = "background-repeat: no-repeat";
+			}
+		}
+		if(this.event && this.event.note && (bgimage != undefined)){
+			this.$.image.setSrc(bgimage);
+			this.$.image.setShowing(true);
+		} else {
+			this.$.image.setShowing(false);
+		}
 		this.inherited (arguments);
 	}
 });
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayEventGroup.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayEventGroup.js
index 55dffc1..45dda07 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayEventGroup.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayEventGroup.js
@@ -14,21 +14,26 @@ enyo.kind({
 	kind				: "Control",
 	defaultKind			: "calendar.day.DayEvent",
 	timeMachine			: new Date(),
-	hourHeight			: 59,
-	minWidthToShowText	: 30,
+	minWidthToShowText	: 28,
 	minHeightToShowLocation	: 38,
-	minHeightToShowNote		: 58,
+	minHeightToShowNote		: 48,
 
 
 	published:
-	{	events	: null		// Object	: For setting this group's events.
-	,	date	: null
-	,	edge	: "none"
+	{	events	: 	null		// Object	: For setting this group's events.
+	,	date	: 	null
+	,	uberMode: 	null
+	,	edge	: 	"none"
+	,	useIcons:	true
+	,	alarmIcons:	true
+	,	enhancedView: true
+	,	hourHeight:	59
+	,	inWeekView: false
 	},
 
 	edges:
 	{
-		"default"	: {width: 12, borderWidth: 2, spacing: 2, className: " edge"}		// edge's width and total border width (left+right) and spacing (left+right)
+		"default"	: {width: 4, borderWidth: 1, spacing: 1, className: " edge"}		// edge's width and total border width (left+right) and spacing (left+right)
 	,	none		: {width: 0, borderWidth: 0, spacing: 0, className: ""}
 	},
 
@@ -48,6 +53,7 @@ enyo.kind({
 		this.changeEventColor = enyo.bind(this, this.changeEventColor);
 		this.resetEventColor = enyo.bind(this, this.resetEventColor);
 		this.eventsChanged();
+		this.uberMode = enyo.application.uberMode;
 	},
 
 	destroy: function destroy () {
@@ -76,8 +82,13 @@ enyo.kind({
 				if (domSubstr.indexOf (event._id) >= 0)
 				{
 					DEBUG && this.log ("You clicked on: " + event.subject);
+					this.uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
 					var eventToShow = JSON.parse (JSON.stringify(event));
-					enyo.application.share ({showEvent: {data: eventToShow}});
+					if(enyo.application.prefsManager.prefs.tapInView === "edit" || this.uberMode !== 2){
+						enyo.application.share ({ quickEdit: {data: eventToShow} });
+					} else {
+						enyo.application.share ({showEvent: {data: eventToShow}});
+					}
 					return true;
 				}
 			}
@@ -127,7 +138,7 @@ enyo.kind({
 	},
 
 	becameCurrentPaneHandler: function becameCurrentPaneHandler (isCurrentPane) {
-		if(isCurrentPane && this.rotatedWhileHidden){
+		if(isCurrentPane){// && this.rotatedWhileHidden){
 			this.rotatedWhileHidden = false;
 			this.isCurrentPane = true;
 			this.performResize();
@@ -139,9 +150,24 @@ enyo.kind({
 
 // BEGIN :-------: Published Property Handlers :--------------------------------------------------------------------------------------------------------------//
 
+	hourHeightChanged: function hourHeightChanged(oldHeight){
+		if(this.hourHeight == oldHeight){return;}
+		//this.calcEventPositions();
+		this.eventsChanged();
+	},
+	
 	eventsChanged: function eventsChanged (inOldEvents) {
 		if(!this.events) return;
-		
+		var prefs =  enyo.application.prefsManager.prefs;
+		if(this.inWeekView && prefs){
+			this.enhancedView = !!prefs.weekViewEnhanced;
+			this.useIcons = !!prefs.weekUseIcons;
+			this.alarmIcons	= !!prefs.weekAlarmIcons;
+		} else if(prefs){
+			this.enhancedView = !!prefs.dayViewEnhanced;
+			this.useIcons = !!prefs.dayUseIcons;
+			this.alarmIcons	= !!prefs.dayAlarmIcons;
+		}
 		//if(this.events == inOldEvents) {
 		//	return; 
 		//}
@@ -250,8 +276,8 @@ enyo.kind({
 			,	end			= event.renderEndTime	|| event.dtend
 			,	start		= event.renderStartTime	|| event.dtstart
 			,	minutes		= ((end - start) / 60000)
-			,	height		= (minutes < 30 ? 30 : minutes * hourHeight / 60) - 1
-			,	top			= this.timeMachine.setTime (start) && this.timeMachine.getMinutes()
+			,	height		= (minutes < 30 ? 30* hourHeight / 60 : minutes * (hourHeight / 60)) - 1
+			,	top			= this.timeMachine.setTime (start) && (this.timeMachine.getMinutes() * (hourHeight/59))
 			,	thisHour	= Math.floor(event.start_decimal / 100)
 			;
 
@@ -268,12 +294,16 @@ enyo.kind({
 		this.timeMachine.setTime(this.date || Date.now())
 		var	date = this.timeMachine;
 
-		var	hour		= Math.floor(domEvent.offsetY / 59)				// Store the current hour.
+		var	hour		= Math.floor(domEvent.offsetY / this.hourHeight)				// Store the current hour.
 		,	minute		= 0 //Math.ceil (date.getMinutes() / 15) * 15	// Calculate the closest 15 minute interval after the current time.
 		;
 		date.clearTime();												// Set the event's time to midnight.
 		date.set({hour:hour, minute:minute});							// Set the event's hour and minute.
-
+		this.uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
+		if(this.uberMode !== 2){
+			enyo.application.share({quickDate: {data: date.getTime()}});
+			return true;
+		}
 		var	createEvent =
 		{	event	: {dtstart: +date}
 		,	then	: enyo.bind (this, this.createEventThen, hour, true)
@@ -306,28 +336,72 @@ enyo.kind({
 		,	edgeWidth				= edge.width + edge.borderWidth + edge.spacing
 		,	widthDiff				= edgeWidth + 2							// 2 accounts for the event's border
 		,	minWidthToShowText		= this.minWidthToShowText + widthDiff
-		,	minHeightToShowLocation	= this.minHeightToShowLocation
-		,	minHeightToShowNote		= this.minHeightToShowNote
+		,	minHeightToShowLocation	= this.hourHeight < 59 ? 30 : this.minHeightToShowLocation
+		,	minHeightToShowNote		=  this.hourHeight < 59 ? 40 : this.minHeightToShowNote
 		;
 
 		for (var i = 0; i < numEvents; i++) {
 			event	= events[i];
 			id		= idPrefix + '_' + event._id;
+			var wholeNote, bgimage, bgposition, bgrepeat, start = [];
+			if(this.enhancedView){
+				try {
+					//var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+					//var wholeNote, bgimage, bgposition, bgrepeat, start = [];
+					start = event.note && enyo.application.getNotesIconParts(event.note);
+					if (this.useIcons && start && start[1]) {
+						wholeNote = start[0] + start[2];
+						var icon = start[1];
+						bgimage = "url(/media/internal/.scrims/ubercalendar/icon-" + icon + ".png)";
+						bgrepeat = "no-repeat";
+						bgposition = "top right";
+					} else {
+						bgimage = false;
+						bgposition = false;
+						bgrepeat = false;
+					}
+					
+					if(this.alarmIcons && event.alarm  && event.alarm[0] && event.alarm[0].alarmTrigger && event.alarm[0].alarmTrigger.valueType && event.alarm[0].alarmTrigger.valueType === "DURATION" && event.alarm[0].alarmTrigger.value && event.alarm[0].alarmTrigger.value !== "" && event.alarm[0].alarmTrigger.value !== "none"){
+						if(bgimage && bgposition){
+							bgimage += ", url(/media/internal/.scrims/ubercalendar/alarm-icon.png)";
+							bgposition += ", center right";
+							bgrepeat += ", no-repeat";
+						} else {
+							bgimage = "url(/media/internal/.scrims/ubercalendar/alarm-icon.png)";
+							bgposition = "center right";
+							bgrepeat = "no-repeat";
+						}
+					}
+					if(this.useIcons && event.attendees && event.attendees.length > 1) {
+						if(bgimage && bgposition){
+							bgimage += ", url(/media/internal/.scrims/ubercalendar/icon-meeting.png)";
+							bgposition += ", bottom left";
+							bgrepeat += ", no-repeat";
+						} else {
+							bgimage = "url(/media/internal/.scrims/ubercalendar/icon-meeting.png)";
+							bgposition = "bottom left";
+							bgrepeat = "no-repeat";
+						}
+					}
+				} catch(e) {
+				}
+			}
 			htmlString += '<div id="' + id +'" class="event theme-' + event.color + edge.className + '" style="'
 				+	'top:'		+ (event.top)						+ 'px;'
 				+	'left:'		+ (event.left + edgeWidth)			+ 'px;'
 				+	'width:'	+ (event.width - widthDiff)			+ 'px;'
-				+	'height:'	+ (event.height)					+ 'px;">'
-			;
+				+	'height:'	+ (event.height)					+ 'px;';
+			if(bgimage && bgrepeat) {htmlString += 'background-image:' + bgimage + '; background-position:'+ bgposition + "; background-repeat: " + bgrepeat + ';">';} else{htmlString += '">';}
+
 
 			if(event.width > minWidthToShowText) {
-				htmlString += '<div id="' + id + '_subject" class="ellipsis subject">' + enyo.string.escapeHtml(event.subject || this.G11N.defaults.subject) + '</div>';
+				htmlString += '<div id="' + id + '_subject" class="' + (this.hourHeight < 59 ? 'subject-shrunk' : 'subject') +' ">' + enyo.string.escapeHtml(event.subject || this.G11N.defaults.subject) + '</div>';
 				/* Don't display location or note if we're too small */
 				if(event.height > minHeightToShowLocation) {
-					htmlString += '<div id="' + id + '_location" class="ellipsis location">' + enyo.string.escapeHtml(event.location || '') + '</div>';
+					htmlString += '<div id="' + id + '_location" class="' + (this.hourHeight < 59 ? 'location-shrunk' : 'location') +' ">' + enyo.string.escapeHtml(event.location || '') + '</div>';
 					/* Don't display note if we're too small */
 					if(event.height > minHeightToShowNote) {
-						htmlString += '<div id="' + id + '_note" class="ellipsis note">' + enyo.string.escapeHtml(event.note || '') + '</div>';
+						htmlString += '<div id="' + id + '_note" class="' + (this.hourHeight < 59 ? 'note-shrunk' : 'note') +' ">' + enyo.string.escapeHtml((start ? wholeNote :event.note) || '') + '</div>';
 					}
 				}
 			}
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayHours.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayHours.js
index de91ac7..d92d0c7 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayHours.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayHours.js
@@ -13,6 +13,7 @@ enyo.kind({
 
 	published:
 	{	is24Hr	: false		// Boolean	: For accepting 24hr clock mode changes.
+	,	hourHeight: 59
 	},
 
 	G11N:
@@ -23,9 +24,11 @@ enyo.kind({
 	create: function create () {
 		this.inherited (arguments);
 		this.hours = [];
-
+		//this.hourHeight = enyo.application.hourHeight != undefined ? enyo.application.hourHeight : 59;
 		for (var i=0; i < 24; ++i) {	
 			this.hours.push (this.createComponent());
+			this.hours[i].setHourHeight(this.hourHeight);
+			this.hours[i].applyStyle("height", this.hourHeight + "px");
 		}
 		if(this.is24Hr === undefined){ 
 			//coming from weekview 
@@ -68,7 +71,17 @@ enyo.kind({
 				hourLabel.setAMPM		(is24Hr || hour == 12 ? "" : hour < 12 ? am : pm);
 			}
 		}
-	}
+	},
+	
+	hourHeightChanged: function(oldHeight){
+		if(this.hourHeight == oldHeight){return;}
+		for (var i=0; i < 24; ++i) {
+			this.hours[i] && this.hours[i].setHourHeight(this.hourHeight);
+			this.hours[i] && this.hours[i].applyStyle("height", this.hourHeight + "px");
+		//this.$.halfMarker.applyStyle("top", (((this.hourHeight+1)/2) -2)+"px");
+		//this.$.current.applyStyle("height", this.hourHeight+"px");
+		}
+	},
 });
 
 enyo.kind({
@@ -80,6 +93,7 @@ enyo.kind({
 	{	AMPM			: ""
 	,	hour			: -1
 	,	hourLabel		: ""
+	,	hourHeight		: 59
 	,	isActiveHour	: false
 	,	isCurrentHour	: false
 	},
@@ -89,7 +103,7 @@ enyo.kind({
 			{name:"hourLabel"	, className:"number"},
 			{name:"AMPM"		, className:"ampm"}
 		]},
-		{className:"halfMarker"},
+		{name: "halfMarker", className:"halfMarker"},
 		{name:"current", className:"current", showing:false}
 	],
 
@@ -108,6 +122,12 @@ enyo.kind({
 		if (this.hourLabel == oldHourLabel) { return; }
 		this.$.hourLabel.setContent (this.hourLabel);
 	},
+	
+	hourHeightChanged: function(oldHeight){
+		if(this.hourHeight == oldHeight){return;}
+		this.$.halfMarker.applyStyle("top", (((this.hourHeight+1)/2) -2)+"px");
+		this.$.current.applyStyle("height", this.hourHeight+"px");
+	},
 
 	isActiveHourChanged: function isActiveHourChanged (wasActiveHour) {
 //		if (this.isActiveHour == wasActiveHour) { return; }
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.css b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.css
index c72bea7..9cf6aef 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.css
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.css
@@ -10,12 +10,12 @@
 	border 						: none;
 /*	border-bottom				: 1px dotted #ccc;*/
 	color						: #333;
-	font-size					: 48px;
+	font-size					: 36px;
 	font-weight					: 100;
 	overflow 					: hidden;
 	padding						: 6px 22px 18px;
 	white-space					: pre;
-	height						: 82px;
+	height						: 62px;
 }
 .calendar .day .header .date-highlight{
 	font-weight					: bold;
@@ -42,14 +42,14 @@
 	background					: url(images/allday-header-border.png) repeat-x bottom;
 	border-right				: none;
 	border-left					: none;
-	min-height					: 35px;
+	min-height					: 30px;
 	padding-bottom				: 2px;
 	overflow 					: hidden;
 	padding-left				: 22px;
 }
 .calendar .day .allday-header .label{
 	color 						: #666666;
-	font-size					: 14px;
+	font-size					: 12px;
 	line-height					: 36px;
 	margin-right				: 10px;
 }
@@ -62,8 +62,10 @@
 	color 						: #333;
 	font-weight					: bold;
 	font-size					: 12px;
+	font						: prelude;
 	opacity 					: 0.8;
-	padding						: 3px;
+	overflow 					: hidden;
+	padding						: 3px 0;
 	text-align					: center;
 	min-width					: 50px;
 	max-width					: 150px;
@@ -133,7 +135,7 @@
 	position					: absolute;
 	top							: 28px;
 	left						: 27px;
-	width						: 965px;
+	width						: 100%;
 	height						: 5px;
 	z-index						: -1;
 }
@@ -160,8 +162,8 @@
 .calendar .day .event.edge:after		{ /* Event's leading edge */
 	content						: "";
 	top							: -1px;
-	left						: -16px;
-	width						: 12px;
+	left						: -6px;
+	width						: 4px;
 	height						: 100%;
 }
 .calendar .day .event,
@@ -178,27 +180,61 @@
 .calendar .day .event .subject	,
 .calendar .day .event .location	,
 .calendar .day .event .note		{
-	line-height					: 16px;
-	margin-left					: 7px;
-	margin-right				: 5px;
-	min-height					: 16px;
+	line-height					: 12px;
+	margin-left					: 3px;
+	margin-right				: 4px;
+	min-height					: 12px;
 	overflow 					: hidden;
-	text-overflow				: ellipsis;
-	white-space					: nowrap;
+	font						: prelude;
+	white-space					: normal;
 }
 .calendar .day .event .subject	{
-	margin-top					: 5px;
+	margin-top					: 2px;
 	color 						: #333;
+	max-height					: 24px;
 	font-weight					: bold;
+	font-size					: 12px;
 }
 .calendar .day .event .location {
 	color 						: #666666;
-	font-size					: 12px;
+	font-size					: 10px;
+	max-height					: 24px;
 }
 .calendar .day .event .note {
 	color 						: #666666;
-	font-size					: 12px;
+	font-size					: 10px;
+	margin-bottom				: 1px;
+	white-space					: nowrap;
+	padding-top					: 1px;
+}
+.calendar .day .event .subject-shrunk	,
+.calendar .day .event .location-shrunk	,
+.calendar .day .event .note-shrunk		{
+	line-height					: 10px;
+	margin-left					: 3px;
+	margin-right				: 4px;
+	min-height					: 10px;
+	overflow 					: hidden;
+	font						: prelude;
+	white-space					: normal;
+}
+.calendar .day .event .subject-shrunk{
+	margin-top					: 1px;
+	color 						: #333;
+	max-height					: 20px;
+	font-weight					: bold;
+	font-size					: 10px;
+}
+.calendar .day .event .location-shrunk{
+	color 						: #666666;
+	font-size					: 9px;
+	max-height					: 10px;
+}
+.calendar .day .event .note-shrunk{
+	color 						: #666666;
+	font-size					: 9px;
 	margin-bottom				: 1px;
+	white-space					: nowrap;
 	padding-top					: 1px;
 }
 .calendar .day .eventGroup {
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.js
index 4285875..39545c9 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/day/DayView.js
@@ -25,6 +25,11 @@ enyo.kind({
 	,	prefs		: null		// Object	: For watching Preferences changes.
 	,	tzId		: ""		// String	: For watching timezone changes.
 	,	weekRange	: null		// Object	: {start:Number, end:Number}: The start and end of this day's week.
+	,	hourHeight	: 59		//
+	,	useIcons	: true
+	,	alarmIcons	: true
+	,	enhancedView: true
+	,	weekAllDayHeader : null	// pointer to week All Day Header
 	},
 
 	G11N:
@@ -35,6 +40,10 @@ enyo.kind({
 		}
 	,	Today			: $L("Today")
 	},
+	
+	components:	[
+		{kind:"ApplicationEvents", onWindowRotated			: "windowRotatedHandler"}
+	],
 
 	constructor: function DayView () {
 		this.timeMachine	= new Date();				// For calculating date/times without creating new instances.
@@ -58,35 +67,46 @@ enyo.kind({
 
 	create: function create () {
 		this.inherited (arguments);
-
+		this.wkAllDayHeader = this.weekAllDayHeader;
 		this.is24Hr === undefined && this.setIs24Hr(!enyo.application.fmts.isAmPm());	// If 24Hr isn't set yet, grab the default setting.
-
 		this.createEventThen	= enyo.bind (this, this.createEventThen);
 		this.updateCurrentHour	= enyo.bind (this, this.updateCurrentHour);
+		var prefs	= this.prefs || enyo.application.prefsManager.prefs;
 		
 		//this.busyFreeManager	= enyo.application.busyFreeManager;
 		this.layoutManager		= enyo.application.layoutManager;
 
+		if(!this.inWeekView){
+			this.enhancedView = !!prefs.dayViewEnhanced;
+			this.hourHeight= prefs.dayHourHeight && this.enhancedView ? parseInt(prefs.dayHourHeight,10) : 59;
+			this.useIcons = !!prefs.dayUseIcons;
+			this.alarmIcons	= !!prefs.dayAlarmIcons;
+		}
+		
 		if(!this.inWeekView) {
 			this.createComponent
 			({name:"header", className:"header", kind:enyo.HFlexBox, components:[
 				{name:"dateHeader"		, kind:"calendar.DateHeader", formats:this.G11N.DateFormat, flex:1}
 			,	{name:"today"			, className:"today", showing:false}
+			,	{name:"weekNumber"		, className:"today", showing:false}
 			]});
+			this.uberWeekNumber();
 		}
 
-		this.createComponent
-		({name:"allDayContainer", className:"allday-header", kind: enyo.HFlexBox, showing:false, components: [
-			{name:"allDayLabel", className:"label"},
-			{kind:enyo.Scroller, name: "allDayScroller", vertical:false, flex:1, components: [
-				{name:"allDayHeader", layoutKind: enyo.HLayout, defaultKind:"calendar.day.AllDayEvent", onclick:"createAllDayEvent"}
-			]}
-		]});
+		if(!this.inWeekView) {
+			this.createComponent
+			({name:"allDayContainer", className:"allday-header", kind: enyo.HFlexBox, showing:false, components: [
+				{name:"allDayLabel", className:"label"},
+				{kind:enyo.Scroller, name: "allDayScroller", vertical:false, flex:1, components: [
+					{name:"allDayHeader", layoutKind: enyo.HLayout, defaultKind:"calendar.day.AllDayEvent", onclick:"createAllDayEvent"}
+				]}
+			]});
+		}
 
 		this.createDay();
 
 		var	ui = this.$;
-		this.inWeekView && ui.allDayLabel.destroy();
+		//this.inWeekView && ui.allDayLabel.destroy();
 
 		if (!this.inWeekView) {									// If not being show as part of Week View:
 			ui.today		.setContent (this.G11N.Today);		//		Update the "Today" indicator.
@@ -111,6 +131,11 @@ enyo.kind({
 	childrenNeedResizeHandler: function childrenNeedResizeHandler(resizeNeeded){
 		this.broadcastMessage("childNeedsResize", [resizeNeeded]);
 	},
+	
+	windowRotatedHandler: function windowRotatedHandler(){
+		this.showing && this.updateCurrentHour ({scroll: true});
+	},
+
 
 // BEGIN :-------: Custom Handlers :--------------------------------------------------------------------------------------------------------------------------//
 
@@ -128,7 +153,11 @@ enyo.kind({
 		enyo.application [handle] (this.commonWatches);
 		!this.inWeekView && enyo.application [handle] (this.dayWatches);		// Adjust watches based on whether this day is part of WeekView.
 
-		this.$.allDayHeader.broadcastMessage ("isActive", [isActive]);			// Notify all-day events of active state.
+		if(!this.inWeekView) {
+			this.$.allDayHeader.broadcastMessage ("isActive", [isActive]);		// Notify all-day events of active state.
+		} else {
+			this.wkAllDayHeader.broadcastMessage("isActive", [isActive]);
+		}
 	},
 
 	is24HrHandler: function is24HrHandler (is24Hr) {
@@ -179,6 +208,39 @@ enyo.kind({
 	clockChanged: function clockChanged (oldClock) {
 		this.updateCurrentHour ({scroll: false});		// Don't scroll when the hour changes; user may want to stay on the specific date and/or time. TODO: Auto-scroll preference?
 	},
+	
+	prefsChanged: function prefsChanged(oldPrefs){
+		var prefs	= this.prefs || enyo.application.prefsManager.prefs
+		,	oldHeight= this.hourHeight
+		;
+		if (!prefs) {
+			return;
+		}
+		if(this.inWeekView && prefs){
+			this.enhancedView = !!prefs.weekViewEnhanced;
+			this.hourHeight= prefs.weekHourHeight && this.enhancedView ? parseInt(prefs.weekHourHeight,10) : 59;
+			this.useIcons = !!prefs.weekUseIcons;
+			this.alarmIcons	= !!prefs.weekAlarmIcons;
+		} else if(prefs){
+			this.enhancedView = !!prefs.dayViewEnhanced;
+			this.hourHeight= prefs.dayHourHeight && this.enhancedView ? parseInt(prefs.dayHourHeight,10) : 59;
+			this.useIcons = !!prefs.dayUseIcons;
+			this.alarmIcons	= !!prefs.dayAlarmIcons;
+		}
+		if(oldHeight  !== this.hourHeight){
+			this.eventGroup.applyStyle("height", (this.hourHeight +1)*24 +"px;");
+			this.eventGroup.applyStyle("-webkit-background-size", "1px "+ this.hourHeight + "px");
+			this.eventGroup.setHourHeight(this.hourHeight);
+			
+			if(!this.inWeekView) {
+				this.$.hours.applyStyle("height", this.hourHeight +'px;');
+				this.$.hours.$.dayContainer.applyStyle("height", (this.hourHeight +1)*24 +"px");
+				this.$.hourLabels.setHourHeight(this.hourHeight);
+				this.$.hours.$.dayContainer.$.hoursContainer.applyStyle("height", (this.hourHeight +1)*24 +"px");
+				this.updateCurrentHour ({scroll: true});
+			}
+		}
+	},
 
 	dateChanged: function dateChanged (oldDate) {
 		var date = this.date;
@@ -187,6 +249,7 @@ enyo.kind({
 		}
 
 		this.day = undefined;
+
 		this.eventGroup.setDate(new Date(date));
 		this.clearEventDisplay ();
 
@@ -194,6 +257,7 @@ enyo.kind({
 			this.$.dateHeader.setDate(new Date(date));
 			this.updateCurrentHour ({scroll: true});
 		}
+
 	},
 
 	daysChanged: function daysChanged (oldDays) {
@@ -239,31 +303,43 @@ enyo.kind({
 		;
 		hourContainer.className	= "hours";
 		hourContainer.name		= "hours";
+		if(!inWeekView){hourContainer.style =  'border-top: 1px solid #b9b9b9; height:'+ this.hourHeight +'px; padding: 0 10px;';}
 		hourContainer.flex		= 1;
 		hourContainer			= this.createComponent (hourContainer);
 
 		this.inWeekView && (hoursContainer = hourContainer);
 
 		if (!inWeekView) {
-			var	dayContainer	= hourContainer.createComponent	({name: "dayContainer"	, kind: enyo.HFlexBox, className:"day-container"})
-			,	hourLabels		= dayContainer.createComponent	({name: "hourLabels"	, kind:"calendar.day.DayHours", owner: this, is24Hr:is24Hr})	// Build hour labels with the retained 24hr setting.
+			var	dayContainer	= hourContainer.createComponent	({name: "dayContainer"	, kind: enyo.HFlexBox, className:"day-container", style:"width: 100%;height: " +(this.hourHeight +1)*24 +"px; overflow: hidden;	padding-top	: 29px;"})
+			,	hourLabels		= dayContainer.createComponent	({name: "hourLabels"	, kind:"calendar.day.DayHours", hourHeight: this.hourHeight, owner: this, is24Hr:is24Hr})	// Build hour labels with the retained 24hr setting.
 			;
-			hoursContainer		= dayContainer.createComponent	({name: "hoursContainer", kind: enyo.Control, style: "height: 1440px; position: relative;", flex: 1});
+			hoursContainer		= dayContainer.createComponent	({name: "hoursContainer", kind: enyo.Control, style: "height: "+(this.hourHeight +1)*24 +"px; position: relative;", flex: 1});
 		}
 
 		this.eventGroup = hoursContainer.createComponent(
 		{	kind	: "calendar.day.DayEventGroup"
 		,	flex	: 1
-		,	style	: "position: relative; height: 1440px;"
+		,	style	: "position: relative; height: "+(this.hourHeight +1)*24 +"px;"
 		,	owner	: this
 		,	edge	: inWeekView ? "none" : "default"
+		,	enhancedView: this.enhancedView
+		,	hourHeight:	this.hourHeight
+		,	useIcons: this.useIcons
+		,	alarmIcons: this.alarmIcons
+		,	inWeekView: this.inWeekView
 		});
+		this.eventGroup.applyStyle("-webkit-background-size", "1px "+ this.hourHeight + "px")
 	},
 
 	createAllDayEvent: function createAllDayEvent (from, domEvent) {
 		if (!this.createAllDayEvent.then) {
 			this.createAllDayEvent.then = enyo.bind (this, this.createEventThen, null, true);
 		}
+		var uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
+		if(uberMode !== 2){
+			enyo.application.share({quickDate: {data: this.date.getTime()}});
+			return true;
+		}
 		var	createEvent =
 		{	event	: {allDay: true, dtstart: +this.date}
 		,	then	: this.createAllDayEvent.then
@@ -279,8 +355,8 @@ enyo.kind({
 		}
 
 		var eventGUI;
-		if(event.allDay){
-			eventGUI = this.$.allDayHeader.createComponent ({event:event})					//	create an all-day event GUI
+		if(false){
+			eventGUI = this.$.allDayHeader.createComponent ({event:event, enhancedView: this.enhancedView, useIcons:this.useIcons})					//	create an all-day event GUI
 		}
 		else{
 			eventGUI = event;
@@ -301,6 +377,53 @@ enyo.kind({
 		return isToday;
 	},
 
+	uberWeekNumber: function uberWeekNumber (){
+		var prefs	= this.prefs || enyo.application.prefsManager.prefs;
+		if(!prefs.showWkNumber || !prefs.dayViewEnhanced) {
+			return;
+		}
+		var useISOweekNum = prefs.useISOWeekNumber
+		,	dayDate		= new Date (this.date || Date.now())
+		,	weekNumOffset = prefs.weekNumberOffset
+		,	weekModulusNum = prefs.weekModulusNum
+		,	prefStartDoW = prefs.startOfWeek -1
+		,	year = dayDate.getFullYear()
+		,	month = dayDate.getMonth()
+		,	day = dayDate.getDate()
+		,	maxwkn
+		,	weekNumber;
+		dayDate.setTime(Date.UTC(year, month, day));
+		
+		if(useISOweekNum === true){
+			weekNumber = dayDate.getISO8601Week();
+			maxwkn = new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week();
+		} else {
+				dayDate = (dayDate.getDay() !== prefStartDoW) ? dayDate.moveToDayOfWeek(prefStartDoW, -1) : dayDate;
+				weekNumber = dayDate.getWeekOfYear(prefStartDoW);
+				dayDate.setTime(Date.UTC((month != 0 ? year : year -1), 11, 31));
+				dayDate.getDay() !== prefStartDoW && dayDate.moveToDayOfWeek(prefStartDoW, -1);
+				maxwkn = dayDate.getWeekOfYear(prefStartDoW);
+				weekNumber = weekNumber === 0 ? 1 : weekNumber;
+		}
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		weekNumber = weekNumber == 0 ? maxwkn : weekNumber;
+		if(weekNumOffset !== undefined && weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(weekModulusNum != undefined && weekModulusNum <= 52 && weekModulusNum != 1) {
+			modNumber = (parseInt(weekNumber, 10) % weekModulusNum);
+			modNumber = modNumber !== 0 ? modNumber : weekModulusNum;
+			weekNumber = weekNumber + ' (' + modNumber +')';
+		}
+		
+		this.$.weekNumber.setShowing(true);
+		var wkTemplate = new enyo.g11n.Template($L("Wk #{weekStr}"));
+		var weekTxt = wkTemplate.evaluate({weekStr: weekNumber});
+		this.$.weekNumber.setContent(weekTxt);
+	},
+
 	updateCurrentHour: function updateCurrentHour (options) {
 		/*	Update the now indicator for the currently displayed day or hide it
 			if today is not the currently viewed day.
@@ -313,16 +436,22 @@ enyo.kind({
 		,	isToday		= this.isToday (dayDate, now)							// Store whether this day is today.
 		,	ui			= this.$
 		,	hourLabels	= ui.hourLabels.hours
+		,	prefs		= enyo.application.prefsManager.prefs
+		,	prefsHour	= (new Date(prefs.startTimeOfDay)).getUTCHours()
 		;
 		isFinite(this.currentHour) && hourLabels[this.currentHour].setIsCurrentHour (false);					// Clear the now indicator if this isn't today or the current hour is wrong.
 		isToday	&& hourLabels[currentHour].setIsCurrentHour (true);				// If this day is today, update the now (current hour) indicator.
 		this.currentHour = currentHour;
 		
-		if (options && options.scroll) {
+		if (options && options.scroll && isToday && prefs.scrollToCurrentTime) {
 			(currentHour > 0) && (--currentHour); 								// Scroll to the hour before the current hour.
-			currentHour = Math.min(currentHour, 17); 							// Can't scroll past 4pm anyway
-			var top = 59 * currentHour;
+			currentHour = Math.min(currentHour, 16); 							// Can't scroll past 4pm anyway
+			var top = this.hourHeight * currentHour;
 			isFinite(top) && ui.hours.setScrollTop(top);
+		} else {
+			var	top = this.hourHeight* prefsHour;
+			//console.log(this.ucWeekScrollTop);
+			isFinite (top) && ui.hours.setScrollTop (top);
 		}
 	},
 
@@ -400,7 +529,7 @@ enyo.kind({
 		var	calendar
 		,	control
 		,	event
-		,	allDayHeader		= this.$.allDayHeader
+		,	allDayHeader		= this.inWeekView ? this.wkAllDayHeader : this.$.allDayHeader
 		,	allDayControls		= allDayHeader.getControls()
 		,	allDayEvents		= events.allDayEvents
 		,	calendars			= this.calendars
@@ -412,28 +541,34 @@ enyo.kind({
 		;
 
 		// If we already have allDayEvent controls, let's reuse them.
-		for (; controlIndex < numControls; ++controlIndex) {
-			control	= allDayControls[controlIndex];
-			event	= allDayEvents[controlIndex];
-
-			// If we have a control and there is an event to go with it, set the event.  Otherwise, hide the control.
-			if (event) {
-				if (!event.color && calendars) {	// TODO: We use this logic multiple times, this could probably be done better.
-					calendar = calendars [event.calendarId];
-					calendar && (event.color = calendar.color);
+		if(!this.inWeekView){
+			for (; controlIndex < numControls; ++controlIndex) {
+				control	= allDayControls[controlIndex];
+				event	= allDayEvents[controlIndex];
+
+				// If we have a control and there is an event to go with it, set the event.  Otherwise, hide the control.
+				if (event) {
+					if (!event.color && calendars) {	// TODO: We use this logic multiple times, this could probably be done better.
+						calendar = calendars [event.calendarId];
+						calendar && (event.color = calendar.color);
+					}
+					DEBUG && this.log ("\tGrouping all-day event (Reusing existing control):\n\n\t", event, "\n\n\t");
+					control.setEnhancedView(this.enhancedView);
+					control.setUseIcons(this.useIcons);
+					control.setEvent (event);
+					control.show();
+				} else {
+					DEBUG && this.log ("\tHiding all-day event control.\n\n\t");
+					control.setEvent(null);
+					control.hide();
+					hidSomething = true;
 				}
-				DEBUG && this.log ("\tGrouping all-day event (Reusing existing control):\n\n\t", event, "\n\n\t");
-				control.setEvent (event);
-				control.show();
-			} else {
-				DEBUG && this.log ("\tHiding all-day event control.\n\n\t");
-				control.setEvent(null);
-				control.hide();
-				hidSomething = true;
 			}
-		}
-		hidSomething && this.$.allDayScroller.setScrollLeft(0);  //reset the scroll position all the way to the left, so we didn't leave the user on a blank area of the scroller
 		
+			hidSomething && this.$.allDayScroller.setScrollLeft(0);  //reset the scroll position all the way to the left, so we didn't leave the user on a blank area of the scroller
+		} else {
+			allDayHeader.getComponents().length && allDayHeader.destroyComponents();
+		}
 		// If we ran out of available controls, build some for the rest of the allDayEvents.
 		for (; controlIndex < numAllDay; ++controlIndex) {
 			event = allDayEvents[controlIndex];
@@ -442,11 +577,43 @@ enyo.kind({
 				calendar && (event.color = calendar.color);
 			}
 			DEBUG && this.log ("\tGrouping all-day event (Creating new control):\n\n\t", event, "\n\n\t");
-			allDayHeader.createComponent ({event:event});
+			if(this.inWeekView){
+				var eventView = {className:"event", watchCalendars:true, calendars:calendars};
+				eventView.event = event;
+				if(event.note){
+					var start=[];
+					var bgimage, start = (this.enhancedView && this.useIcons && event.note) && enyo.application.getNotesIconParts(event.note);
+					if (start && start[1]) {
+						var icon = start[1];
+						bgimage = "/media/internal/.scrims/ubercalendar/icon-" + icon + ".png";
+						//event && event.note && icon && bgimage && eventView && eventView.style= "background-color: " + bgimage; // + bgrepeat + bgposition;
+						//eventViews.createComponent (eventView);
+						var uberCont = bgimage && allDayHeader.createComponent({kind: enyo.HFlexBox, style:"font-size:10px;font:prelude;overflow:hidden;whitespace:nowrap;position:relative; height: 13px;", defaultKind: "calendar.EventView"});//, className:"events"});
+						eventView.owner = allDayHeader;
+						bgimage && uberCont.createComponent({kind: enyo.Image, className:"ubermonthicon", style:"position:relative;height:10;width:10;top:-1px;left:-3px;z-index:3;padding: 0px;margin:0px;", owner: allDayHeader, src:bgimage});
+						uberCont && uberCont.createComponent(eventView);
+					} else{
+						var uberCont = allDayHeader.createComponent({kind: enyo.HFlexBox, style:"font-size:10px;font:prelude;overflow:hidden;whitespace:nowrap;position:relative; height: 13px;", defaultKind: "calendar.EventView"});//, className:"events"});
+						eventView.owner = allDayHeader;
+						uberCont && uberCont.createComponent(eventView);
+						//allDayHeader.createComponent (eventView);
+					}
+				} else {
+					//eventView.owner = allDayHeader;
+					var uberCont = allDayHeader.createComponent({kind: enyo.HFlexBox, style:"font-size:10px;font:prelude;overflow:hidden;whitespace:nowrap;position:relative; height: 13px;", defaultKind: "calendar.EventView"});//, className:"events"});
+					eventView.owner = allDayHeader;
+					//bgimage && uberCont.createComponent({kind: enyo.Image, className:"ubermonthicon", style:"position:relative;height:10;width:10;top:-6px;left:-3px;z-index:3;padding: 0px;margin:0px;", owner: allDayHeader, src:bgimage});
+					uberCont && uberCont.createComponent(eventView);
+					//allDayHeader.createComponent (eventView);
+				}
+				//hasRenderContent ? allDayHeader.renderContent() : allDayHeader.render()
+			} else {
+				allDayHeader.createComponent ({event:event, enhancedView: this.enhancedView, useIcons:this.useIcons});
+			}
 		}
 
 		(numAllDay > 0) && (hasRenderContent ? allDayHeader.renderContent() : allDayHeader.render());	// renderContent does less work but the enyo team is deprecating it...
-		this.$.allDayContainer.setShowing ((numAllDay > 0) || !!this.inWeekView);
+		if(!this.inWeekView) {this.$.allDayContainer.setShowing ((numAllDay > 0) || !!this.inWeekView);}
 
 		var timedEvents = events.events;
 		var numTimed = timedEvents.length;		
@@ -459,5 +626,8 @@ enyo.kind({
 		}
 		timedEvents.sort(this.groupSort);
 		this.eventGroup.setEvents (timedEvents);
+		if(!this.inWeekView) {
+			this.updateCurrentHour ({scroll: true});
+		}
 	}
 });//End:calendar.day.DayView Kind
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/depends.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/depends.js
index ec0474c..06d92df 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/depends.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/depends.js
@@ -10,6 +10,9 @@ enyo.depends
 ,	"AppMenu.js"
 ,	"AppView.css"
 ,	"AppView.js"
+,	"MiniMonth.js"
+,	"UberAgenda.js"
+,	"week.js"
 ,	"header/CalendarList.css"
 ,	"header/CalendarList.js"
 ,	"day/"
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DeleteConfirm.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DeleteConfirm.js
index c640035..75eb995 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DeleteConfirm.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DeleteConfirm.js
@@ -18,8 +18,9 @@ enyo.kind({
 			{content: $L("This is a repeating event"), className: "dialog-text"},
 			{kind: enyo.VFlexBox, components: [
 				{kind: enyo.Button, caption: $L("Delete The Whole Series"), onclick: "deleteSeries", className: "enyo-button-negative"},
-				{kind: enyo.Button, caption: $L("Delete This Event Only"), 	onclick: "deleteSingle", className: "enyo-button-negative"},
-				{kind: enyo.Button, caption: $L("Cancel"), 					onclick: "cancelClicked", className: "enyo-button-light"}
+				{kind: enyo.Button, caption: $L("Delete This Event Only"), 	onclick: "deleteSingle", className: "enyo-button-light"},
+				{kind: enyo.Button, caption: $L("Delete This And Future"), 	onclick: "deleteThisAndFuture", className: "enyo-button-negative"},
+				{kind: enyo.Button, caption: $L("Cancel"), 					onclick: "cancelClicked", className: "enyo-button-dark"}
 			]}			
 		]},
 		{kind: enyo.VFlexBox, name: "simpleDeleteDialog", components: [
@@ -87,6 +88,38 @@ enyo.kind({
 		this.exitView();
 	},
 	
+	deleteThisAndFuture: function deleteThisAndFuture(){
+		var event = this.event;
+		if(event.dtstart === event.currentLocalStart){
+			//first event of series is the whole series
+			this.deleteSeries();
+			return;
+		}
+		if(event && event.rrule){
+			//figure out end of recurring
+			var currentCount, rrule = event.rrule;
+			if((!rrule.until || rrule.until === "Long.MAX_VALUE") && !rrule.count){
+				//forever
+				DEBUG && this.log("this and future was forever " + (new Date(event.currentLocalStart)).addDays(-1));
+				event.rrule.until = (new Date(event.currentLocalStart)).addDays(-1).getTime();
+			} else if(rrule.until) {
+				// until
+				DEBUG && this.log("this and future until " + (new Date(event.currentLocalStart)).addDays(-1));
+				event.rrule.until = (new Date(event.currentLocalStart)).addDays(-1).getTime();
+			} else if(!rrule.until && rrule.count){
+				// count
+				currentCount = Utilities.currentRRuleCountExcluding(event, event.currentLocalStart);
+				DEBUG && this.log("this and future current count:::: " + currentCount);
+				if(currentCount !== -1 && currentCount !== 0 ){
+					var oldCount = rrule.count;
+					event.rrule.count = currentCount;
+				}
+			}
+			enyo.application.databaseManager.updateEvent(event, this.deletedEvent, this.deletedEvent);
+		}
+		this.exitView();
+	},
+	
 	deleteSingle: function deleteSingle() {		
 		this.eventGUI && this.eventGUI.destroy();	// Remove the event from the GUI.
 		var event		= this.event
@@ -94,7 +127,8 @@ enyo.kind({
 		,	hasAttendees= attendees && !!(attendees.length)
 		,	isEditable	= Utilities.isEventEditable(event)
 		,	sendable	= enyo.application.calendarsManager.isInvitationEnabledCalendar(event.calendarId)
-		,	shouldNotify = (hasAttendees && sendable && isEditable && event.status == "CONFIRMED")		
+		,	shouldNotify = (hasAttendees && sendable && isEditable && event.status == "CONFIRMED")
+		,	notGoogle = (enyo.application.calendarsManager.getCalAccountKind(event.calendarId) != "com.palm.calendarevent.google:1")
 		;
 
 		if (event.rrule && event.rrule.freq){
@@ -102,7 +136,7 @@ enyo.kind({
 			var date = event.currentLocalStart || event.dtstart; //TODO: Use currentLocalStart
 			Utilities.addException(event, new Date(date));
 
-			if(shouldNotify){	// Only create a child event to mark the deletion if we need to send a notification
+			if(shouldNotify && notGoogle){	// Only create a child event to mark the deletion if we need to send a notification
 				var deletedChild = this.createDeletedChild(date);
 				enyo.application.databaseManager.updateParentAddChild (event, deletedChild, this.deletedEvent, this.deletedEvent, true);
 			}
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DetailView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DetailView.js
index d28ca07..afd4099 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DetailView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/DetailView.js
@@ -279,7 +279,7 @@ enyo.kind({
 
 		ui.noteContainer.setShowing(!!(event.note && event.note.length));
 
-		var isReadOnly = enyo.application.calendarsManager.isCalendarReadOnly(event.calendarId);
+		var isReadOnly = (enyo.application.calendarsManager.isCalendarReadOnly(event.calendarId) || (event.uberCached && event.uberCached));
 		ui.btnDelete.setShowing(!isReadOnly);
 		ui.btnEdit.setShowing(!isReadOnly);
 	},
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/EditView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/EditView.js
index e1dd533..8ce5b6d 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/EditView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/EditView.js
@@ -33,6 +33,17 @@ enyo.kind({
 });
 
 enyo.kind({
+	name: "calendar.edit.UberCatPicker",
+	kind: enyo.CustomListSelector,
+	itemKind: "calendar.edit.UberIconItem",
+	setItemProps: function(inItem) {
+		this.inherited(arguments);
+		this.item.setIcon(inItem.iconSrc);
+		this.item.setLabel(inItem.label);
+	}
+});
+
+enyo.kind({
 	name: "calendar.edit.ColorNameIconItem",
 	kind: enyo.MenuItem,
 	className: "edit",
@@ -74,6 +85,554 @@ enyo.kind({
 });
 
 enyo.kind({
+	name: "calendar.edit.UberTimezoneConverter",
+	kind: enyo.VFlexBox,
+	//style: "height:400px",
+	
+	events: {
+		onTimezoneSelect: ""
+	},
+	
+	published: {
+		timeStamp: null		//event timestamp
+	,	uZones: []			//(array of tz objects) current timezones in tz manager
+	,	eventTimezone: null	//(object) current timezone of event
+	},
+	
+	components: [
+		{kind: enyo.HFlexBox, components: [
+			{name: "ConverterHeader", content: $L("Current Timezone"), style:"font:18px prelude; padding:0px"}
+		]},
+		{kind: enyo.RoundedSearchInput, name: 'ucTzSearch', hint: 'Search', spellcheck: false, autocorrect: false, autoCapitalize: "lowercase", changeOnInput: true, keypressInputDelay: 100, onCancel:"SearchCnx", onchange:"SearchChanging", showing:false},
+		{name: "tzGrpTitle", kind: enyo.RowGroup, caption: $L("Timezones in calendars"), components:[
+			{kind: enyo.VFlexBox, flex:1, components:[
+				{name:'uberTzList', kind: enyo.VirtualList, style:"background:#fff;height:200px;", onSetupRow:"buildTzList", components:[
+					{kind: enyo.RowItem, tapHighlight: true, onclick:"timezoneClick", components:[
+						{kind: enyo.VFlexBox, components:[
+							{kind:enyo.HFlexBox, style:"padding:0px;", components: [
+								{name: "country", kind: enyo.Control, style:"font:14px prelude"}
+							]},
+							{kind:enyo.HFlexBox, style:"padding:0px;", components: [
+								{name: "city", kind: enyo.Control, style:"font:13px prelude"}
+							]},
+							{kind:enyo.HFlexBox, style:"padding:0px;", components: [
+								{name: "description", kind: enyo.Control, style:"font:12px prelude"}
+							]}
+						]}
+					]}
+				]}
+			]}
+		]},
+		{kind: enyo.Button, caption: $L('Cancel'), onclick: "closeConverter"},
+		{kind: "PalmService", name:"getTimezones", service: "palm://com.palm.systemservice/", method:"getPreferenceValues", onFailure: "gotFailure", onResponse:"gotTimezones"},
+	],
+	
+	create: function create(){
+		this.inherited(arguments);
+		this.tzList = [];
+		this.listSearching = false;
+		this.searchTxt = "";
+		//console.error("converter created");
+		
+	},
+	
+	gotTimezones: function (inSender, inResponse, inRequest){
+		this.tzList = [];
+		var len = inResponse.timeZone && inResponse.timeZone.length;
+		for (var i = 0; i < len; i++) {
+			var obj = {}, tZ = inResponse.timeZone[i];
+			obj.Country = $L(tZ.Country);
+			obj.City = $L(tZ.City);
+			obj.CountryAndCity = $L(tZ.Country) +' '+ $L(tZ.City);
+			obj.Description = $L(tZ.Description);
+			obj.originalItem = tZ;
+			obj.ZoneID = tZ.ZoneID;
+			obj.needMore = false;
+			this.tzList.push(obj);
+		}
+		this.tzList.sort(this.compareCountry.bind(this));
+		this.buildData();
+		this.$.uberTzList.punt();
+	},
+	
+	gotFailure: function(){
+		this.error("converter failed");
+	},
+	
+	buildData: function buildData(){
+		this.renderTzList = [];
+		if(this.listSearching && this.searchTxt){
+			var txt = this.searchTxt.toLowerCase(), searchList = [], tempList = this.tzList;
+			var attLen, len = tempList.length, item ={};
+			if(len){
+				for(var i=0; i <len; i++){
+					item = tempList[i];
+					if(item.Country.toLowerCase().indexOf(txt) !== -1 || item.City.toLowerCase().indexOf(txt) !== -1 || item.Description.toLowerCase().indexOf(txt)!==-1){
+						searchList.push(item);
+					}
+				}
+			}
+			this.renderTzList = searchList;
+		} else {
+			this.renderTzList = this.renderTzList.concat(this.tzList);
+		}
+	},
+	
+	buildTzList: function buildTzList(inSender, inIndex){
+		var tzItem = this.renderTzList[inIndex], ui = this.$;
+		if(tzItem){
+			ui.country.setContent(tzItem.Country);
+			ui.city.setContent(tzItem.City);
+			ui.description.setContent(tzItem.Description);
+			return true;
+		}
+	},
+	
+	closeConverter: function closeConverter(){
+		this.cleanupView();
+		if (enyo.isFunction (this.container.close)) {
+			this.container.close();
+		}
+	},
+	
+	uZonesChanged: function uZonesCanged (){
+		this.renderTzList = [];
+		if(this.uZones && this.uZones.length >0){
+			this.uberTzIds = [];
+			var len = this.uZones.length;
+			for(var i=0; i< len; i++){
+				var obj = {}, str, txt, result, patt = /\//;
+				str = obj.ZoneID = this.uZones[i].tz;
+				result = str.split(patt);
+				if(result && result.length === 2){
+					txt = $L(result[0]) + "/" + $L(result[1]);
+					obj.Description =  txt;
+				} else if (result && (result.length === 1 || result.length > 2)){
+					obj.Description =  $L(str);
+				}
+				obj.needMore = this.uZones[i].tz ? false : true;
+				this.uberTzIds.push(obj);
+			}
+			this.uberTzIds.push({Description:$L("Tap to retrieve more timezones"), needMore: true});
+		}
+		this.renderTzList = this.uberTzIds;
+		this.$.uberTzList.punt();
+		//console.error("converter uZones changed:::: " + JSON.stringify(this.renderTzList));
+	},
+	
+	eventTimezoneChanged: function eventTimezone(){
+		if(this.eventTimezone && this.eventTimezone !== ""){
+			var result, txt, patt = /\//;
+			result = this.eventTimezone.split(patt);
+			if(result && result.length === 2){
+				txt = $L(result[0]) + "/" + $L(result[1]);
+			} else if (result && (result.length === 1 || result.length > 2)){
+				txt =  $L(this.eventTimezone);
+			}
+			txt = $L('Current Timezone') + ': ' + txt;
+			this.$.ConverterHeader.setContent(txt);
+		}
+		//console.error("converter timezone changed:::: " + this.eventTimezone);
+	},
+	
+	compareCountry: function(a,b) {
+		var nameA = a.CountryAndCity.toLocaleLowerCase();
+		var nameB = b.CountryAndCity.toLocaleLowerCase();
+		return nameA.localeCompare(nameB);
+	},
+	
+	SearchChanging: function SearchChanging(inSender, inEvent){
+		var txt = this.$.ucTzSearch.getValue();
+		if(txt !== "") {
+			this.listSearching = true;
+			this.searchTxt = txt;
+			this.buildData();
+			this.$.uberTzList.punt();
+		} else {
+			this.listSearching = false;
+			this.searchTxt = "";
+			this.buildData();
+			this.$.uberTzList.punt();
+		}
+		//console.log("search input txt:  "+ txt)
+	},
+	
+	timezoneClick: function timezoneClick(inSender, inEvent) {
+		var index = inEvent.rowIndex, tZ = this.renderTzList[index];
+		if(tZ && tZ !== undefined){
+			if(tZ.needMore){
+				this.$.getTimezones.call({key:"timeZone"});
+				this.$.ucTzSearch.setShowing(true);
+				this.$.tzGrpTitle.setCaption($L('Choose the nearest major city'));
+				this.buildData();
+				this.$.uberTzList.punt();
+				return;
+			} else {
+				this.cleanupView();
+				var tzMgr = enyo.application.cacheManager.eventManager.utils.timezoneManager;
+				var year = new Date(this.timeStamp).getFullYear();
+				var tzFuture = new Future();
+				if(tzMgr.hasTimezoneInfo(tZ.ZoneID, year)){
+					//console.error("starting we have info!!!");
+					this.doTimezoneSelect(tZ.ZoneID, year);
+				} else {
+					//console.error("starting do we have info???? " + tzMgr.hasTimezoneInfo(tZ.ZoneID, year));
+					tzFuture.nest(tzMgr.loadTimezones([tZ.ZoneID], [year]));
+					
+					tzFuture.then(this, function (join){
+						var result = join.result.returnValue;
+						//console.error("tz join result was ::: " + result);
+						//console.error("In join do we have info???? " + tzMgr.hasTimezoneInfo(tZ.ZoneID, year));
+						if(tzMgr.hasTimezoneInfo(tZ.ZoneID, year)){
+							this.doTimezoneSelect(tZ.ZoneID, year);
+							join.result = true;
+						}
+					});
+				}
+			}
+		}
+	},
+	
+	SearchCnx: function ucSearchDone(){
+		// empty and need to refresh list
+		this.$.ucTzSearch.setValue("");
+		this.listSearching = false;
+		this.searchTxt ="";
+		this.$.uberTzList.punt();
+	},
+	
+	cleanupView: function() {
+		this.$.ucTzSearch.setValue("");
+		this.$.ucTzSearch.setShowing(false);
+		this.listSearching = false;
+		this.searchTxt = "";
+		this.renderTzList = [];
+		this.tzList = [];
+		this.$.tzGrpTitle.setCaption($L('Timezones in calendars'));
+	}
+	
+});
+
+enyo.kind({
+	name: "calendar.edit.UberIconItem",
+	kind: enyo.MenuItem,
+	className: "edit",
+	published:{
+		value:"",
+		icon: "",
+		label: ""
+	},
+	chrome: [
+		{name: "item", kind: enyo.Item, tapHighlight: true, align: "center", onclick: "itemClick"}
+	],
+					
+	itemChrome: [
+		{kind: enyo.HFlexBox, 	flex: 1, components: [
+			{name: "caption", flex: 1, className:"color-space"},						
+			{name: "icon", kind: enyo.Image, className:"color-space"},
+			{name: "arrow", kind: enyo.CustomButton, toggling: false, showing: false, disabled: true} //only here because MenuItem parent is unhappy if it's missing
+		]}
+	],
+	create: function create(){
+		this.inherited(arguments);
+		this.validateItemChrome();
+		this.labelChanged();
+		this.iconChanged();
+	},
+	labelChanged: function labelChanged(){
+		this.$.caption.setContent(this.label);
+	},
+	iconChanged: function iconChanged(){
+		this.inherited(arguments);
+	},
+	openChanged: function openChanged(){}//MenuItem parent changes arrow properties in here. We don't want that.
+});
+
+enyo.kind({
+	name		: "calendar.edit.AdvancedCopy",
+	kind		: "VFlexBox",
+	
+	
+	published: {
+		personObj:		null
+	,	pickedArray:		null		//[{field: "note", replace: bool, data: string}, {...}] 
+	},
+
+	G11N: // Cached Globalization strings:
+	{	subject	: $L("Subject")
+	,	loc		: $L("Location")
+	,	note	: $L("Note")
+	,	replace	: $L("replace")
+	,	append	: $L("append")
+	,	notInUse: $L("Not in use")
+	},
+
+	components: [
+		{kind: enyo.RowGroup, style:"margin-top:-20; padding:2;", caption: $L("check to replace, clear to append"), components:[
+			{kind: enyo.HFlexBox, components:[
+				{content: $L("Event Subject"), style: "font: 12px prelude; padding: 2px 8px 10px 8px"}, 
+				{name:"subjectEdit", kind: enyo.CheckBox, checked:false, onChange:"chooseSubjectEdit"},
+				{content: $L("Event Location"), style: "font: 12px prelude; padding: 2px 8px 10px 8px"}, 
+				{name:"locationEdit", checked:false, onChange:"chooseLocationEdit", kind: enyo.CheckBox},
+				{content: $L("Event Note"), style: "font: 12px prelude; padding: 2px 8px 10px 8px"}, 
+				{name:"notesEdit", checked:false, onChange:"chooseNotesEdit", kind: enyo.CheckBox}
+			]}
+		]},
+		{name: "list", kind: enyo.VirtualList, pageSize:5, style:"padding:5px;", flex:1, onSetupRow: "listSetupRow", components: [
+				{kind: enyo.Item,  style:"padding:2px;", layoutKind: enyo.HFlexLayout, components:[
+					{name: "fieldData", flex:1, style:"font:13px prelude"},
+					{name: "fieldChoice", style:"font:13px prelude", kind: enyo.Button, onclick: "popFields"}
+				]}
+		]},
+		{name:"fieldPopup", kind:enyo.PopupList, lazy:true, showing:false, onSelect:"fieldChosen",
+				items: [ {caption: $L("Not in use"), value: "niu"}
+						,{caption: $L("Subject"), value: "sub"}
+						,{caption: $L("Location"), value:"loc"}
+						,{caption: $L("Note"), value:"note"}
+		]}
+	],
+	
+	constructor: function UberAdvancedCopy () {
+		this.inherited (arguments);
+	},
+	
+	create: function create () {
+		this.inherited (arguments);
+		this.personDataArray = [];
+		this.setupPickedArray();
+	},
+
+	destroy: function destroy () {
+		this.inherited (arguments);
+	},
+	
+	setupPickedArray: function setupPickedArray(){
+		var arr = [];
+		arr[0] = {field: "note", replace: false, data:""};
+		arr[1] = {field: "loc", replace: false, data:""};
+		arr[2] = {field: "subject", replace: false, data:""};
+		this.setPickedArray(arr);
+	},
+	
+	findType: function findType(type){
+		if(!!type){
+			var loc;
+			switch(type){
+							case "type_home":
+							loc = $L("HOME");
+							break;
+							
+							case "type_work":
+							loc = $L("WORK");
+							break;
+							
+							case "type_mobile":
+							loc = $L("MOBILE");
+							break;
+							
+							case "type_other":
+							default:
+							loc = $L("OTHER");
+							break;
+			}
+			return loc;
+		}
+		return false;
+	},
+	
+	personObjChanged: function personObjChanged(old){
+		//console.error(" person obj changed ::::::::::::: " + JSON.stringify(this.personObj));
+		if(this.personObj && this.personObj != undefined){
+			this.personDataArray = [];
+			var contact = this.personObj;
+			var obj, lname, fname, item, txt, fields = ["name", "emails", "phoneNumbers", "urls", "notes", "addresses", "organization"];
+			for(var prop in this.personObj){
+				
+				if(this.personObj.hasOwnProperty(prop)){
+					if(fields.indexOf(prop) !== -1){
+						
+						obj = {}, item = {}, txt ="";
+						obj = this.personObj[prop];
+						//console.error(" person obj changed ::::::::::::: " + prop + ": " + JSON.stringify(obj));
+						if(prop === "name"){
+							item.label = "";
+							item.field = "";
+							txt = (obj.givenName || "");
+							txt += txt !== "" ? " " + (obj.familyName || "") : (obj.familyName || ""); 
+							if(txt){
+								item.data = txt;
+								this.personDataArray.unshift(item);
+							}
+						} else if(prop === "organization"){
+							item.label = "";
+							item.field = "";
+							txt = (obj.name || ""); 
+							if(txt){
+								item.data = txt;
+								this.personDataArray.push(item);
+							}
+						} else if(prop === "notes"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									if(obj[i]){
+										item.label = "";
+										txt = (obj[i] || ""); 
+										if(txt){
+											item.data = txt;
+											this.personDataArray.push(item);
+										}
+									}
+								}
+							}
+						} else if(prop === "addresses"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									if(obj[i].type != undefined ) { 
+										if(obj[i].streetAddress || obj[i].locality || obj[i].country || obj[i].region || obj[i].postalCode) {
+											var txt = obj[i].streetAddress ? obj[i].streetAddress : "";
+											txt += obj[i].locality ? (txt !== "" ? ", " : "") + obj[i].locality : "";
+											txt += obj[i].region ? (txt !== "" ? ", " : "") + obj[i].region : "";
+											txt += obj[i].postalCode ? (txt !== "" ? ", " : "") + obj[i].postalCode : "";
+											txt += obj[i].country ? (txt !== "" ? ", " : "") + obj[i].country  : "";
+										}
+										
+										item.label = this.findType(obj[i].type);
+										if(txt){
+											item.data = txt;
+											this.personDataArray.push(item);
+										}
+									}
+								}
+							}
+						} else {
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									item.label = this.findType(obj[i].type) || "";
+									txt = obj[i].value;
+									if(txt){
+										item.data = txt;
+										this.personDataArray.push(item);
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+			//console.error(" person obj changed :::::::::::::  " + JSON.stringify(this.personDataArray));
+			this.$.list.punt();
+		}
+		
+	},
+	
+	listSetupRow: function listSetupRow(inSender, inIndex){
+		var txt, item = {}, len, ui = this.$;
+		item = this.personDataArray[inIndex];
+		//console.error(" list setup :::::::::::::  " + inIndex + ": len : " + len);
+		if(item){
+			//console.error(" list setup :::::::::::::  " + JSON.stringify(item));
+			txt = item.label ? item.label + ": " + item.data : item.data;
+			ui.fieldData.setContent(txt);
+			if(item.field && item.field !== undefined){
+				ui.fieldChoice.setCaption(this.G11N[item.field]);
+			} else {
+				ui.fieldChoice.setCaption(this.G11N.notInUse);
+			}
+			return true;
+		}
+	},
+	
+	popFields: function popFields(inSender, inEvent){
+		var ui = this.$;
+		//console.error("popFields pushed!!!!!!!!!!!!!!!!!!" + inEvent.rowIndex);
+		this.rowIndex = inEvent.rowIndex;
+		ui.fieldPopup.lazy && ui.fieldPopup.validateComponents();
+		ui.fieldPopup.openAtControl(inSender);
+		return true;
+	},
+	
+	fieldChosen: function fieldChosen(inSender, idx){
+		if(idx !== undefined && this.rowIndex !== undefined && this.rowIndex !== null){
+			var row = this.rowIndex;
+			var idex = parseInt(idx, 10);
+			if(idex === 0){
+				this.personDataArray[row].field = "notInUse";
+			} else if(idex === 1){
+				this.personDataArray[row].field = "subject";
+			} else  if(idex === 2){
+				this.personDataArray[row].field = "loc";
+			} else  if(idex === 3){
+				this.personDataArray[row].field = "note";
+			}
+			this.updatePickedArray();
+			this.rowIndex = null;
+			this.$.list.refresh();
+		}
+		return true;
+	},
+	
+	updatePickedArray: function genPickedArray(){
+		var txt, itemSub = "", itemLoc = "", itemNote = "", obj = {}, len;
+		len = this.personDataArray && this.personDataArray.length;
+		if(len && len > 0){
+			for(var i = 0; i < len; i++){
+				obj = {};
+				obj = this.personDataArray[i] && this.personDataArray[i];
+				if(obj.field && obj.field != undefined && obj.field !== "notInUse" && obj.data && obj.data != undefined && obj.data !== ""){
+					switch(obj.field){
+						case "note":
+						itemNote += (itemNote !== "" )? " " + obj.data : obj.data;
+						break;
+						
+						case "subject":
+						itemSub += (itemSub !== "" )? " " + obj.data : obj.data;
+						break;
+						
+						case "loc":
+						itemLoc += (itemLoc !== "" )? " " + obj.data : obj.data;
+						break;
+					}
+					//console.error("gen picked object ::::::::::::: " + itemLoc + "note::::::: " + itemNote);
+				}
+			}
+			
+		}
+		this.pickedArray[0].data = itemNote;
+		this.pickedArray[1].data = itemLoc;
+		this.pickedArray[2].data = itemSub;
+		this.pickedArray[0].replace = this.$.notesEdit.getChecked();
+		this.pickedArray[1].replace = this.$.locationEdit.getChecked();
+		this.pickedArray[2].replace = this.$.subjectEdit.getChecked();
+		//console.error("gen picked array ::::::::::::: " + JSON.stringify(this.pickedArray));
+	},
+	
+	chooseSubjectEdit: function chooseSubjectEdit(inSender, inState){
+		this.pickedArray[2].replace = inState;
+	},
+	
+	chooseLocationEdit: function chooseLocationEdit(inSender, inState){
+		this.pickedArray[1].replace = inState;
+	},
+	
+	chooseNotesEdit: function chooseNotesEdit(inSender, inState){
+		this.pickedArray[0].replace = inState;
+	},
+	
+});
+
+enyo.kind({
 	name		: "calendar.edit.EditView",
 	kind		: enyo.VFlexBox,
 	className	: "edit enyo-bg",
@@ -109,42 +668,57 @@ enyo.kind({
 			{name: "contentContainer", className: "content-container", components:[
 				{kind:enyo.RowGroup, className: "group", components:[
 					{name:"subject"		, kind: enyo.RichText, hint: $L("Event Name"), className: "event-name", onblur:"editSubject", autoLinking: true, allowHtml: true, onkeydown:"ignoreNewLines", inputClassName: "event-name-input", maxTextHeight: "23px"},
-					{name:"location"	, kind: enyo.Input, hint: $L("Event Location"), className: "event-location", onblur:"editLocation"},
-					{name:"calendarPicker", kind: "calendar.edit.CalendarSelector", onChange: "editCalendar", className: "list1", hideArrow: false}
+					{layoutKind: "HFlexLayout", components: [ 
+						{name:"location"	, flex:2, kind: enyo.Input, hint: $L("Event Location"), style:"margin-right:10px;", className: "event-location", onblur:"editLocation"},
+						{name:"pickButton", kind: enyo.IconButton, icon:"./edit/images/participants-icon.png", onclick:"popPicker"},
+						{name:"addressPicker", kind: "com.palm.library.contactsui.peoplePicker", onContactClick:"pickedPerson"}
+					]},
+					{name:"calendarPicker", kind: "calendar.edit.CalendarSelector", onChange: "editCalendar", className: "list1", hideArrow: false}					
 				]},
+				{name:"clearUndefinedEvtsBtn", kind: enyo.Button, className:"enyo-button-negative", onclick: "cleanUndefinedCalEvent", showing:false, caption: $L("Delete undefined calendar events"), align: "center"},
 				{kind: enyo.Group, className: "group", components: [
 					{kind: enyo.HFlexBox, align: "center", height: "48px", components: [
 						{name: "allDay", kind: enyo.CheckBox, style: "margin-left: 10px", onChange: "changeAllDay"},
-						{content: $L("All day event"), style: "padding-left: 5px;"}
+						{content: $L("All day event"), style: "padding-left: 5px;padding-right:15px;"},
+						{name:"uberMinuteInt", kind: "calendar.prefs.UberMinuteInt", value:5, onChange:"changeMinInt"}
 					]},
 					{components: [
 						{content: $L("From"), className: "edit-view-label"},
 						{kind: enyo.HFlexBox, className: "horizontal-space", components: [	
+							{name: "popCanvasBtn2", kind: enyo.IconButton, icon:"../images/header-icon-calendar.png", onclick:"popCanvas"},
 							{name: "startDate", kind: enyo.DatePicker, label: " ", onChange:"changeStartDate"},
 							{name: "startTimeDrawer", kind: enyo.BasicDrawer, animate:false, components: [
-								{name: "startTime", kind: enyo.TimePicker, label: " ", className:"spacer", onChange:"changeStartTime"}
-							]}	
+								{name: "startTime", kind: enyo.TimePicker, label: " ", minuteInterval:5, className:"spacer", onChange:"changeStartTime"}
+							]},
+							{name: "popTimeZoneBtn2", kind: enyo.IconButton, icon:"./edit/images/timedate-icon.png", onclick:"popTimezone"},
+							{name: "popDuraBtn2", kind: enyo.IconButton, icon:"./edit/images/repeat-icon.png", onclick:"popDura"}
+						]},
+						{name: "miniDrawer", open:false, kind:enyo.Drawer, components:[
+							{name: "editMiniMonth",kind:"calendar.uc.MiniMonth", linked:false, followViewDay:true, onMiniMonDateTap:"miniMonDateTap", followMe: ["prefs"]}	
 						]},
 						{content: $L("To"), className: "edit-view-label"},
 						{kind: enyo.HFlexBox, className: "horizontal-space", components: [
+							{name: "popCanvasBtn", kind: enyo.IconButton, icon:"../images/header-icon-calendar.png", onclick:"popCanvas"},
 							{name:"endDate", kind: enyo.DatePicker, label: " ", onChange:"changeEndDate"},
 							{name: "endTimeDrawer", kind: enyo.BasicDrawer, animate:false, components: [
-								{name: "endTime", kind: enyo.TimePicker, label: " ", className:"spacer", onChange:"changeEndTime"}
-							]}
+								{name: "endTime", kind: enyo.TimePicker, label: " ", minuteInterval:5, className:"spacer", onChange:"changeEndTime"}
+							]},
+							{name: "popTimeZoneBtn", kind: enyo.IconButton, icon:"./edit/images/timedate-icon.png", onclick:"popTimezone"},
+							{name: "popDuraBtn", kind: enyo.IconButton, icon:"./edit/images/repeat-icon.png", onclick:"popDura"}
 						]},
 					]},
 					{kind: enyo.HFlexBox, components: [
-						{kind: enyo.VFlexBox,  className: "horizontal-space repeat-alert-space", components: [
-							{content: $L("Repeat"), className: "edit-view-label"},
-							{ kind: enyo.HFlexBox, style: "margin-left: 6px;", components: [
-								{kind: "Button",  className: "enyo-button-light list-selector", components: [
-									{kind: enyo.HFlexBox, components: [
+						{kind: enyo.VFlexBox, style:"max-width:30%;padding-left: 6px;", className: "horizontal-space repeat-alert-space", components: [
+							{content: $L("Repeat"),style:"max-width:100%;", className: "edit-view-label"},
+							{ kind: enyo.HFlexBox,style:"max-width:100%;", components: [
+								{kind: "Button",style:"max-width:100%;",  className: "enyo-button-light list-selector", components: [
+									{kind: enyo.HFlexBox, style:"min-width:100%;", components: [
 										// {kind: enyo.Image, src: "edit/images/repeat-icon.png", style: "margin: 0px 4px;"},
 										{	name	: "repeat"
 										,	kind	: enyo.CustomListSelector
 										,	value	: "never"
 										,   label   : ""
-										,   hideArrow: false
+										,   hideArrow: true
 										,	onSelect: "editRepeat"
 										,	className: "alert-list"
 										,	items	:
@@ -159,14 +733,24 @@ enyo.kind({
 								]}
 							]}
 						]},
-						{kind: enyo.VFlexBox, components: [
-							{content: $L("Alerts"), className: "edit-view-label"},
-							{ kind: enyo.HFlexBox, style: "margin-left: 6px;", components: [
-								{kind: "Button",  className: "enyo-button-light list-selector", components: [
-									{ kind: enyo.HFlexBox, components: [
+						{kind: enyo.VFlexBox,  style:"max-width:30%;padding-left: 6px;margin-right:12px;", components: [
+							{content: $L("Alerts"),style:"max-width:100%;", className: "edit-view-label"},
+							{ kind: enyo.HFlexBox,style:"max-width:100%;", components: [
+								{kind: "Button",style:"max-width:100%;", className: "enyo-button-light list-selector", components: [
+									{ kind: enyo.HFlexBox, style:"max-width:100%;", components: [
 										//{kind: enyo.Image, src: "edit/images/reminder-icon01.png", style: "margin: 8px 4px 0px;"},
-										{name: "reminderTimed", kind: "calendar.prefs.TimedReminderSelector", value: "none", onChange:"editReminder",   className: "alert-list", label:"", hideArrow: false},
-										{name: "reminderAllDay", kind: "calendar.prefs.AllDayReminderSelector", value: "none", onChange:"editReminder", className: "alert-list", label:"", hideArrow: false}
+										{name: "reminderTimed",style:"min-width:100%;", kind: "calendar.prefs.TimedReminderSelector", value: "none", onChange:"editReminder",   className: "alert-list", label:"", hideArrow: true},
+										{name: "reminderAllDay",style:"min-width:100%;", kind: "calendar.prefs.AllDayReminderSelector", value: "none", onChange:"editReminder", className: "alert-list", label:"", hideArrow: true}
+									]}
+								]}
+							]}
+						]},
+						{kind: enyo.VFlexBox,  style:"max-width:30%;padding-left: 6px;margin-right:6px;", components: [
+							{content: $L("Icons"),style:"max-width:100%;", className: "edit-view-label"},
+							{ kind: enyo.HFlexBox,style:"max-width:100%;", components: [
+								{name:"iconPickerBtn",style:"max-width:100%;",kind: "Button", className: "enyo-button-light list-selector", components: [
+									{ kind: enyo.HFlexBox, style:"max-width:100%;", components: [
+										{name:"iconPicker",style:"min-width:100%;", kind: "calendar.edit.UberCatPicker", onChange: "editIcon", className: "alert-list", hideArrow: true}
 									]}
 								]}
 							]}
@@ -182,23 +766,53 @@ enyo.kind({
 
 				{kind: enyo.RowGroup, onclick:"focusNote", components: [
 					{name: "note", kind: enyo.RichText, hint: $L("Event Notes"), autoLinking: true, className: "note", onblur:"editNote", alwaysLooksFocused:true}	//HACK because onblur sux with back gesture!
-				]},
-				{name:"btnDelete", className:"enyo-button-negative btn-del-edit", kind: enyo.Button, onclick: "closeView", showing:false, caption: $L("Delete"), align: "center"}
+				]}
+				//{name:"btnDelete", className:"enyo-button-negative btn-del-edit", kind: enyo.Button, onclick: "closeView", showing:false, caption: $L("Delete"), align: "center"}
 			]}
 		]},
 		{name:"repeatViewPopup", kind: enyo.ModalDialog, caption: $L("Set Custom Repeat"), className: "enyo-modaldialog-customWidth", modal:true, scrim:true, showing:false, components: [
 			{name:"repeatView", kind:"calendar.edit.RepeatView", onExit:"closeView", onRepeatChange:"setupRepeatValue"}
 		]},
+		{name:"timezoneViewPopup", kind: enyo.ModalDialog, caption: $L("Convert time"), modal:true, scrim:true, showing:false, components: [
+			{name:"tzConverter", kind:"calendar.edit.UberTimezoneConverter", onTimezoneSelect:"setPickedTimezone"}
+		]},
 		{name: "repeatChangeDialog", kind: enyo.ModalDialog, scrim:true, showing:false, components: [
-			{name: "repeatChangeConfirm", kind:"calendar.edit.RepeatChangeConfirm", onSave:"prepToSaveEvent"}
+			{name: "repeatChangeConfirm", kind:"calendar.edit.RepeatChangeConfirm", onSave:"prepToSaveEvent", onChangeThisAndFuture: "changeThisAndFuture"}
+		]},
+		{name: "uberAdvancedCopy", kind: enyo.ModalDialog, style:"width:430px; height:400px;", showing:false, components: [
+			{kind: enyo.VFlexBox, components:[
+				{name: "uberAdvancedChoices", style:"width:390px; height:280px;", kind:"calendar.edit.AdvancedCopy" },
+				{kind: enyo.HFlexBox, components:[
+					{kind: enyo.Button, flex:1, caption: $L("Cancel"), className: "enyo-button-dark", onclick: "CnxAdv"},
+					{kind: enyo.Button, flex:1, caption: $L("Done"),  className: "enyo-button-affirmative", onclick: "pickedAdvCopy"}
+				]}
+			]}
 		]},
 		{kind: enyo.Toolbar, className: "toolbar1 enyo-toolbar-light", components: [
 			{kind: enyo.Button, name: "btnCancel", caption: $L("Cancel"), 	onclick: "closeView", 	className: "enyo-button-light btn-cancel"},
+			{name:"btnDelete2", className:"enyo-button-negative", style:"min-width: 230px;", kind: enyo.Button, onclick: "closeView", showing:false, caption: $L("Delete")},
 			{kind: enyo.Button, name: "btnDone", 	caption: $L("Done"), 	onclick: "closeView", 	className: "enyo-button-dark btn-done"}
 		]},
 		{kind:"ApplicationEvents"
 		,	onWindowHidden: "windowHiddenHandler"
-		}
+		},
+		{name: "uberAddChoices", kind: enyo.ModalDialog, caption: $L("Choose an address"), scrim:true, showing:false, components: [
+			{kind: enyo.VFlexBox, components:[
+				{name: "uberChoices", content:"Hello", kind:enyo.VFlexBox },
+				{kind: enyo.Button, caption: $L("Cancel"),  className: "enyo-button-dark", onclick: "pickCnx"},
+			]}
+		]},
+		{name:"locPopup", kind:enyo.PopupList, onSelect:"uberLocActionChosen",
+				items: [{caption: $L("Insert address"), value:"add"}
+						,{caption: $L("Advanced copy"), value:"edit"}
+						,{caption: $L("Replace location"), value:"edit"}
+						,{caption: $L("Map location"), value:"edit"}
+						,{caption: $L("Clear location"), value: "clear"}
+						
+		]},
+		{name:"duraPopup", kind:enyo.PopupList, onSelect:"duraChosen",
+				items: [{caption: "Hello", value:"hi"}
+		]}
 	],//end EditView components
 
 	create: function create () {
@@ -223,6 +837,13 @@ enyo.kind({
 		,	customMonthly	: $L("Custom Monthly")
 		,	customYearly	: $L("Custom Yearly")
 		};
+		this.tzMgr = enyo.application.cacheManager.eventManager.utils.timezoneManager;
+		var prefs = enyo.application.prefsManager.getPrefs();
+		if(prefs && prefs.uberMinuteInt){
+			this.$.uberMinuteInt.setValue(prefs.uberMinuteInt);
+			this.$.startTime.setMinuteInterval(prefs.uberMinuteInt);
+			this.$.endTime.setMinuteInterval(prefs.uberMinuteInt);
+		}
 	},
 
 	destroy: function destroy () {
@@ -256,6 +877,7 @@ enyo.kind({
 
 	eventChanged: function eventChanged (oldEvent) {
 		var event = this.event;
+
 		if (!event) { return; }
 
 		event.event													// This event is likely an event's GUI because it contains an event object:
@@ -275,6 +897,13 @@ enyo.kind({
 			subject = enyo.string.runTextIndexer(subject);
 		}
 		
+		if(event && event.color === undefined){
+			var calmgr = enyo.application.calendarsManager;
+			console.error("event calId: " + event.calendarId+", cal color: "+ calmgr.getCalColor(event.calendarId));
+			ui.clearUndefinedEvtsBtn.setShowing(true);
+		} else {
+			ui.clearUndefinedEvtsBtn.setShowing(false);
+		}
 		this.undoEvent				= new CalendarEvent (event);	// undoEvent is used to reset the event if the user cancel's editing.
 		this.undoEvent.color		= event.color;					// Add the event color to undoEvent since it is sanitized out above.
 		this.undoEvent.indexedNote	= indexedNote;					// Add the cached indexed note to undoEvent, no need to process again if nothing changed
@@ -282,14 +911,14 @@ enyo.kind({
 		ui.subject	.setValue	(subject	||	"");
 		ui.location	.setValue	(event.location	||	"");
 		ui.note		.setValue	(indexedNote);
-		ui.btnDelete.setShowing ("_id" in event);
-
+		//ui.btnDelete.setShowing ("_id" in event);
+		ui.btnDelete2.setShowing ("_id" in event);
 		isNaN (event.currentLocalStart)	&& (event.currentLocalStart	= event.dtstart);
 		isNaN (event.currentLocalEnd)	&& (event.currentLocalEnd	= event.dtend);
 
 		ui.editHeader.setContent (("_id" in event) ? this.G11N.header.Edit : this.G11N.header.New);
 		this.setupCalendarPicker (event.calendarId);		
-
+		this.setupIcons(event.note);
 		//pickerStart and pickerEnd are the values displayed by the 
 		//time and date pickers.  If they change, they'll be merged back on to
 		//the event before we save.
@@ -297,6 +926,8 @@ enyo.kind({
 		this.pickerEnd   = event.currentLocalEnd;
 		var start = new Date (this.pickerStart);
 		var end   = new Date (this.pickerEnd);		
+		ui.editMiniMonth.setViewDay(start);
+		this.rmlastBtn = null;
 		ui.startDate.setValue	(start);
 		ui.startTime.setValue	(start);
 
@@ -305,8 +936,9 @@ enyo.kind({
 
 		ui.allDay			.setChecked	(!!event.allDay);					
 		ui.startTimeDrawer	.setOpen	(!event.allDay);
+		ui.popTimeZoneBtn2	.setShowing (!event.allDay);
 		ui.endTimeDrawer	.setOpen	(!event.allDay);
-
+		ui.popTimeZoneBtn	.setShowing (!event.allDay);
 		Utilities.findEventOrganizer(event);
 
 		this.setupRepeatValue();
@@ -347,6 +979,7 @@ enyo.kind({
 			this.startDateOld	=	this.endDateOld	= null;
 			this.pickerStart	=	this.pickerEnd	= null;
 			enyo.call(document.activeElement, "blur");
+			ui.miniDrawer.close();
 			
 			if (this.hasCustomReminderItem && this.hasCustomReminderItem.selector) {
 				var	selector	= this.hasCustomReminderItem.selector
@@ -389,7 +1022,8 @@ enyo.kind({
 				}
 				break;	
 
-			case ui.btnDelete:
+			//case ui.btnDelete:
+			case ui.btnDelete2:
 				this.doDelete (this.eventGUI || this.event);
 				break;
 
@@ -434,6 +1068,451 @@ enyo.kind({
 		this.$.contentScroller.setScrollTop (0);	// Reset the scroll position.
 	},
 
+	changeMinInt: function changeMinInt(inSender, inValue, inOldValue){
+		if(inValue !== inOldValue){
+			this.$.startTime.setMinuteInterval(inValue);
+			this.$.endTime.setMinuteInterval(inValue);
+		}
+	},
+	
+	miniMonDateTap: function(inSender, inValue){
+		//do something
+		if(this.rmlastBtn != null && this.rmlastBtn == "popCanvasBtn2") {
+			// start date
+			this.$.startDate.setValue(inValue);
+			this.changeStartDate();
+		} else if(this.rmlastBtn != null && this.rmlastBtn == "popCanvasBtn") {
+			// end date
+			this.$.endDate.setValue(inValue);
+			this.changeEndDate();
+		}
+		DEBUG && this.log("edit view mini month date tapped", inValue);
+	},
+	
+	popPicker: function popPicker(inSender, inValue){
+		//console.error("popPicker pushed!!!!!!!!!!!!!!!!!!");
+		var prevLoc;
+		prevLoc = this.$.location.getValue();
+		if(prevLoc !== undefined && prevLoc !== "" && prevLoc !== null){
+			this.$.locPopup.lazy && this.$.locPopup.validateComponents();
+			this.$.locPopup.setItems([{caption: $L("Insert address"), value:"add"}
+						,{caption: $L("Advanced copy"), value:"edit"}
+						,{caption: $L("Replace location"), value:"edit"}
+						,{caption: $L("Map location"), value:"edit"}
+						,{caption: $L("Clear location"), value: "clear"}
+						
+					]);
+			this.$.locPopup.validateComponents();
+			this.$.locPopup.openAtControl(inSender);
+		} else {
+			this.$.locPopup.lazy && this.$.locPopup.validateComponents();
+			this.$.locPopup.setItems([
+						{caption: $L("Insert address"), value:"add"}
+						,{caption: $L("Advanced copy"), value:"edit"}
+					]);
+			this.$.locPopup.validateComponents();
+			this.$.locPopup.openAtControl(inSender);
+			//this.$.addressPicker.pickPerson();
+		}
+	},
+	
+	uberLocActionChosen: function uberLocActionChosen(inSender, inSelected){
+		var ui = this.$;
+		var op = inSelected;
+		this.uberEditAdvCopy = false;
+		this.$.locPopup.close();
+		if(op !== undefined){
+			if(op=="0"){
+				this.uberEditLoc = true
+				ui.addressPicker.pickPerson();
+			}else if(op=="1"){
+				this.uberEditAdvCopy = true;
+				ui.addressPicker.pickPerson();
+			}else if(op=="2"){
+				this.uberEditLoc = false;
+				ui.addressPicker.pickPerson();
+			}else if(op=="4"){
+				this.event.location = "";
+				ui.location.setValue("");
+			}else if(op=="3"){
+				var location = this.$.location.getValue();
+				enyo.application.share (
+					{	launch:
+						{	data:
+							{	appId			: "com.palm.app.maps"
+							,	address			: location
+							,	getDirections	: false
+							}
+						}
+					});
+			}
+		}
+		
+	},
+	
+	pickedPerson: function pickedPerson(inSender, inValue){
+		//console.error("picked person ::: " + JSON.stringify(inValue.addresses));
+		this.$.addressPicker.destroyAndClose();
+		var pers = inValue;
+		if(!pers){ return;}
+		var ui = this.$;
+		if(pers && this.uberEditAdvCopy === true){
+			ui.uberAdvancedCopy.lazy && ui.uberAdvancedCopy.validateComponents();
+			//ui.uberAdvancedChoices && ui.uberAdvancedChoices.validateComponents();
+			ui.uberAdvancedChoices.setPersonObj(pers);
+			ui.uberAdvancedCopy.openAt({top:0, left:300});
+			return;
+		}
+		if(pers && pers.name && pers.addresses){
+			var adds = pers.addresses;
+			var lname = pers.name.familyName || "";
+			var fname = pers.name.givenName || "";
+			this.uberAdds = [];
+			var prevLoc = ui.location.getValue();
+			if(adds && adds.length && adds.length > 0) {
+				if(adds.length === 1) {
+					if(adds[0].streetAddress || adds[0].locality || adds[0].country || adds[0].region || adds[0].postalCode) {
+						var txt = adds[0].streetAddress !== "" ? adds[0].streetAddress: "";
+						txt += adds[0].locality ? (txt !== "" ? ", " : "") + adds[0].locality : "";
+						txt += adds[0].region ? (txt !== "" ? ", " : "") + adds[0].region : "";
+						txt += adds[0].postalCode ? (txt !== "" ? ", " : "")+adds[0].postalCode : "";
+						txt += adds[0].country ? (txt !== "" ? ", " : "") + adds[0].country  : "";
+						
+						ui.location.setValue(this.uberEditLoc === true ? prevLoc + " " + txt : txt);
+						this.event.location = this.uberEditLoc === true ? prevLoc + " " + txt : txt;
+						return;
+					}
+				} else {// have more than one address, setup choices
+					for(var i=0; i < adds.length; i++) {
+						if(adds[i].type != undefined ) { 
+							if(adds[i].streetAddress || adds[i].locality || adds[i].country || adds[i].region || adds[i].postalCode) {
+								var txt = adds[i].streetAddress ? adds[i].streetAddress : "";
+								txt += adds[i].locality ? (txt !== "" ? ", " : "") + adds[i].locality : "";
+								txt += adds[i].region ? (txt !== "" ? ", " : "") + adds[i].region : "";
+								txt += adds[i].postalCode ? (txt !== "" ? ", " : "") + adds[i].postalCode : "";
+								txt += adds[i].country ? (txt !== "" ? ", " : "") + adds[i].country  : "";
+							}
+							
+							this.uberAdds.push({
+								label: adds[i].type,
+								address: txt
+							});
+						}
+					}
+				}
+				// double check more than one address, choose
+				var len = this.uberAdds.length;
+				if(len === 1) {
+					var txt = this.uberEditLoc === true ? prevLoc + this.uberAdds[0].address : this.uberAdds[0].address;
+					ui.location.setValue(this.uberEditLoc === true ? prevLoc + " " + txt : txt);
+					this.event.location = this.uberEditLoc === true ? prevLoc + " " + txt : txt;
+					return;
+				} else if(len > 1) {
+					var option = {};
+					ui.uberAddChoices.lazy && ui.uberAddChoices.validateComponents();
+					for(var i=0; i < len; i++) {
+						var loc;
+						switch(this.uberAdds[i].label){
+							case "type_home":
+							loc = $L("HOME");
+							break;
+							
+							case "type_work":
+							loc = $L("WORK");
+							break;
+							
+							case "type_other":
+							default:
+							loc = $L("OTHER");
+							break;
+						}
+						option ={value: i+"", kind: enyo.Button, caption:(loc + ": " + this.uberAdds[i].address), onclick: "pickedAdd", className: "enyo-button-light"};
+						option.owner = this;
+						ui.uberChoices.createComponent(option);
+						ui.uberAddChoices.validateComponents();
+					}
+					ui.uberAddChoices.openAtCenter();
+					return;
+				}
+			}
+		}
+	},
+	
+	pickedAdd: function pickedAdd(inSender){
+		//console.error("picked add :::: " + inSender.value);
+		var idx = parseInt(inSender.value);
+		var prevLoc = this.$.location.getValue();
+		var txt = this.uberEditLoc === true ? prevLoc + " " + this.uberAdds[idx].address : this.uberAdds[idx].address;
+		this.$.location.setValue(txt);
+		this.event.location = txt;
+		this.$.uberAddChoices.close();
+	},
+	
+	pickedAdvCopy: function pickedAdvCopy(inSender){
+		this.$.uberAdvancedChoices.updatePickedArray();
+		var options = [], len, obj, txt, field, indexedTxt, old;
+		options = this.$.uberAdvancedChoices.getPickedArray();
+		len = options && options.length;
+		if(len && len > 0){
+			for(var i =0; i< len;i++){
+				obj = {};
+				replace = false;
+				txt = "";
+				field = "";
+				old = "";
+				indexedTxt = "";
+				obj = options[i];
+				replace = !!obj.replace;
+				txt = obj.data || "";
+				field = obj.field || "";
+				switch(field){
+					case "note":
+						//indexedTxt = Utilities.getIndexedEventNote({note: txt, indexedNote: ""});
+						if(replace && txt){
+							this.$.note.setValue(txt);
+							this.event.note =txt;
+						} else if(txt){
+							old = this.event.note;
+							this.$.note.setValue(old + " " + txt);
+							this.event.note = old + " " + txt;
+						}
+						break;
+						
+					case "loc":
+						if(replace && txt){
+							this.$.location.setValue(txt);
+							this.event.location = txt;
+						} else if(txt){
+							old = this.event.location;
+							this.$.location.setValue(old + " " + txt);
+							this.event.location = old + " " + txt;
+						}
+						break;
+					
+					case "subject":
+						//indexedTxt = enyo.string.escapeHtml(txt);
+						//indexedTxt = enyo.string.runTextIndexer(indexedTxt)
+						if(replace && txt){
+							this.$.subject.setValue(txt);
+							this.event.subject = txt;
+						} else if(txt){
+							old = this.event.subject;
+							this.$.subject.setValue(old + " " + txt);
+							this.event.subject = old + " " + txt;
+						}
+						break;
+					default:
+					break;
+				}
+			}
+		}
+		this.$.uberAdvancedCopy.close();
+	},
+	
+	pickCnx: function pickCnx(inSender, inValue){
+		this.$.uberAddChoices.close();
+	},
+	
+	CnxAdv: function CnxAdv(inSender, inValue){
+		this.$.uberAdvancedCopy.close();
+	},
+	
+	popCanvas: function popCanvas(inSender){
+		DEBUG && this.log("edit view button pushed", inSender.name);
+		var curBtn = inSender.name;
+		var	date, ui = this.$;
+		if(curBtn == "popCanvasBtn2") {
+			date = ui.startDate.getValue();
+			ui.editMiniMonth.setViewDay(date);
+		} else {
+			date = ui.endDate.getValue();
+			ui.editMiniMonth.setViewDay(date);
+		}
+		if (curBtn == this.rmlastBtn)  {
+			ui.miniDrawer.setOpen(false);
+			this.rmlastBtn = null;
+		} else {
+			this.rmlastBtn = curBtn;
+			var state = ui.miniDrawer.getOpen();
+			if(!state) {
+				ui.miniDrawer.setOpen(true);
+			}
+		}
+	},
+	
+	popDura: function popDura(inSender){
+		var tempDate, ui = this.$, curBtn = inSender.name, prefs = enyo.application.prefsManager.prefs
+		,	prefsEndHour	= (new Date(prefs.endTimeOfDay)).getUTCHours()
+		,	prefsStartHour	= (new Date(prefs.startTimeOfDay)).getUTCHours()
+		,	prefsEndMin	= (new Date(prefs.endTimeOfDay)).getUTCMinutes()
+		,	prefsStartMin	= (new Date(prefs.startTimeOfDay)).getUTCMinutes()
+		,	setTS, newTS
+		;
+		this.duraLastBtn = curBtn;
+		this.duraItems = [{caption: $L("15 minutes"),	value: 15},
+					{caption: $L("30 minutes"),	value: 30},
+					{caption: $L("45 minutes"),	value: 45},
+					{caption: $L("1 hour"),	value: 60},
+					{caption: $L("90 minutes"), value: 90},
+					{caption: $L("2 hours"),	value: 120},
+					{caption: $L("3 hours"),	value: 180},
+					{caption: $L("4 hours"),	value: 240},
+					{caption: $L("8 hours"),	value: 480}
+					];
+		if(curBtn === "popDuraBtn2"){
+			tempDate = new Date(this.pickerStart);
+			if(tempDate.getHours() > prefsEndHour){tempDate.addDays(1);}
+			tempDate.setHours(prefsEndHour);
+			tempDate.setMinutes(prefsEndMin);
+			newTS = tempDate.getTime();
+			//console.error("edit end time value::::::::: " + ((newTS - this.pickerStart)/60000) + " , newTS ::: " +tempDate + " , prefsEndHour : " + prefsEndHour);
+			this.duraItems.push({caption: $L("Until end of day"), value: ((newTS - this.pickerStart)/60000)});
+		} else if(curBtn === "popDuraBtn"){
+			tempDate = new Date(this.pickerEnd);
+			if(tempDate.getHours() < prefsStartHour){tempDate.addDays(-1);}
+			tempDate.set({hour: prefsStartHour, minute: prefsStartMin});
+			newTS = tempDate.getTime();
+			//console.error("edit start time value::::::::: " + ((this.pickerEnd - newTS)/60000) + " , newTS ::: " +tempDate + " , prefsStartHour : " + prefsStartHour);
+			this.duraItems.push({caption: $L("From start of day"), value: ((this.pickerEnd - newTS)/60000)});
+		}
+		ui.duraPopup.lazy && ui.duraPopup.validateComponents();
+		ui.duraPopup.setItems(this.duraItems);
+		ui.duraPopup.validateComponents();
+		ui.duraPopup.openAtControl(inSender);
+	},
+	
+	duraChosen: function duraChosen(inSender, inSelected){
+		var ui = this.$, mins, oldDate, cDate, newDate;
+		ui.duraPopup.close();
+		var op = (inSelected !== undefined) ? parseInt(inSelected, 10) : -1;
+		if(op > -1){
+			mins = this.duraItems[op].value;
+			if(this.duraLastBtn === "popDuraBtn2"){
+				//move end
+				oldDate = new Date((ui.endDate.getValue()).getTime());
+				cDate = new Date(this.pickerStart + (mins*60*1000));
+				if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+					this.pickerEnd = cDate.getTime();
+					ui.endTime.setValue(new Date(cDate));
+				} else { //change time & date, time first
+					newDate = new Date(this.pickerEnd); 
+					newDate.setHours(cDate.getHours());
+					newDate.setMinutes(cDate.getMinutes());
+					this.pickerEnd = newDate.getTime();
+					ui.endTime.setValue(new Date(newDate));
+					this.pickerEnd = cDate.getTime();
+					ui.endDate.setValue(new Date(this.pickerEnd));
+				}
+			} else if(this.duraLastBtn === "popDuraBtn"){
+				//move start
+				oldDate = new Date((ui.startDate.getValue()).getTime());
+				cDate = new Date(this.pickerEnd - (mins*60*1000));
+				var oldDura = this.pickerEnd - this.pickerStart;
+				var convertedTS = cDate.getTime();
+				if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+					if((convertedTS < oldDate.getTime()) || ((convertedTS > oldDate.getTime()) && convertedTS - oldDate.getTime() < oldDura)){this.pickerStart = convertedTS;}
+					ui.startTime.setValue(cDate);
+				} else { //changing start date & time
+					//first change time, so it does not automatically change end date
+					newDate = new Date(this.pickerStart);
+					newDate.setHours(cDate.getHours());
+					newDate.setMinutes(cDate.getMinutes());
+					if((convertedTS < oldDate.getTime()) || ((convertedTS > oldDate.getTime()) && convertedTS- oldDate.getTime() < oldDura)){this.pickerStart = newDate.getTime();}
+					ui.startTime.setValue(newDate);
+					// time set now must change day & pickerstart time again for duration
+					if((convertedTS < oldDate.getTime()) || ((convertedTS > oldDate.getTime()) && convertedTS - oldDate.getTime() < oldDura)){
+						this.pickerStart = convertedTS;
+					}
+					ui.startDate.setValue(new Date(cDate))
+				}
+			}
+		}
+	},
+	
+	popTimezone: function popTimezone(inSender){
+		var year, ui = this.$, curBtn = inSender.name;
+		this.tzLastBtn = curBtn;
+		if(!ui.tzConverter){
+			//ui.timezoneViewPopup.createComponent({name:"tzConverter", kind:"calendar.edit.UberTimezoneConverter", onTimezoneSelect:"setPickedTimezone", owner: this});
+			ui.timezoneViewPopup.lazy && ui.timezoneViewPopup.validateComponents();
+		}
+		if(curBtn === "popTimeZoneBtn2") {
+			this.tzTS = new Date(ui.startTime.getValue());
+			ui.tzConverter.setTimeStamp(this.tzTS.getTime());
+		} else {
+			this.tzTS = new Date(ui.endTime.getValue());
+			ui.tzConverter.setTimeStamp(this.tzTS.getTime());
+		}
+		//console.error("set timestamp :::: " + new Date(ui.startTime.getValue()).getTime());
+		ui.tzConverter.setEventTimezone(this.event.tzId || this.tzId);
+		//console.error("pop timezone :::: " + curBtn);
+		var timezones = this.tzMgr.timezones;
+		var uberTZIds = [];
+		year = this.tzTS.getFullYear();
+		if(timezones && timezones[year]) {
+			var obj = timezones[year];
+			for(item in obj){
+				uberTZIds.push(obj[item]);
+			}
+		}
+		ui.tzConverter.setUZones(uberTZIds);
+		//console.error("set timestamp :::: " + JSON.stringify(uberTZIds));
+		ui.timezoneViewPopup.openAt({top: 0, left: 300});
+	},
+	
+	setPickedTimezone: function setPickedTimezone(inSender, tzId, year){
+		//console.error("set picked zone :::: " + tzId);
+		//this.$.timezoneViewPopup.destroyComponents();
+		//console.error("In set picked do we have info???? " + this.tzMgr.hasTimezoneInfo(tzId, year));
+		
+		this.convertedTS = this.tzMgr.convertTime(this.tzTS.getTime(), tzId,(this.event.tzId || this.tzId));
+		
+		this.$.timezoneViewPopup.close();
+		if(!this.convertedTS || isNaN(this.convertedTS) || this.tzLastBtn == null){
+			this.error("set picked zone :::: exiting" + this.convertedTS + ", button: " + this.tzLastBtn);
+			return;
+		}
+		var cDate = new Date(this.convertedTS), oldDate, oldDura, newDate, ui = this.$;
+		if(this.tzLastBtn !== null && this.tzLastBtn == "popTimeZoneBtn2") {
+			//start
+			oldDura = this.pickerStart - this.pickerEnd;
+			oldDate = new Date((ui.startDate.getValue()).getTime());
+			if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+				this.pickerStart = this.convertedTS;
+				ui.startTime.setValue(cDate);
+			} else { //changing start date & time
+				//first change time, so it does not automatically change end date
+				newDate = new Date(this.pickerStart);
+				newDate.set({hour: cDate.getHours(), minute: cDate.getMinutes()});
+				//newDate.setMinutes(cDate.getMinutes());
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && (this.convertedTS- oldDate.getTime()) < oldDura)){this.pickerStart = newDate.getTime();}
+				ui.startTime.setValue(new Date(cDate));
+				// time set now must change day & pickerstart time again for duration
+				this.pickerStart = this.convertedTS;
+				ui.startDate.setValue(new Date(cDate))
+				this.startOrEndDateModified = true;
+			}
+			
+		} else if(this.tzLastBtn !== null && this.tzLastBtn == "popTimeZoneBtn"){
+			//end
+			oldDate = new Date(ui.endDate.getValue());
+			if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+				this.pickerEnd = cDate.getTime();
+				ui.endTime.setValue(new Date(cDate));
+			} else { //change time & date, time first
+				newDate = new Date(this.pickerEnd); 
+				newDate.setHours(cDate.getHours());
+				newDate.setMinutes(cDate.getMinutes());
+				this.pickerEnd = newDate.getTime();
+				ui.endTime.setValue(new Date(newDate));
+				this.pickerEnd = cDate.getTime();
+				ui.endDate.setValue(new Date(this.pickerEnd));
+				this.startOrEndDateModified = true;
+			}
+		}
+		//this.startOrEndDateModified = true;
+	},
+
 	setupRepeatValue: function setupRepeatValue(sender, repeatType){
 		var	customType
 		,	event = this.event
@@ -485,6 +1564,7 @@ enyo.kind({
 		var reminderValue = Utilities.findReminderValue(event.alarm);
 		var items;
 		var alarmType = Utilities.isStandardAlarmValue(reminderValue, event.allDay);
+		//console.error("event alarms:  " + JSON.stringify({alarm: event.alarm}));
 		if(alarmType.isStandard && alarmType.isStandardForType && !allDayChanged){
 			selector.setValue(reminderValue);
 			return;
@@ -520,6 +1600,94 @@ enyo.kind({
 		selector.setValue(reminderValue);
 	},
 
+	setupIcons: function setupIcon (note){
+		//if(!note){return;}
+		var prefsMgr = enyo.application.prefsManager;
+		this.uberCatChoice = undefined;
+		this.userUberCats = [];
+		this.uberNoteCat = undefined;
+		var iconCookie =  prefsMgr && prefsMgr.getUberCalendarPrefs({name:"userUberIcons"});
+		var len = iconCookie && iconCookie.length;
+		if(iconCookie && len >0){
+			for(var i = 0; i<len; i++){
+				this.userUberCats.push(iconCookie[i]);
+			}
+		} else {
+			this.userUberCats = this.uberCategories.slice();
+		}
+		var wholeNote = note !== ("\n" || "<br />") ? note : "";
+		var customIcon = {};
+		var last = this.userUberCats.length;
+		//var patt = /((.|\n|\r|<br \/>)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r|<br \/>)*)/;
+		if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+			var result = enyo.application.getNotesIconParts(wholeNote);
+			if(result && result[1]) {
+				this.uberNotePrefix = result[0];
+				this.uberNoteSuffix = result[2];
+				this.uberNoteCat = result[1];
+				if(this.uberNoteCat) {
+					this.uberHasCat = true;
+					for(var i=0; i < this.userUberCats.length; i++) {
+						if(this.userUberCats[i].name === this.uberNoteCat) {
+							this.uberCatChoice = i;
+						}
+					}
+					if(this.uberCatChoice === undefined){
+						customIcon = {name: this.uberNoteCat, value: last +"", caption:$L(this.uberNoteCat), label:$L(this.uberNoteCat), icon:"/media/internal/.scrims/ubercalendar/icon-" + this.uberNoteCat + ".png"};
+						this.uberCatChoice = -1;
+					}
+				} else {
+					this.uberHasCat = false;
+					this.uberNotePrefix = "";
+					this.uberNoteSuffix = wholeNote;
+					this.uberCatChoice = last;
+				}
+			} else {
+				// no icon= statement, but has note
+				this.uberHasCat = false;
+				this.uberNotePrefix = "";
+				this.uberNoteSuffix = wholeNote;
+				this.uberCatChoice = last;
+			}
+		} else if(wholeNote == "") {
+			// no note
+			this.uberHasCat = false;
+			this.uberNotePrefix = "";
+			this.uberNoteSuffix = wholeNote;
+			this.uberCatChoice = last;
+		}
+		var ui = this.$;
+		this.uberCatItems = [];
+		for(var i=0;i<last;i++){
+			var name = this.userUberCats[i].name; //value MUST be a string
+			this.uberCatItems.push({name: name, value:i+"", caption: $L("Custom"), label:$L(name), icon:"/media/internal/.scrims/ubercalendar/icon-" + name + ".png"});
+		}
+		if (customIcon && this.uberCatChoice === -1 && this.uberHasCat) {
+			this.uberCatItems.push(customIcon);
+			this.uberCatChoice = last;
+			last +=1;
+		}
+		this.uberCatItems.push({caption: $L("No icon"), label: $L("No icon"), value: last+""});
+		ui.iconPicker.setItems(this.uberCatItems);
+		ui.iconPicker.setValue (this.uberCatChoice+""); //value is a String
+		if(this.uberHasCat){
+			ui.iconPickerBtn.addStyles("background-image: url(/media/internal/.scrims/ubercalendar/icon-" + this.uberNoteCat +".png); backgroun-position: left bottom; background-repeat: no-repeat;");
+		} else {
+			ui.iconPickerBtn.addStyles("background-image: ''");
+		}
+	},
+	
+	uberCategories: [
+		{name: 'birthday'}, // Do NOT Localize these
+		{name: 'car'}, // Do NOT Localize these
+		{name: 'doctor'}, // Do NOT Localize these
+		{name: 'holiday'}, // Do NOT Localize these
+		{name: 'kids'}, // Do NOT Localize these
+		{name: 'party'}, // Do NOT Localize these
+		{name: 'plane'}, // Do NOT Localize these
+		{name: 'vacation'}, // Do NOT Localize these
+	],
+
 	setupCalendarPicker: function setupCalendarPicker(calendarId){
 		var mgr = enyo.application.calendarsManager;
 		this.calendars = mgr.getCalendarsList({sorted: true, excludeReadOnly: true});
@@ -538,9 +1706,39 @@ enyo.kind({
 		}
 		ui.calendarPicker.setItems (items);
 		calendarId = calendarId || (this.event && this.event.calendarId) || enyo.application.prefsManager.getDefaultCalendar();		
+		
 		ui.calendarPicker.setValue (calendarId);	// calendarId will be undefined on accountsAndCalendarsChanged().
 	},
 
+	editIcon: function editIcon (picker, newIcon, oldIcon){
+		var value = this.$.iconPicker.getValue();
+		var last = this.uberCatItems.length - 1;
+		//console.log('chose: '+ newIcon + ', value: ' + value + " , choices: " + JSON.stringify(this.uberCatItems));
+		value = parseInt(value, 10);
+		this.uberCatChoice = value;
+		if(newIcon !== undefined && value !== last) {
+			if(!this.uberNoteCat || (this.uberNoteCat && this.uberNoteCat !== this.uberCatItems[this.uberCatChoice].name)) {
+				this.uberNoteCat = this.uberCatItems[this.uberCatChoice].name;
+				if(this.uberNoteCat){ 
+					if(this.uberNotePrefix !== undefined && this.uberNoteSuffix !== undefined) {
+						this.$.note.setValue(this.uberNotePrefix + "ICON=" + this.uberNoteCat + ";" + this.uberNoteSuffix);
+						this.event.note = this.uberNotePrefix + "ICON=" + this.uberNoteCat + ";" + this.uberNoteSuffix;
+						this.$.iconPickerBtn.addStyles("background-image: url(/media/internal/.scrims/ubercalendar/icon-" + this.uberNoteCat +".png); backgroun-position: left bottom; background-repeat: no-repeat;");
+					}
+				}
+			}
+		} else if(newIcon !== undefined && value === last) {
+			if(!this.uberNoteCat) { // no previous icon chose no icon
+				return;
+			} else if(this.uberNoteCat !== undefined) { // had icon=, match or not
+				this.$.note.setValue(this.uberNotePrefix + this.uberNoteSuffix);
+				this.uberNoteCat = false;
+				this.event.note = this.uberNotePrefix + this.uberNoteSuffix;
+				this.$.iconPickerBtn.addStyles("background-image:''");
+			}
+		}
+	},
+	
 	ignoreNewLines: function ignoreNewLines (inSender, inResponse) {
 		if (inResponse && inResponse.keyCode === 13) {
 			enyo.stopEvent(inResponse);
@@ -580,6 +1778,10 @@ enyo.kind({
 		,	end = new Date(timestamp);
 		ui.endTime.setValue (end);
 		ui.endDate.setValue (end);	
+		
+		if(this.rmlastBtn === "popCanvasBtn"){
+			this.$.editMiniMonth.setViewDay(end);
+		}
 	},
 	 
 	//Rules for date and time changes:
@@ -596,9 +1798,11 @@ enyo.kind({
 		,	event	= this.event
 		;
 		
-		time.setFullYear	(date.getFullYear());
-		time.setMonth		(date.getMonth());
-		time.setDate		(date.getDate());
+		//time.setFullYear	(date.getFullYear());
+		//time.setMonth		(date.getMonth());
+		//time.setDate		(date.getDate());
+		time.set({year: date.getFullYear(), month: date.getMonth(), day: date.getDate()});
+		//console.error("change start time: " + time +", date: " + date);
 
 		var duration = this.pickerEnd - this.pickerStart;
 		
@@ -622,10 +1826,18 @@ enyo.kind({
 		var event	= this.event;
 		
 		this.changeStartTime();
+		if(this.rmlastBtn === "popCanvasBtn2"){
+			this.$.editMiniMonth.setViewDay(this.$.startDate.getValue());
+		}
 			
 		if (this.pickerStart != this.undoEvent.dtstart && event.rrule && event.rrule.freq) {
 			var removeDate = this.oldStartValue || event.dtstart;
-			Utilities.updateByDayRRule (event.rrule, removeDate, this.pickerStart);
+			var oldDate = new Date(removeDate), newDate = new Date(this.pickerStart);
+			
+			if((oldDate.clearTime()).getTime() !== (newDate.clearTime()).getTime()) {
+				//only change repeat if the date changed
+				Utilities.updateByDayRRule (event.rrule, removeDate, this.pickerStart);
+			}
 		}
 		this.oldStartValue = this.$.startDate.getValue().getTime();
 	},
@@ -638,9 +1850,10 @@ enyo.kind({
 		,	changedDate = false
 		;
 
-		time.setFullYear	(date.getFullYear());
-		time.setMonth		(date.getMonth());
-		time.setDate		(date.getDate());
+		//time.setFullYear	(date.getFullYear());
+		//time.setMonth		(date.getMonth());
+		//time.setDate		(date.getDate());
+		time.set({year: date.getFullYear(), month: date.getMonth(), day: date.getDate()});
 		
 		if(time < this.pickerStart){			
 			//consider it as setting for next 12 hour clock
@@ -664,9 +1877,13 @@ enyo.kind({
 		,	changedDate = false
 		;
 
-		time.setFullYear	(date.getFullYear());
-		time.setMonth		(date.getMonth());
-		time.setDate		(date.getDate());
+		if(this.rmlastBtn === "popCanvasBtn"){
+			this.$.editMiniMonth.setViewDay(date);
+		}
+		//time.setFullYear	(date.getFullYear());
+		//time.setMonth		(date.getMonth());
+		//time.setDate		(date.getDate());
+		time.set({year: date.getFullYear(), month: date.getMonth(), day: date.getDate()});
 		
 		if(time < this.pickerStart){
 			var startDate = new Date(this.pickerStart);
@@ -731,7 +1948,9 @@ enyo.kind({
 		ui.startTime.setValue	(start);	
 		event.allDay = state;
 		ui.startTimeDrawer	.setOpen (!state);
+		ui.popTimeZoneBtn2	.setShowing (!state);
 		ui.endTimeDrawer	.setOpen (!state);
+		ui.popTimeZoneBtn	.setShowing (!state);
 		
 		this.setupReminder(event, true);
 	},
@@ -1053,6 +2272,7 @@ enyo.kind({
 	
 	editNote: function editNote (note) {
 		this.event.note = note && note.getText();
+		this.setupIcons(this.event.note);
 	},
 	
 	confirmSave: function confirmSave(){
@@ -1119,6 +2339,84 @@ enyo.kind({
 		this.saveEvent(parentId);
 		this.doExit(this.event);
 	},
+	
+	cleanUndefinedCalEvent: function(){
+		var calmgr = enyo.application.calendarsManager;
+		if(this.event.calendarId && (calmgr.getCalColor(event.calendarId) === undefined)){
+			function delCallback (response){
+				console.error("clean undefined events result: " + JSON.stringify(response));
+				if(response && response.returnValue === true && response.results && response.results.length){
+					enyo.application.cacheManager.eventManager.getEvents();
+					//enyo.application.cacheManager.buildEventCache(false);
+				}
+				this.closeView(this.$.btnCancel);
+			}
+			console.error("clean undefined event calId: " + this.event.calendarId);
+			delUndefCB = enyo.bind(this, delCallback);
+			this.dbManager.clearEventsFromDeletedCalendar(this.event.calendarId, delUndefCB);
+		}
+	},
+
+	changeThisAndFuture: function changeThisAndFuture(inSender, parentId){
+		if(this.event.dtstart === this.event.currentLocalStart){
+			//this is the first event so, this and future is the whole series
+			this.prepToSaveEvent(inSender, undefined);
+			return;
+		}
+		if(!this.undoEvent || !this.undoEvent.rrule){
+			//case of changing non-repeat to repeat or new event, then this is the series start
+			this.prepToSaveEvent(inSender, undefined);
+			return;
+		}
+		if(this.undoEvent && this.undoEvent.rrule){
+			//figure out end of recurring
+			var currentCount, rrule = this.undoEvent.rrule;
+			if((!rrule.until || rrule.until === "Long.MAX_VALUE") && !rrule.count){
+				//forever
+				//console.error("this and future was forever " + (new Date(this.pickerEnd)).addDays(-1));
+				this.undoEvent.rrule.until = (new Date(this.pickerEnd)).addDays(-1).getTime();
+			} else if(rrule.until) {
+				// until
+				//console.error("this and future until " + (new Date(this.pickerEnd)).addDays(-1));
+				this.undoEvent.rrule.until = (new Date(this.pickerEnd)).addDays(-1).getTime();
+			} else if(!rrule.until && rrule.count){
+				// count
+				currentCount = Utilities.currentRRuleCountExcluding(this.undoEvent, this.event.currentLocalStart);
+				//console.error("this and future current count:::: " + currentCount);
+				if(currentCount !== -1 && currentCount !== 0 ){
+					var oldCount = rrule.count;
+					this.undoEvent.rrule.count = currentCount;
+					this.event.rrule.count = oldCount - currentCount;
+				}
+			}
+			var thisAndFutureCB = enyo.bind(this, this.thisAndFutureCB, this.eventGUI);
+			this.dbManager ["updateEvent"] (this.undoEvent, thisAndFutureCB, this.saveEventFailed)
+		}
+		
+	},
+	
+	thisAndFutureCB: function thisAndFutureCB(eventGUI, response){
+		response.responses && (response = response.responses[1]);	// This is handling a batch response.
+		if(eventGUI){ //this is the old event's gui, need to update the rev number and refesh the display
+			if("_id" in this.undoEvent){
+				if(response.results[0].rev){ this.undoEvent._rev = response.results[0].rev;}
+				eventGUI.setEvent(this.undoEvent);
+			}
+		}
+		//make the edit view's event new
+		this.eventGUI = null;
+		this.undoEvent = null;
+		delete this.event._id;
+		delete this.event.parentId;
+		delete this.event.recurrenceId;
+		delete this.event.remoteId;
+		if("etag" in this.event){delete this.event.etag;}
+		this.event.dtstart = this.event.currentLocalStart = this.pickerStart;
+		this.event.dtend = this.event.currentLocalEnd = this.pickerEnd;
+		this.event.saveAsIs = true;
+		this.saveEvent();
+		this.doExit(this.event);
+	},
 
 	resetEventModels: function resetEventModels () {
 		this.event = this.undoEvent = this.eventGUI = null;		// Reset the event, "undo" event, and event GUI models.
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatChangeConfirm.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatChangeConfirm.js
index ef01f23..e2ed7d8 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatChangeConfirm.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatChangeConfirm.js
@@ -13,6 +13,7 @@ enyo.kind({
 	events:
 	{	onSave	: ""
 	,	onExit	: ""
+	,	onChangeThisAndFuture: ""
 	},
 
 	published:
@@ -22,9 +23,10 @@ enyo.kind({
 	components: [		
 		{content: $L("This is a repeating event"), className: "dialog-text"},
 		{kind: enyo.VFlexBox, components: [
-			{kind: enyo.Button, caption: $L("Change The Whole Series"), onclick: "changeSeries"},
-			{kind: enyo.Button, caption: $L("Change This Event Only"), 	onclick: "changeSingle"},
-			{kind: enyo.Button, caption: $L("Cancel"), 					onclick: "cancelClicked"}
+			{kind: enyo.Button, caption: $L("Change The Whole Series"), className: "enyo-button-dark", onclick: "changeSeries"},
+			{kind: enyo.Button, caption: $L("Change This Event Only"), className: "enyo-button-light", onclick: "changeSingle"},
+			{kind: enyo.Button, caption: $L("Change This And Future"), className: "enyo-button-dark", onclick: "changeThisAndFuture"},
+			{kind: enyo.Button, caption: $L("Cancel"),  className: "enyo-button-dark", onclick: "cancelClicked"}
 		]},
 		{kind:"ApplicationEvents"
 		,	onWindowHidden: "cancelClicked"
@@ -72,6 +74,11 @@ enyo.kind({
 		this.exitView();
 	},
 
+	changeThisAndFuture: function (){
+		this.doChangeThisAndFuture(this.event._id);
+		this.exitView();
+	},
+	
 	exitView: function exitView () {
 		DEBUG && this.log ("########## Exit RepeatChangeConfirm view.");
 		if (enyo.isFunction (this.container.close)) {
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatView.js
index fc46829..4f6ac87 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/edit/RepeatView.js
@@ -67,6 +67,9 @@ enyo.kind({
 				{name: "dateDrawer", kind: enyo.BasicDrawer, animate: true, open:false, components: [
 					{kind: enyo.Item, tapHighlight: false, style:"padding:0; border-bottom:0;", components: [
 						{name: "until", kind: enyo.DatePicker, label:"", onChange:"changeUntil", style: "margin: 0 0 10px 0;"}
+					]},
+					{kind:enyo.HFlexBox, pack:"center", align:"center", components:[
+							{name: "repMiniMonth",kind:"calendar.uc.MiniMonth", linked:false, followViewDay:true, onMiniMonDateTap:"miniMonDateTap", followMe: ["prefs"]}
 					]}
 				]},
 				{name: "countDrawer", kind: enyo.BasicDrawer, animate:true, open:false, components: [
@@ -101,10 +104,12 @@ enyo.kind({
 		this.types =
 		{	DAILY		:1
 		,	WEEKLY		:2
-		,	MONTHLYDATE :3
-		,	MONTHLYDAY	:4
+		,	MONTHLYDATE :3	// 1,5, 16,28
+		,	MONTHLYDAY	:4	// 1,2,3 M,TU,W
 		,	YEARLY		:5
-		,	LASTOFMONTH :6
+		,	LASTOFMONTH :6	//-1,-2,-3
+		,	LASTMONTHDOW:7	//-1, M,TU,W
+		,	MONTHLYEXT	:8	// multiple month days, i.e last work week day
 		};
 
 		var ui = this.$
@@ -184,6 +189,7 @@ enyo.kind({
 		var until = this.rrule.until;
 		var untilDate = (until) ? new Date(until) : new Date(this.currentDate);
 		ui.until.setValue(untilDate);
+		ui.repMiniMonth.setViewDay(untilDate);
 
 		var count = this.rrule.count || 10;
 		if(count > 50){
@@ -249,14 +255,22 @@ enyo.kind({
 		,	monthlyDate
 		,	monthlyDayTempl = new enyo.g11n.Template($L("Monthly on the #{nth} #{dayofweek}"))
 		,	monthlyDay
+		,	monthlyLastDoW
+		,	monthlyLastDay
+		,	monthlyLastDoWTempl = new enyo.g11n.Template($L("Monthly on the last #{dayOfWeek}"))
+		,	monthlyLastDayTempl = new enyo.g11n.Template($L("1#Monthly on the last day|2#Monthly on the 2nd to last day|3#Monthly on the 3rd to last day|3>#Monthly on the #{dowCount}th to last day"))
 		,	mdFmt = new enyo.g11n.DateFmt({date: 'medium', dateComponents: "md"})
 		//,	monthday = new Date(1970, month, dayOfMonth)
 		,	yearlyTempl = new enyo.g11n.Template($L("Yearly on #{monthday}"))
 		,	yearly
+		,	num
 		,	captions
 		,	i
 		,	j;
 
+		var ucLastDay = this.getIsLastProps(date.getTime());
+		this.hasUClastProps = false;
+
 		var items = [];
 
 		monthlyDate = monthlyDateTempl.evaluate({
@@ -275,8 +289,30 @@ enyo.kind({
 		for(i = 0, j=captions.length; i < j; i++){
 			items.push({caption: captions[i], value: i+1});
 		}
-		if(this.isLastDay(date) || Utilities.isLastDayofMonthRule(this.rrule)){
-			items.push({caption: $L("Last day of the month"), value: i+1});
+		//if(this.isLastDay(date) || Utilities.isLastDayofMonthRule(this.rrule)){
+		//	items.push({caption: $L("Last day of the month"), value: i+1});
+		//}
+		if( (ucLastDay && ucLastDay.lastweek) || 
+			((event.rrule && event.rrule.freq === "MONTHLY") &&
+				((event.rrule.rules[0].ruleType === "BYMONTHDAY" && event.rrule.rules[0].ruleValue[0].ord && parseInt(event.rrule.rules[0].ruleValue[0].ord,10) <0) ||
+				(event.rrule.rules[0].ruleType === "BYDAY"  && event.rrule.rules[0].ruleValue[0].ord && parseInt(event.rrule.rules[0].ruleValue[0].ord, 10) <0) ) ) ) {
+			
+			this.hasUClastProps = true;
+			
+			num = Math.abs(parseInt(ucLastDay.lastday,10));
+			monthlyLastDay = monthlyLastDayTempl.formatChoice(num, {
+				dowCount: num
+			});
+			items.push({caption: monthlyLastDay, value: i+1});
+			
+			monthlyLastDoW = monthlyLastDoWTempl.evaluate({
+				dayOfWeek: weekdayNames[date.getDay()]
+			});
+			items.push({caption: monthlyLastDoW, value: i+2});
+			
+			if(this.isExternalCustom === true) {
+				items.push({caption: $L("Monthly custom external"), value: i+3});
+			}
 		}
 		ui.repeatFreq.setItems(items);
 
@@ -319,6 +355,29 @@ enyo.kind({
 		return isLast;
 	},
 
+	getIsLastProps: function(value) {
+		var monthDays= [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
+		var dt = new Date(value);
+		var daydt = dt.getDate();
+		var yr = dt.getFullYear();
+		var mn = dt.getMonth();
+		if(Date.isLeapYear(yr)) {
+			monthDays[1] = 29;
+		} else {
+			monthDays[1] = 28;
+		}
+		var lastdayIdx = (daydt - monthDays[mn] -1).toString();
+		if(monthDays[mn] - daydt < 7) {
+			if(monthDays[mn] - daydt === 0) {
+				return {lastweek: true, lastday: lastdayIdx, islastday: true };
+			} else {
+				return {lastweek: true, lastday: lastdayIdx, islastday: false};
+			}
+		} else {
+			return {lastweek: false, lastday: lastdayIdx, islastday: false};
+		}
+	},
+
 	setupEndType: function setupEndType(){
 		var	ui = this.$
 		,	endType = "forever";
@@ -345,11 +404,18 @@ enyo.kind({
 	},
 
 	updateRRuleFreq: function updateRRuleFreq (repeatType) {
+		if(this.isExternalCustom && repeatType !== this.types.MONTHLYEXT){
+			var items = this.$.repeatFreq.getItems();
+			items.splice(-1,1); //was ext chose external
+			this.$.repeatFreq.setItems(items);
+		}
+		
 		var start = new Date(this.currentDate)
 		,	day = start.getDay()
 		,	date = start.getDate()
 		,	nth = Utilities.getDOWCount(this.currentDate)
 		,	ordDay
+		,	ucbymonthday = this.getIsLastProps(start.getTime());
 		;
 
 		this.rrule.rules = [];
@@ -377,13 +443,13 @@ enyo.kind({
 			case this.types.MONTHLYDATE:
 				this.rrule.freq ='MONTHLY'; // Do NOT Localize
 				ordDay = this.makeOrdDay(date, undefined);
-				this.addRule("BYMONTHDAY", [ordDay]);
+				this.addRule("BYMONTHDAY", [ordDay]); //1,5,17,etc
 				break;
 
 			case this.types.MONTHLYDAY:
 				this.rrule.freq ='MONTHLY'; // Do NOT Localize
 				ordDay = this.makeOrdDay(nth, day);
-				this.addRule("BYDAY", [ordDay]);
+				this.addRule("BYDAY", [ordDay]); //3rd M, Tu, etc
 				break;
 
 			case this.types.YEARLY:
@@ -392,10 +458,15 @@ enyo.kind({
 
 			case this.types.LASTOFMONTH:
 				this.rrule.freq ='MONTHLY'; // Do NOT Localize
-				ordDay = this.makeOrdDay(-1, undefined);
-				this.addRule("BYMONTHDAY", [ordDay]);
+				ordDay = this.makeOrdDay(ucbymonthday.lastday, undefined);
+				this.addRule("BYMONTHDAY", [ordDay]); //-1, -2, -3
 				break;
 
+			case this.types.LASTMONTHDOW:	//-1, M, Tu, We
+				this.rrule.freq ='MONTHLY'; // Do NOT Localize
+				ordDay = this.makeOrdDay(-1, day);
+				this.addRule("BYDAY", [ordDay]);
+				break;
 		}
 		// this.log("---:---: RRULE: "+JSON.stringify(this.rrule));
 	},
@@ -409,7 +480,9 @@ enyo.kind({
 								"monthly-date", // DON'T LOCALIZE
 								"monthly-day", 	// DON'T LOCALIZE
 								"yearly", 		// DON'T LOCALIZE
-								"monthly-day"  	// DON'T LOCALIZE - for last of month
+								"monthly-day",  	// DON'T LOCALIZE - for last of month
+								"monthly-dayofweek",
+								"monthly-ext"
 							]	
 		,	intervalLabels	= [ "", 
 								$L("Every #{n} day(s)"), 	// DO LOCALIZE
@@ -417,7 +490,9 @@ enyo.kind({
 								$L("Every #{n} month(s)"), 	// DO LOCALIZE
 								$L("Every #{n} month(s)"), 	// DO LOCALIZE
 								$L("Every #{n} year(s)"), 	// DO LOCALIZE
-								$L("Every #{n} month(s)")	// DO LOCALIZE
+								$L("Every #{n} month(s)"),	// DO LOCALIZE
+								$L("Every #{n} month(s)"),	// DO LOCALIZE
+								$L("Every #{n} month(s)"),	// DO LOCALIZE
 							]	
 		,	isWeekly		= (types [repeatType] === "weekly")
 		,	cb
@@ -486,6 +561,7 @@ enyo.kind({
 				this.rrule.until = ui.until.getValue().getTime();
 				ui.dateDrawer.setOpen(true);
 				ui.countDrawer.setOpen(false);
+				setTimeout(enyo.bind(this, this.miniScrollBottom), 500);
 				break;
 			case "count":
 				delete this.rrule.until;
@@ -501,14 +577,27 @@ enyo.kind({
 		//This should be the date shown on the date picker, and the start time of the event
 		var until = this.$.until.getValue().getTime();  
 		this.rrule.until = until;
-
+		this.$.repMiniMonth.setViewDay(this.$.until.getValue());
 		if(until < this.currentDate){
 			this.rrule.until = this.currentDate;
 			this.$.until.setValue(new Date(this.rrule.until));
+			this.$.repMiniMonth.setViewDay(new Date(this.rrule.until));
 		}
 		this.setDescription("until");
 	},
 
+	miniMonDateTap: function miniMonDateTap(inSender, inValue){
+		this.$.until.setValue(inValue);
+		this.changeUntil();
+	},
+	
+	miniScrollBottom: function miniScrollBottom () {
+		var ui = this.$;
+		var bounds = ui.contentScroller.getBoundaries();
+		//console.error("scroll bounds: " + JSON.stringify(bounds));
+		bounds && ui.contentScroller.setScrollTop(bounds.bottom );
+	},
+	
 	changeCount: function changeCount(){
 		var count = this.$.count.getValue();
 		this.rrule.count = count;
@@ -561,6 +650,7 @@ enyo.kind({
 	whatKindOfRRule: function whatKindOfRRule (rrule) {
 		var freq = rrule.freq
 		,	ruleType;
+		this.isExternalCustom = false;
 		switch(freq){
 			case "DAILY":
 			case "WEEKLY":
@@ -569,23 +659,52 @@ enyo.kind({
 				break;
 
 			case "MONTHLY":
-				var byDayRules = this.getBydayRuleValues(rrule);
-				ruleType = this.types.MONTHLYDATE;
+				//console.error("rrule :::::: " + JSON.stringify(rrule));
+				//var byDayRules = this.getBydayRuleValues(rrule);
+				//Look for BYDAY rules
+				var byDayRules, byMonthDayRules;
+				
+				var rules = rrule.rules;
+				if (rules) {
+					var rulesLength = rules.length;
+					for (var i = 0; i < rulesLength; i++) {
+						var rule = rules[i];
+						if (rule.ruleType == "BYDAY") {
+							byDayRules = rule.ruleValue;
+							break;
+						} else if (rule.ruleType == "BYMONTHDAY") {
+							byMonthDayRules = rule.ruleValue;
+							break;
+						}
+					}
+				}
+				ruleType = this.types.MONTHLYDATE; //1,2,5,16,27,etc
 
 				//If we have BYDAY rules, and the value matches the currentDate, use monthly-by-day
 				if(byDayRules){
 					var day = new Date(this.currentDate).getDay();
 					var ord = Utilities.getDOWCount(this.currentDate);
-					if (byDayRules.length === 1 &&
+					if(byDayRules[0].ord) { //i.e. 28, -1, -3
+						var ucByDay = parseInt(byDayRules[0].ord, 10);
+					}
+					if(byDayRules.length > 1) {
+						ruleType = this.types.MONTHLYEXT;//multiple monthly days
+						this.isExternalCustom = true;
+					} else if (byDayRules.length === 1 &&
 						(byDayRules[0].day == day && byDayRules[0].ord == ord)) {
-							ruleType = this.types.MONTHLYDAY;
+						ruleType = this.types.MONTHLYDAY; //1,2,3,4 M,TU,WE,etc
+					} else if(ucByDay && ucByDay < 0) {
+						ruleType = this.types.LASTMONTHDOW;// -1 M, TU, WE
 					}
 				}
 
 				if(ruleType == this.types.MONTHLYDATE){
 					var byMonthdayRules = this.getByMonthdayRuleValues(rrule);
-					if (byMonthdayRules.length === 1 && byMonthdayRules[0].ord == -1) {
-						ruleType = this.types.LASTOFMONTH;
+					if (byMonthdayRules.length === 1 && byMonthdayRules[0].ord) {
+						var ucByLastDay = parseInt(byMonthDayRules[0].ord, 10);
+						if(ucByLastDay && ucByLastDay < 0) {
+							ruleType = this.types.LASTOFMONTH;// -1, -2, -3
+						}
 					}
 				}
 				break;
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/header/CalendarList.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/header/CalendarList.js
index fcb153f..300a3a1 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/header/CalendarList.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/header/CalendarList.js
@@ -14,12 +14,22 @@ enyo.kind({
 	kind: enyo.HFlexBox,
 
 	events:
-	{	
+	{	onEditGroups: ""
+	,	onNameFocus: ""
+	,	onNameChange: ""
 	},
 
 	published:
 	{	accountsAndCalendars	: null	// Array	: For watching Accounts and Calendars changes.
 	,	toggleAllLimit			: 4		// Number	: Minimum number of calendars required to show toggle.
+	,	editingGroups			: false // boolean	: for determining if used in group edit scene
+	,	editingAlarms			: null	//	bool	: for enabling the setup of per cal alarms
+	,	groupIncludes			: null	// Array	: Array of calendars on in this group
+	,	groupName				: null	// String	: Group name
+	,	groupRId				: null	// String	: Group rId
+	,	enableUcGroups			: null	// 
+	,	workWeekOnly			: null	// bool		: work week setting
+	,	uberWorkWeek 			: false //for sharing work week in week view
 	},
 
 	G11N: // Cached Globalization strings:
@@ -32,10 +42,17 @@ enyo.kind({
 		{name:"calendarScroller", className:"toggles", kind: enyo.Scroller, autoVertical: false, vertical: false, flex: 1, components: [
 			{name:"toggles", className:"container", kind: enyo.HFlexBox, defaultKind: enyo.VFlexBox, defaultLayoutKind: enyo.VFlexLayout}
 		]},
+		{name: "groupName", kind: enyo.Input, showing:false, alwaysLooksFocused: "true", style:"height:40px; padding: 0px; margin:2px; width:160px;", autoWordComplete:false, spellcheck: false, autocorrect: false, onblur: "doNameFocus", onfocus: "doNameFocus", onchange: "groupNameEdit"},
 		{name:"toggleAllButton", className:"toggleAllButton enyo-button-natural-width enyo-button-dark ellipsis", kind:enyo.Button, onclick:"toggleAll", showing: false},
 		{kind:"ApplicationEvents"
 		,	onWindowDeactivated: "windowDeactivatedHandler"
-		}
+		,	onWindowHidden			: "windowHiddenHandler"
+		,	onWindowShown			: "windowShownHandler"
+		},
+		{name:"groupPopup", kind:enyo.PopupList, onSelect:"uberGroupChosen",
+				items: [{caption: $L("Show All"), value: "all"}
+						,{caption: $L("Hide All"), value:"hide"}
+		]}
 		
 	],
 
@@ -46,11 +63,14 @@ enyo.kind({
 	create: function create () {
 		this.inherited (arguments);
 		this.$.toggleAllButton.caption = this.G11N.hideAll;
-		enyo.application.watch ({accountsAndCalendars: this});
+		this.settingIncludes = false;
+		this.firstLoad = true;
+		this.calendarMap = {};
+		if(!this.editingGroups){enyo.application.watch ({accountsAndCalendars: this});}
 	},
 
 	destroy: function destroy () {
-		enyo.application.ignore({accountsAndCalendars: this});
+		if(!this.editingGroups){enyo.application.ignore({accountsAndCalendars: this});}
 		this.inherited (arguments);
 	},
 
@@ -62,68 +82,278 @@ enyo.kind({
 
 	windowDeactivatedHandler: function windowDeactivatedHandler(){
 		// As we leave the app, save the calendar toggle state.
-		enyo.application.calendarsManager.saveCalendarOnOffState(this.calendarMap);
+		if(!this.editingGroups){enyo.application.calendarsManager.saveCalendarOnOffState(this.calendarMap);}
+	},
+	
+	windowHiddenHandler: function windowHiddenHandler () {
+		this.firstLoad = true;
+		//console.error ("======= hidden agenda\t");
+	},
+	
+	windowShownHandler: function windowShownHandler () {
+		//console.error ("======= SHOWN agenda\t");
+		this.firstLoad = true;
+		if(!this.editingGroups && this.enableUcGroups && enyo.application.prefsManager.prefs.startUpGroup !== "none"){
+			this.settingStartUpGroup();
+		}
 	},
 //-------------------------------	
 
 	accountsAndCalendarsChanged: function accountsAndCalendarsChanged (oldAccountsAndCalendars) {
+		//console.error("Calendar list accounts changed:" + oldAccountsAndCalendars);
+		this.setupUberGroups();
 		this.updateList();
 	},
+	
+	groupIncludesChanged: function groupIncludesChanged(oldInc){
+		//console.error("Calendar list includes changed oldInc:  "+ JSON.stringify(oldInc));
+		//console.error("Calendar list includes changed:  "+ JSON.stringify(this.groupIncludes));
+		if(this.settingIncludes === true && this.editingGroups) {
+			this.settingIncludes = false;
+			return;
+		}
+		if(this.groupIncludes && this.editingGroups && this.toggleMap){
+			if(this.groupIncludes) {
+				//var	calendarMap	= this.calendarMap
+				var	includes = this.groupIncludes
+				,	toggleMap	= this.toggleMap
+				,	toggle
+				;
+				for (var id in this.calendarMap) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+					if (this.calendarMap.hasOwnProperty (id)) {
+						toggle		= toggleMap	[id];
+						
+						this.toggleMap	[id].on	= this.calendarMap [id].on = this.editingAlarms ? !!(includes.indexOf(id) === -1) : !!(includes.indexOf(id) !== -1);
+						this.updateLegend (toggle);
+					}
+				}
+				//this.calendarMap = calendarMap;
+				if(!this.editingAlarms){
+					toggle = toggleMap["workWeek"];
+					this.toggleMap["workWeek"].on = this.workWeekOnly;
+					this.updateLegend(toggle);
+				}
+				this.numShowingCalendars = this.editingAlarms ? this.totalCalendars - includes.length : includes.length;
+				//console.error("Calendar list groupIncludes changed:  "+ this.groupIncludes + "rId:  " + this.groupRId);
+				if (this.showToggleAll) {
+					if (this.numShowingCalendars == this.totalCalendars) {
+						this.toggleAllOn = true;
+						this.$.toggleAllButton.setCaption (this.G11N.HideAll);
+					} else {
+						this.toggleAllOn = false;
+						this.$.toggleAllButton.setCaption (this.G11N.ShowAll);
+					}
+				}
+			}
+		}
+	},
 
 	shareCalendars: function shareCalendars (calendarMap) {
-		!calendarMap		&&	(calendarMap = this.calendarMap);
+		//console.error("Share Calendars :  "+ JSON.stringify(calendarMap) );
+		if(!calendarMap){var calendarMap = this.calendarMap;}
 		var cals 			= JSON.parse(JSON.stringify(calendarMap));
-		
-		enyo.application.share	({ calendars: {data: cals, keep: true}});				// Share all calendars' color and on/off state with all watchers.
+		if(this.editingGroups){
+			return;
+		} else{
+			enyo.application.share	({ calendars: {data: cals, keep: true}});			// Share all calendars' color and on/off state with all watchers.
+			var oldWeek =enyo.application.uberWorkView;
+			if(oldWeek !== this.workWeekOnly){
+				enyo.application.share	({ uberWorkWeek: {data: this.workWeekOnly, keep: true}});
+				enyo.application.uberWorkView = this.workWeekOnly;
+			}
+		}
 	},
 
-	toggleAll: function toggleAll () {									// Toggle everything right away
-		var	calendarMap	= this.calendarMap
-		,	on			= this.toggleAllOn = !this.toggleAllOn
-		,	toggleMap	= this.toggleMap
-		,	toggle
-		;
-		for (var id in calendarMap) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
-			if (calendarMap.hasOwnProperty (id)) {
-				toggle		= toggleMap	[id];
-				toggle.on	= calendarMap [id].on = on;
-				this.updateLegend (toggle);
+	toggleAll: function toggleAll (inSender, inValue) {									// Toggle everything right away
+		var enabledG = !!enyo.application.prefsManager.prefs.enableUcGroups;
+		if(this.enableUcGroups !== enabledG){this.updateToggleAllButton (this.numShowingCalendars, this.totalCalendars); return}
+		if(this.enableUcGroups && !this.editingGroups){
+			var grpItems = [], ui = this.$;
+			this.grpIndexId = [];
+			if(this.userUberCalGroups && this.userUberCalGroups.length >0){
+				var len = this.userUberCalGroups.length, item, i, grp;
+				for(i=0; i<len;i++){
+					grp = {};
+					item = {};
+					grp = this.userUberCalGroups[i];
+					item.caption = grp.groupname;
+					item.value = grp.rId;
+					this.grpIndexId[i] = i;
+					grpItems.push(item);
+				}
 			}
-		}
-		if (this.showToggleAll) {
-			if (on) {													// Change the button caption and reset numShowingCalendars to the new count
-				this.numShowingCalendars = this.totalCalendars;
-				this.$.toggleAllButton.setCaption (this.G11N.HideAll);
-			} else {
-				this.numShowingCalendars = 0;
-				this.$.toggleAllButton.setCaption (this.G11N.ShowAll);
+			grpItems.push({caption: $L("Show All"), value: "all"});
+			this.grpIndexId.push("all");
+			grpItems.push({caption: $L("Hide All"), value:"hide"});
+			this.grpIndexId.push("hide");
+			grpItems.push({caption: $L("Edit Groups"), value:"edit"});
+			this.grpIndexId.push("edit");
+			
+			ui.groupPopup.lazy && ui.groupPopup.validateComponents();
+			ui.groupPopup.setItems(grpItems);
+			ui.groupPopup.validateComponents();
+			ui.groupPopup.openAtControl(inSender);
+		} else {
+			var	calendarMap	= this.calendarMap
+			,	on			= this.toggleAllOn = !this.toggleAllOn
+			,	toggleMap	= this.toggleMap
+			,	toggle
+			,	inc = []
+			;
+			for (var id in calendarMap) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+				if (calendarMap.hasOwnProperty (id)) {
+					toggle		= toggleMap	[id];
+					toggle.on	= calendarMap [id].on = on;
+					this.updateLegend (toggle);
+					if(on=== true && this.editingGroups && !this.editingAlarms){
+						inc.push(id);
+					} else if(on === false && this.editingGroups && this.editingAlarms){
+						inc.push(id);
+					}
+				}
+			}
+			if(this.editingGroups){this.setGroupIncludes(inc);}
+			if (this.showToggleAll) {
+				if (on) {													// Change the button caption and reset numShowingCalendars to the new count
+					this.numShowingCalendars = this.totalCalendars;
+					this.$.toggleAllButton.setCaption (this.G11N.HideAll);
+				} else {
+					this.numShowingCalendars = 0;
+					this.$.toggleAllButton.setCaption (this.G11N.ShowAll);
+				}
 			}
+			this.shareCalendars();
 		}
-		this.shareCalendars();
+		return true;
 	},
 
 	toggleSingle: function toggleSingle (toggle, domEvent) {
-		toggle			= this.toggleMap	[toggle.calendarId];						// Uses the actual toggle control instead of one of its sub-controls.
-		var	calendar	= this.calendarMap	[toggle.calendarId]
-		,	on			= toggle.on = calendar.on = !calendar.on
-		,	numShowing	= this.numShowingCalendars
-		;
-		this.updateLegend (toggle, domEvent.type);
+		var toggle			= this.toggleMap	[toggle.calendarId];		// Uses the actual toggle control instead of one of its sub-controls.
+		//console.error("toggle single :  "+ JSON.stringify(this.calendarMap) + "rId:  " + this.groupRId);
+		if(toggle.calendarId === "workWeek"){
+			this.workWeekOnly = toggle.on = !toggle.on;
+			this.updateLegend (toggle, domEvent.type);
+			if(!this.editingGroups){
+				enyo.application.share	({ uberWorkWeek: {data: this.workWeekOnly, keep: true}});
+				enyo.application.uberWorkView = this.workWeekOnly;
+			}
+			//console.error("Calendar list work week toggle:  "+ this.workWeekOnly);
+		} else {
+			var	calendar	= this.calendarMap	[toggle.calendarId]
+			,	on			= this.toggleMap[toggle.calendarId].on = this.calendarMap[toggle.calendarId].on = !calendar.on
+			,	numShowing	= this.numShowingCalendars
+			;
+			this.updateLegend (toggle, domEvent.type);
 
-		if (this.showToggleAll) {
-			numShowing = on ? ++this.numShowingCalendars : --this.numShowingCalendars;	// Modify the number of showing calendars.
-			this.updateToggleAllButton (numShowing, this.totalCalendars);
+			if (this.showToggleAll) {
+				numShowing = on ? ++this.numShowingCalendars : --this.numShowingCalendars;	// Modify the number of showing calendars.
+				this.updateToggleAllButton (numShowing, this.totalCalendars);
+			}
+			
+			if(this.editingGroups){
+				var inc = this.groupIncludes.slice();
+				var idx = inc.indexOf(toggle.calendarId);
+				if(idx === -1){
+					inc.push(toggle.calendarId);
+					this.setGroupIncludes(inc);
+				} else if(idx !== -1){
+					inc.splice(idx, 1);
+					this.setGroupIncludes(inc);
+				}
+				console.error("Calendar list toggle single:  "+ JSON.stringify(this.groupIncludes));
+				return true;
+			} else {
+				this.shareCalendars();
+			}
 		}
-		this.shareCalendars();
 		return true;
 	},
 
 	updateLegend: function updateLegend (toggle, type) {
 		toggle [toggle.on ? "removeClass" : "addClass"] ("off");
 	},
+	
+	uberGroupChosen: function uberGroupChosen(inSender, inSelected){
+		if(this.editingGroups){return;}
+		var ui = this.$, choice;
+		var op = inSelected;
+		this.$.groupPopup.close();
+		if(op !== undefined && this.grpIndexId){
+			op = parseInt(op, 10);
+			choice = this.grpIndexId[op];
+			if(isNaN(choice)){
+				if(choice === "all" || choice === "hide"){
+					var	calendarMap	= this.calendarMap
+					,	on			= this.toggleAllOn = (choice === "all")
+					,	toggleMap	= this.toggleMap
+					,	toggle
+					;
+					for (var id in calendarMap) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+						if (calendarMap.hasOwnProperty (id)) {
+							toggle		= toggleMap	[id];
+							toggle.on	= calendarMap [id].on = on;
+							this.updateLegend (toggle);
+						}
+					}
+					if (this.showToggleAll) {
+						if (on) {													// Change the button caption and reset numShowingCalendars to the new count
+							this.numShowingCalendars = this.totalCalendars;
+							if(this.editingGroups){
+								this.$.toggleAllButton.setCaption (this.G11N.HideAll);
+							} else {
+								var txt = $L('Cal Groups');
+								this.$.toggleAllButton.setCaption(txt);
+							}
+						} else {
+							this.numShowingCalendars = 0;
+							if(this.editingGroups){
+								this.$.toggleAllButton.setCaption (this.G11N.ShowAll);
+							} else {
+								var txt = $L('Cal Groups');
+								this.$.toggleAllButton.setCaption(txt);
+							}
+						}
+					}
+					this.shareCalendars();
+				} else if(choice === "edit"){
+					this.doEditGroups();
+				}
+				//console.error("Choice:::::::::::: " + choice); 
+			} else {
+				//console.error("Choice:::::::::::: " + choice); 
+				if(this.userUberCalGroups && this.userUberCalGroups[choice]){
+					var includes = this.userUberCalGroups[choice].includes;
+					if(includes){
+						var calendarMap	= this.calendarMap
+						,	toggleMap	= this.toggleMap
+						,	toggle
+						;
+						for(var id in this.calendarMap) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+							if (this.calendarMap.hasOwnProperty (id)) {
+								toggle		= this.toggleMap	[id];
+								this.toggleMap	[id].on	= this.calendarMap [id].on = (includes.indexOf(id) !== -1);
+								this.updateLegend (toggle);
+							}
+						}
+						toggle = toggleMap["workWeek"];
+						this.workWeekOnly = this.toggleMap["workWeek"].on = this.userUberCalGroups[choice].workweek;
+						this.updateLegend(toggle);
+						this.$.toggleAllButton.setCaption(this.userUberCalGroups[choice].groupname);
+						this.numShowingCalendars = includes.length;
+					}
+					this.shareCalendars();
+				}
+			}
+		}
+		return true;
+	},
 
 	updateToggleAllButton: function updateToggleAllButton (numShowing, totalCalendars) {
-		if (numShowing == (totalCalendars || this.totalCalendars)) {	// If all calendars are showing:
+		this.enableUcGroups = !!enyo.application.prefsManager.prefs.enableUcGroups;
+		if(this.enableUcGroups  && !this.editingGroups){
+			var txt = $L('Cal Groups');
+			this.$.toggleAllButton.setCaption(txt);
+		} else if (numShowing == (totalCalendars || this.totalCalendars)) {	// If all calendars are showing:
 			this.toggleAllOn = true;
 			this.$.toggleAllButton.setCaption (this.G11N.HideAll);		//		Display "Hide All".
 		} else {														// Otherwise:
@@ -131,19 +361,147 @@ enyo.kind({
 			this.$.toggleAllButton.setCaption (this.G11N.ShowAll);		//		Display "Show All".
 		}
 	},
+	
+	groupNameEdit: function groupNameEdit(inSender){
+		if(this.editingGroups){
+			var name = this.$.groupName.getValue();
+			//console.error("Name change:::::::::::: " + name); 
+			this.setGroupName(name);
+			this.doNameChange(name);
+			//this.userUberCalGroups[0].groupname = name;
+		}
+	},
+	
+	setupUberGroups: function setupUberGroups(){
+		var prefsMgr = enyo.application.prefsManager;
+		this.enableUcGroups = !!prefsMgr.prefs.enableUcGroups;
+		this.perCalAlarms == !!prefsMgr.prefs.perCalAlarms;
+		this.userUberCalGroups = [];
+		if(this.editingGroups){
+			if(!this.groupRId || !this.groupIncludes || !this.groupName){return;}
+			var editGrp = {};
+			editGrp.groupname = this.groupName;
+			editGrp.includes = this.groupIncludes;
+			editGrp.rId = this.groupRId;
+			editGrp.workweek = this.workWeekOnly;
+			this.userUberCalGroups.push(editGrp);
+			return;
+		}
+		//only happens when in default form
+		var grpsCookie = prefsMgr && prefsMgr.getUberCalendarPrefs({name:"userUberCalGroups"});
+		var len = grpsCookie && grpsCookie.length;
+		if(grpsCookie && len >0){
+			for(var i = 0; i<len; i++){
+				this.userUberCalGroups.push(grpsCookie[i]);
+			}
+			console.error("Calendar list userUberCalGroups:  "+ JSON.stringify(this.userUberCalGroups));
+		} else {
+			var defCal = prefsMgr.getDefaultCalendar();
+			var grp = [{rId: "default", groupname: $L('Default Group'),includes: [defCal] , workweek: false}];
+			prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: grp});
+			this.userUberCalGroups = grp;
+		}
+	},
+	
+	settingStartUpGroup: function settingStartUpGroup(){
+		if(this.editingGroups){return;}
+		
+		var prefsMgr = enyo.application.prefsManager;
+		startUpGroup = prefsMgr.prefs.startUpGroup || "none";
+		if(startUpGroup !== "none" && this.userUberCalGroups.length > 0){
+			for(var grp, len = this.userUberCalGroups.length, i=0;i<len;i++){
+				grp = this.userUberCalGroups[i];
+				if(grp && grp.rId === startUpGroup){
+					this.startGrpIdx = i;
+					var includes = grp.includes;
+					if(includes){
+						var calendarMap	= this.calendarMap
+						,	toggleMap	= this.toggleMap
+						,	toggle
+						;
+						for(var id in calendarMap) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+							if (calendarMap.hasOwnProperty (id)) {
+								toggle		= toggleMap	[id];
+								toggle.on	= calendarMap [id].on = (includes.indexOf(id) !== -1);
+								this.updateLegend (toggle);
+							}
+						}
+						toggle = toggleMap["workWeek"];
+						this.workWeekOnly = this.toggleMap["workWeek"].on = grp.workweek;
+						this.updateLegend(toggle);
+						this.$.toggleAllButton.setCaption(grp.groupname);
+						this.numShowingCalendars = includes.length;
+					}
+					this.firstLoad = false;
+					//enyo.application.calendarsManager.saveCalendarOnOffState(this.calendarMap)
+					//setTimeout(enyo.bind(this, this.shareCalendars), 500);
+					this.shareCalendars(JSON.parse(JSON.stringify(calendarMap)));
+					return;
+				}
+			}
+		} else {
+			this.firstLoad = false;
+			var uberWorkWk = (this.workWeekOnly === null ? workWeekOnly : this.workWeekOnly)
+			enyo.application.share	({ uberWorkWeek: {data: uberWorkWk, keep: true}});
+			enyo.application.uberWorkView = uberWorkWk;
+			this.shareCalendars();
+		}
+	},
+	
+	cleanUberGroups: function cleanUberGroups(calId){
+		if(!calId){return;}
+		if(!this.editingGroups){
+			var len, grp, includes, idx;
+			var prefsMgr = enyo.application.prefsManager;
+			len = this.userUberCalGroups.length;
+			for(var i=0;i<len;i++){
+				grp = this.userUberCalGroups[i];
+				includes = [];
+				includes = grp.includes.slice();
+				idx = includes.indexOf(calId);
+				if(idx !== -1){ //deleted cal in includes
+					//if(includes.length === 1){ //only 1 cal in group, group needs to be deleted
+					//	this.userUberCalGroups.splice(i,1);
+					//} else { // just delete the deleted cal
+						this.userUberCalGroups[i].includes.splice(idx, 1);
+					//}
+				}
+			}
+			if(this.userUberCalGroups.length ===0){
+				var defCal = prefsMgr.getDefaultCalendar();
+				var grp = [{rId: "default", groupname: $L('Default Group'),includes: [defCal] , workweek: false}];
+				prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: grp});
+				this.userUberCalGroups = grp;
+			} else {
+				prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: this.userUberCalGroups});
+			}
+		} else {
+			if(!this.groupIncludes){return;}
+			var idx = this.groupIncludes.indexOf(calId);
+			if(idx !== -1){
+				this.groupIncludes.splice(idx, 1);
+			}
+		}
+	},
 
 	updateList	: function updateList (calendars) {
-		!calendars	&&
-		(calendars			= enyo.application.calendarsManager.getCalendarsList ({sorted: true}));
+		if(!calendars){
+			var calendars = enyo.application.calendarsManager.getCalendarsList ({sorted: true});
+		}
+		
+		//if(this.editingGroups){calendars = JSON.parse(JSON.stringify(calendars));}
 		!this.toggleAllOn	&& (this.toggleAllOn = true); 					// Set the default toggle all state if it isn't already set
 
 		var	erasedCalendars	= this.calendarMap								// Create a map of erased calendars using the old calendar map.
 		,	oldMap			= JSON.stringify(this.calendarMap)
+		,	oldWorkWeek		= this.workWeekOnly
 		,	calendarCount	= calendars.length
 		,	calendarMap		= this.calendarMap = {}
 		,	numShowing		= 0
 		,	toggleMap		= this.toggleMap || (this.toggleMap = {})
 		,	toggles			= this.$.toggles
+		,	workWeekOnly	= !!enyo.application.prefsManager.prefs.workWeekOnly
+		,	enableUcGroups	= this.enableUcGroups === null ? !!enyo.application.prefsManager.prefs.enableUcGroups : this.enableUcGroups
 		,	toggleParts
 		;
 		this.totalCalendars	= calendarCount;
@@ -181,8 +539,26 @@ enyo.kind({
 			calendarMap [id]	= { color:color, on:!!toggle.on };
 			this.updateLegend (toggle);
 		}
+		//setup work week toggle
+		if(!this.editingAlarms && !toggleMap["workWeek"]){
+			color = "grey";
+			toggle = toggleMap ["workWeek"]	= toggles.createComponent({								// Avoid re-creating existing calendar toggles.
+					calendarId	: "workWeek",
+					className	: "toggle",
+					align		: "center",
+					on			: (this.workWeekOnly === null ? workWeekOnly : this.workWeekOnly),
+					onclick		: "toggleSingle",
+					owner		: this,
+					components	: [
+						{calendarId: "workWeek", className:"theme-"+color+" legend"},
+						{calendarId: "workWeek", className:"ellipsis name", content: enyo.string.escapeHtml($L('Work week'))}
+					]
+				});
+			this.updateLegend (toggle);
+			if(this.workWeekOnly === null){this.workWeekOnly = workWeekOnly;}
+		}
 		this.numShowingCalendars	= numShowing;
-		var showToggleAll			= (calendarCount >= this.toggleAllLimit);	// Set a flag so that we only do toggle all processing if needed
+		var showToggleAll			= ((calendarCount >= this.toggleAllLimit) || enableUcGroups);	// Set a flag so that we only do toggle all processing if needed
 		this.showToggleAll			= showToggleAll
 		this.$.toggleAllButton.setShowing (showToggleAll); 						// Show the toggle all button if there are enough calendars.
 
@@ -193,13 +569,387 @@ enyo.kind({
 		}
 		for (var calId in erasedCalendars) {	// Iterate over all erased calendars and:
 			toggleMap [calId].destroy();		//	destroy each one's toggle
+			this.cleanUberGroups(calId);
 			delete toggleMap [calId];			//	delete the toggle from the toggleMap
 			delete erasedCalendars [calId];		//	delete the old calendar entry
+			if(this.editingAlarms){
+				var idx = this.groupIncludes.indexOf(calId);
+				if(idx !== -1){
+					this.groupIncludes.splice(idx, 1);
+				}
+			}
 		}
 		toggles.render();
-		
+		//console.error("Update list :  "+ JSON.stringify(this.calendarMap) + "rId:  " + this.groupRId);
 		if(oldMap != JSON.stringify(this.calendarMap)){	//TODO: Maybe write a calendar map comparison function instead of using stringify
-			this.shareCalendars();	
+			if(!this.editingGroups) {
+				if(this.firstLoad && this.enableUcGroups){
+					this.settingStartUpGroup();
+					return;
+				}
+				var uberWorkWk = (this.workWeekOnly === null ? workWeekOnly : this.workWeekOnly)
+				enyo.application.share	({ uberWorkWeek: {data: uberWorkWk, keep: true}});
+				enyo.application.uberWorkView = uberWorkWk;
+				this.shareCalendars();
+			} else {
+				this.groupIncludesChanged();
+			}
 		}
 	}
 });
+
+enyo.kind({
+	name		: "calendar.UberGroupsEdit",
+	className	: "prefs enyo-bg",
+	kind		: enyo.VFlexBox,
+	
+	events:{
+		onExit	: ""
+	},
+	
+	published: {
+		accountsAndCalendars: null	// Array
+	},
+	
+	components: [
+		{name: "pane", kind: enyo.Pane, flex: 1, style: "background: black;", components: [
+			{kind: enyo.VFlexBox, name: "uberGroups",  components: [
+				{kind:enyo.PageHeader, className:"enyo-header-dark", pack:"center", components:[
+					{kind: enyo.Image, src: "../images/header-icon-calendar48x48.png"},
+					{content: $L("UberCalendar Groups")}
+				]},
+				{className:"accounts-header-shadow"},
+				{name:"scroller", kind: enyo.Scroller, style: "background: black;", flex: 1, autoHorizontal: false, components: [
+					{kind:enyo.VFlexBox, flex: 1, components: [
+						{name: "list", kind: enyo.VirtualList, flex:1, onSetupRow: "listSetupRow", components: [
+							
+							{kind: enyo.SwipeableItem, confirmRequired: true, onConfirm: "itemSwipe", components: [
+								{name: 'groupItemDivider', kind: enyo.Divider },
+								{name: "calList", kind: "calendar.CalendarList", className:"calendarList", onNameFocus: "inputFocus", onNameChange:"changedGroupName", editingGroups:true, enableUcGroups:true, editingAlarms: false }
+							]}
+						]}
+					]}
+				]},
+				{kind: enyo.Button, name: "btnAddGroup", className:"enyo-button-dark", pack:"center", caption: $L("Add Calendar Group"), onclick: "addGroup"},
+				{name: 'alarmsItemDivider', showing: false, kind: enyo.Divider, caption: $L("Enabled Alarms") },
+				{name: "perCalAlarms", showing: false, kind: "calendar.CalendarList", className:"calendarList", editingGroups:true, enableUcGroups:true, editingAlarms: true },
+				{className:"accounts-footer-shadow"},
+				{kind:"Toolbar", className:"enyo-toolbar-dark",components:[
+					{kind: enyo.HFlexBox, components:[
+						{kind: enyo.Button, name: "btnCancel", className: "enyo-button-negative accounts-toolbar-btn", caption: $L("Cancel"), onclick: "cancel" },
+						{kind: enyo.Button, name: "btnSave", className: "enyo-button-afirmative accounts-toolbar-btn", caption: $L("Save"), onclick: "save" }
+					]}
+				]}
+			]}
+		]},
+		{kind: enyo.ModalDialog, name: "uberError", caption: $L("Attention"), onBeforeOpen:"errorOpening", components:[
+			{name:"errText", kind: enyo.Control, content: "Hi", className: "enyo-text-error warning-icon"},
+			{kind: enyo.Button, caption: $L("OK"), onclick: "closeUberError", style: "margin-top:10px"},
+		]},
+		{kind:"ApplicationEvents"
+		,	onWindowHidden: "windowHiddenHandler"
+		}
+	],
+	
+	constructor: function UberGroupsEdit () {
+		this.inherited (arguments);
+	},
+	
+	create: function create () {
+		this.inherited (arguments);
+		this.setupUberGroups();
+		this.doingInput = false;
+		this.$.list.$.scroller["stabilize"] = function(){return true;}; //hack
+		this.$.list.resizeHandler = enyo.bind(this, this.vListResize);
+		enyo.application.watch ({accountsAndCalendars: this});
+	},
+
+	destroy: function destroy () {
+		enyo.application.ignore({accountsAndCalendars: this});
+		this.inherited (arguments);
+	},
+	
+	vListResize: function (){
+		if(this.$.list.hasNode()){
+			this.$.list.$.scroller.measure();
+			// FIXME: if we refresh, then we always re-render the dom, which seems
+			// unncessary and over-aggressive.
+			// if we merely update, then we don't blap away a rendering if list is hidden.
+			// in addition, it's more compatible with controls that have a render-specific state like editors
+			if(this.doingInput){
+				this.$.list.update();
+			} else {
+				this.$.list.refresh();
+			}
+			this.$.list.$.scroller.start();
+		}
+	},
+	
+	setupUberGroups: function setupUberGroups(){
+		var prefsMgr = enyo.application.prefsManager;
+		this.userUberCalGroups = [];
+		var grpsCookie = prefsMgr && prefsMgr.getUberCalendarPrefs({name:"userUberCalGroups"});
+		var len = grpsCookie && grpsCookie.length;
+		if(grpsCookie && len >0){
+			for(var i = 0; i<len; i++){
+				this.userUberCalGroups.push(grpsCookie[i]);
+			}
+			//console.error("Calendar list userUberCalGroups:  "+ JSON.stringify(this.userUberCalGroups));
+		} else {
+			var defCal = prefsMgr.getDefaultCalendar();
+			var grp = [{rId: "default", groupname: $L('Default Group'),includes: [defCal] , workweek: false}];
+			prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: grp});
+			this.userUberCalGroups = grp;
+		}
+		this.excludedCals =[];
+		this.perCalAlarms = prefsMgr && prefsMgr.prefs.perCalAlarms;
+		this.alarmsFollowToggles = prefsMgr && prefsMgr.prefs.alarmsFollowToggles;
+		var exccalscookie = prefsMgr && prefsMgr.getUberCalendarPrefs({name:"excCalAlarms"});
+		var len = exccalscookie && exccalscookie.length;
+		if (exccalscookie && len >0) {
+			for(var i = 0; i<len; i++){
+				this.excludedCals.push(exccalscookie[i]);
+			}
+		}
+		this.$.alarmsItemDivider.setShowing((this.perCalAlarms && !this.alarmsFollowToggles));
+		this.$.perCalAlarms.setShowing((this.perCalAlarms && !this.alarmsFollowToggles));
+		if((this.perCalAlarms && !this.alarmsFollowToggles)){
+			this.$.perCalAlarms.setGroupName("alarmExc");
+			this.$.perCalAlarms.$.groupName.setValue("alarmExc");
+			this.$.perCalAlarms.$.groupName.setShowing(false);
+			this.$.perCalAlarms.setGroupRId("alarmExc");
+			this.$.perCalAlarms.setWorkWeekOnly(false);
+			this.$.perCalAlarms.accountsAndCalendarsChanged();
+			this.$.perCalAlarms.setGroupIncludes(this.excludedCals.slice());		
+		}
+	},
+	
+	save: function save(){
+		var prefsMgr = enyo.application.prefsManager;
+		this.doingInput = false;
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0){
+			var len = this.userUberCalGroups.length, grp ={}, sublist = [], inc =[];
+			for(var i =0; i<len; i++){
+				this.$.list.prepareRow(i);
+				grp ={}
+				grp.includes = [];
+				inc = [];
+				grp.groupname = this.$.calList.getGroupName();
+				grp.rId = this.$.calList.getGroupRId();
+				grp.workweek = this.$.calList.getWorkWeekOnly();
+				inc = this.$.calList.getGroupIncludes();
+				grp.includes = inc && inc.slice();
+				if(grp && grp.rId && grp.groupname && grp.includes && grp.workweek !== undefined){
+					//console.error("pushing item :::::::::::: " + JSON.stringify(grp)); 
+					sublist.push(grp);
+				}
+				//console.error("Saving item :::::::::::: " + JSON.stringify(grp)); 
+			}
+			
+			if(sublist && sublist.length > 0){
+				console.error("Saving cookie :::::::::::: " );
+				prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: sublist});
+			} else {
+				// no valid groups erasing cookie.
+				console.error("Erasing cookie :::::::::::: " );
+				prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: false});
+			}
+		} else {
+			// no valid groups erasing cookie.
+				console.error("Erasing cookie :::::::::::: " );
+				enyo.application.prefsManager.setUberCalendarPrefs({name:"userUberCalGroups", values: false});
+		}
+		if(this.perCalAlarms && !this.alarmsFollowToggles){
+			var remindersManager = enyo.application.reminderManager;
+			var exc = [];
+			exc = this.$.perCalAlarms.getGroupIncludes();
+			this.excludedCals = [];
+			if(exc && exc.length > 0){
+				this.excludedCals = exc.slice();
+			}
+			if(this.excludedCals && this.excludedCals.length > 0){
+				console.error("Saving excluded alarms cookie :::::::::::: " + this.excludedCals);
+				remindersManager && remindersManager.updateExcCals(this.excludedCals.slice());
+				prefsMgr.setUberCalendarPrefs({name:"excCalAlarms", values: this.excludedCals.slice()});
+			} else {
+				remindersManager && remindersManager.updateExcCals([]);
+				console.error("Erasing Alarms cookie :::::::::::: " );
+				prefsMgr.setUberCalendarPrefs({name:"excCalAlarms", values: false});
+			}
+		}
+		this.doExit();
+	},
+	
+	cancel: function cancel(){
+		this.userUberCalGroups = [];
+		//this.$.list.punt();
+		this.doExit();	
+	},
+	
+	randId: function() {
+		var chars = "0123456789abcdefghiklmnopqrstuvwxyz";
+		var string_length = 4;
+		var randomstring = '';
+		for (var i=0; i<string_length; i++) {
+			var rnum = Math.floor(Math.random() * chars.length);
+			randomstring += chars.substring(rnum,rnum+1);
+		}
+		return randomstring;
+	},
+	
+	errorOpening: function(){
+		this.$.errText.setContent($L(this.uberTxt));
+	},
+	
+	closeUberError: function closeUberError(){
+		var errorBox = this.$.uberError;
+		errorBox.close();
+	},
+	
+	showUberError: function showUberError(msg){
+		var errorBox = this.$.uberError;
+		this.uberTxt = msg;
+		//this.$.errText.content =$L(txt);
+		errorBox.openAtCenter();
+	},
+	
+	gettChanges: function gettChanges(){
+		var ui = this.$;
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0){
+			var len = this.userUberCalGroups.length, grp ={}, sublist = [], inc =[];
+			for(var i =0; i<len; i++){
+				this.$.list.prepareRow(i);
+				grp ={}
+				grp.includes = [];
+				inc = [];
+				grp.groupname = this.$.calList.getGroupName();
+				grp.rId = this.$.calList.getGroupRId();
+				grp.workweek = this.$.calList.getWorkWeekOnly();
+				inc = this.$.calList.getGroupIncludes();
+				grp.includes = inc && inc.slice();
+				if(grp && grp.rId && grp.groupname && grp.includes && grp.workweek !== undefined){
+					console.error("getting changes before punt :::::::::::: " + JSON.stringify(grp)); 
+					sublist.push(grp);
+				}
+				//console.error("Saving item :::::::::::: " + JSON.stringify(grp)); 
+			}
+			if(sublist){
+				this.userUberCalGroups = [];
+				for(var i = 0; i<len; i++){
+					this.userUberCalGroups.push(sublist[i]);
+				}
+			}
+		}
+	},
+	
+	addGroup: function addGroup () {
+		var groupCookieChrs = JSON.stringify(this.userUberCalGroups).length;
+		//console.error("add Calendar group cookie length:  "+groupCookieChrs );
+		if(groupCookieChrs >1300) {
+			var msg =  groupCookieChrs + " characters.  Close to max number of groups, no more groups can be added.";
+			this.showUberError(msg);
+			return;
+		} else {
+			this.gettChanges();
+			var prefsMgr = enyo.application.prefsManager;
+			var len = this.userUberCalGroups.length;
+			var defCal = prefsMgr.getDefaultCalendar();
+			var rID = this.randId();
+			var newUberCal = {rId: rID, groupname:$L("New Group") + len, includes: [defCal], workweek: false};
+			this.userUberCalGroups.push(newUberCal); //set for cookie and list model
+			this.$.list.punt();
+		}
+	},
+	
+	itemSwipe: function itemSwipe (inSender, inIndex) {
+		if(inIndex !== undefined && inIndex !== null){
+			this.userUberCalGroups.splice(inIndex,1);
+			this.$.list.punt();
+		}
+	},
+	
+	inputFocus: function inputFocus(inSender, inEvent){
+		this.doingInput = true;
+		// if(!this.alarmsFollowToggles && this.perCalAlarms){
+			// this.$.alarmsItemDivider.setShowing(false);
+			// this.$.perCalAlarms.setShowing(false);
+		// }
+	},
+	
+	changedGroupName: function changedGroupName(inSender, name){
+		var idx = this.$.list.fetchRowIndex();
+		this.gettChanges();
+		this.userUberCalGroups[idx].groupname = name;
+		this.doingInput = false;
+		// if(!this.alarmsFollowToggles && this.perCalAlarms){
+			// this.$.alarmsItemDivider.setShowing(true);
+			// this.$.perCalAlarms.setShowing(true);
+		// }
+		// this.$.list.punt();
+	},
+	
+	listSetupRow: function listSetupRow (inSender, inIndex){
+		var grp, len = this.userUberCalGroups && this.userUberCalGroups.length;
+		this.doingInput = false;
+		if(inIndex <len && inIndex >= 0){
+			grp = {};
+			grp = this.userUberCalGroups[inIndex];
+			this.$.groupItemDivider.setCaption(grp.groupname);
+			this.$.calList.setGroupName(grp.groupname);
+			this.$.calList.$.groupName.setShowing(true);
+			this.$.calList.$.groupName.setValue(grp.groupname);
+			this.$.calList.setGroupRId(grp.rId);
+			this.$.calList.setWorkWeekOnly(grp.workweek);
+			this.$.calList.accountsAndCalendarsChanged();
+			this.$.calList.setGroupIncludes(grp.includes.slice());
+			
+			
+			return true;
+		}
+		//this.$.list.prepareRow(len-1);
+	},
+	
+	accountsAndCalendarsChanged: function accountsAndCalendarsChanged (oldAccountsAndCalendars) {
+		//console.error("groups edit accounts changed" + oldAccountsAndCalendars);
+		if(!this.showing){return; }
+		
+		//for alarms
+		if(this.perCalAlarms && !this.alarmsFollowToggles){
+			var prefsMgr = enyo.application.prefsManager;
+			var remindersManager = enyo.application.reminderManager;
+			this.$.perCalAlarms.updateList();
+			var exc = [];
+			exc = this.$.perCalAlarms.getGroupIncludes();
+			this.excludedCals = [];
+			if(exc && exc.length > 0){
+				this.excludedCals = exc.slice();
+			}
+			if(this.excludedCals && this.excludedCals.length > 0){
+				console.error("Saving excluded alarms cookie :::::::::::: " + this.excludedCals);
+				remindersManager && remindersManager.updateExcCals(this.excludedCals.slice());
+				prefsMgr.setUberCalendarPrefs({name:"excCalAlarms", values: this.excludedCals.slice()});
+			} else {
+				remindersManager && remindersManager.updateExcCals([]);
+				console.error("Erasing Alarms cookie :::::::::::: " );
+				prefsMgr.setUberCalendarPrefs({name:"excCalAlarms", values: false});
+			}
+		}
+		this.userUberCalGroups = [];
+		this.$.list.punt();
+		this.showing && this.doExit();
+	},
+	
+	showingChanged: function showingChanged(old){
+		if(!old && this.showing){
+			this.setupUberGroups();
+			this.$.list.punt();
+		}
+	},
+	
+	windowHiddenHandler: function windowHiddenHandler(){
+		this.userUberCalGroups = [];
+		this.$.list.punt();
+		this.showing && this.doExit();	
+	},
+
+});
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthCarousel.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthCarousel.js
index 5c72111..4c906f8 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthCarousel.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthCarousel.js
@@ -20,6 +20,7 @@ enyo.kind({
 	,	currentDate	: null	// Date		: For watching when the current date changes.
 	,	events		: null	// Object	: For watching Calendar Events (aka cache updates).
 	,	prefs		: null	// Object	: For watching calendar prefs
+	,	uberMode	: null	// Object	: For watching calendar mode
 	},
 
 	G11N:
@@ -40,6 +41,7 @@ enyo.kind({
 
 	create: function create () {
 		this.inherited (arguments);
+		this.uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
 		enyo.application.watch ({ calendars:this, events:this, prefs:this });
 	},
 
@@ -53,9 +55,15 @@ enyo.kind({
 	clickHandler: function monthClicked (from, domEvent) {
 		if (from instanceof this.MonthDay) {							// If any part of a MonthDay was clicked
 			DEBUG && this.log ("\tMonthDay: [",from.date,"]\t");
-			this.monthDayClicked = from.date;
-			enyo.application.share		({showView: {data: {view: calendar.day.DayView}}});	//	and switch to DayView.
-			return true;
+			this.uberMode = enyo.application.uberMode !== undefined ? enyo.application.uberMode : 2;
+			if(this.uberMode !==2) {
+				enyo.application.share({quickDate: {data: from.date}});
+				return true;
+			} else {
+				this.monthDayClicked = from.date;							//	update the currentMonth with that specific date's timestamp
+				enyo.application.share		({showView: {data: {view: calendar.day.DayView}}});	//	and switch to DayView.
+				return true;
+			}
 		}
 	},
 	
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthDay.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthDay.js
index ec3a975..1c979ad 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthDay.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthDay.js
@@ -16,6 +16,8 @@ enyo.kind({
 	,	date		: null		// Date		: This Month Day's actual date.
 	,	maxEvents	: NaN		// Number	: Maximum # of events to display per month day.
 	,	days		: null		// Array	: For watching day events.
+	,	useIcons	: true
+	,	enhancedView: true
 	},
 
 	G11N:
@@ -39,6 +41,9 @@ enyo.kind({
 		this.date		= new Date();
 		this.monthDate	= new Date();
 		this.windowRotatedHandler();
+		var prefs = enyo.application.prefsManager.prefs;
+		this.useIcons = !!prefs.monthUseIcons;
+		this.enhancedView = !!prefs.monthViewEnhanced;
 		this.changeEventColor = enyo.bind(this, this.changeEventColor);
 		this.resetEventColor = enyo.bind(this, this.resetEventColor);
 	},
@@ -122,6 +127,9 @@ enyo.kind({
 
 	dateChanged: function dateChanged (oldDate) {
 		this.day = undefined;
+		// var prefs = enyo.application.prefsManager.prefs;
+		// this.useIcons = !!prefs.monthUseIcons;
+		// this.enhancedView = !!prefs.monthViewEnhanced;
 		this.$.date.setContent	(this.G11N.shortFmt.format (this.date));
 
 		this.inCurrentMonth = this.monthDate.getMonth() == this.date.getMonth();
@@ -143,6 +151,8 @@ enyo.kind({
 			return;												//	Avoid updating it with events.
 		}
 
+
+
 		var dateString = String(+this.date)
 		,	day		= this.days && this.days[dateString] && (this.day = this.days[dateString])
 		;
@@ -188,11 +198,61 @@ enyo.kind({
 				(extras.length < 3) && extras.push ({ className:"event ellipsis", event:event, watchCalendars:false, calendars: calendars });
 			} else {
 				eventView.event = event;
-				eventViews.createComponent (eventView);
+				try {
+					if(event.note && this.useIcons && this.enhancedView){
+						//var start=[], patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+						var bgimage, start = [];
+						start = enyo.application.getNotesIconParts(event.note);
+						if (start && start[1]) {
+							var icon = start[1];
+							bgimage = "/media/internal/.scrims/ubercalendar/icon-" + icon + ".png";
+							//event && event.note && icon && bgimage && eventView && eventView.style= "background-color: " + bgimage; // + bgrepeat + bgposition;
+							//eventViews.createComponent (eventView);
+							var uberCont = bgimage && eventViews.createComponent({kind: enyo.HFlexBox, style:"position:relative; height: 13px;", defaultKind: "calendar.EventView"});//, className:"events"});
+							eventView.owner = eventViews;
+							bgimage && uberCont.createComponent({kind: enyo.Image, className:"ubermonthicon", style:"position:relative;height:10;width:10;top:-6px;left:-3px;z-index:3;padding: 0px;margin:0px;", owner: eventViews, src:bgimage});
+							uberCont && uberCont.createComponent(eventView);
+							
+							var uberDone = true;
+						} else{
+							eventViews.createComponent (eventView);
+							var uberDone = true;
+						}
+					} else {
+						eventViews.createComponent (eventView);
+					}
+				} catch(e) {
+				}
 			}
 		}
 		if (extras.length == 1) {
-			eventViews.createComponent (extras[0]);
+			try {
+				eventView = extras[0];
+				if(eventView.event.note && this.useIcons && this.enhancedView){
+					//var start=[], patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+					var bgimage, start = [];
+					start = enyo.application.getNotesIconParts(eventView.event.note);
+					if (start && start[1]) {
+						var icon = start[1];
+						bgimage = "/media/internal/.scrims/ubercalendar/icon-" + icon + ".png";
+						//event && event.note && icon && bgimage && eventView && eventView.style= "background-color: " + bgimage; // + bgrepeat + bgposition;
+						//eventViews.createComponent (eventView);
+						var uberCont = bgimage && eventViews.createComponent({kind: enyo.HFlexBox, style:"position:relative; height: 13px;", defaultKind: "calendar.EventView"});//, className:"events"});
+						eventView.owner = eventViews;
+						bgimage && uberCont.createComponent({kind: enyo.Image, className:"ubermonthicon", style:"position:relative;height:10;width:10;top:-6px;left:-3px;z-index:3;padding: 0px;margin:0px;", owner: eventViews, src:bgimage});
+						uberCont && uberCont.createComponent(eventView);
+						
+						var uberDone = true;
+					} else{
+						eventViews.createComponent (eventView);
+						var uberDone = true;
+					}
+				} else {
+					eventViews.createComponent (eventView);
+				}
+			
+			} catch(e){return;}
+			//eventViews.createComponent (extras[0]);
 			hasRenderContent ? eventViews.renderContent() : eventViews.render();	// PERF: Enyo team deprecating more performant renderContent :-(
 			return;
 		}
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthHeader.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthHeader.js
index 592cb6e..decd2c8 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthHeader.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/month/MonthHeader.js
@@ -20,10 +20,13 @@ enyo.kind({
 	},
 
 	components: [
-		{name:"dateHeader", kind:"calendar.DateHeader", className:"date", fit: false, formats:{
-			short	: new enyo.g11n.DateFmt({date: "medium", dateComponents: "my"})
-		,	full	: new enyo.g11n.DateFmt({date: "long", dateComponents: "my"})
-		}},
+		{kind:enyo.HFlexBox, components:[
+			{name:"dateHeader", kind:"calendar.DateHeader", style:"padding: 0px 4px 2px;", className:"date", fit: true, flex: 1, formats:{
+				"short"	: new enyo.g11n.DateFmt({date: "medium", dateComponents: "my"})
+			,	full	: new enyo.g11n.DateFmt({date: "long", dateComponents: "my"})
+			}},
+			{name:"weekNumber"	, style:"padding-right: 4px;", className:"today", showing:false}
+		]},
 		{name:"weekHeader", className:"weeks", kind: enyo.HFlexBox}
 	],
 
@@ -42,25 +45,98 @@ enyo.kind({
 		,	date	= this.date || new Date()
 		;
 		ui.dateHeader.setDate (new Date(date));
+		this.uberWeekNumber();
+	},
+	
+	uberWeekNumber: function uberWeekNumber (){
+		var prefs	= this.prefs || enyo.application.prefsManager.prefs;
+		if(!prefs.showWkNumber || !prefs.monthViewEnhanced) {
+			this.$.weekNumber.setShowing(false);
+			return;
+		}
+		var useISOweekNum = prefs.useISOWeekNumber
+		,	dayDate		= new Date (+this.date || Date.now())
+		,	dayDate2	= (new Date (+this.date || Date.now())).addMonths(1).addDays(-1)
+		,	weekNumOffset = prefs.weekNumberOffset
+		//,	weekModulusNum = prefs.weekModulusNum
+		,	prefStartDoW = prefs.startOfWeek -1
+		,	year = dayDate.getFullYear()
+		,	year2 = dayDate2.getFullYear()
+		,	month = dayDate.getMonth()
+		,	month2 = dayDate.getMonth()
+		,	day = dayDate.getDate()
+		,	day2 = dayDate2.getDate()	
+		,	maxwkn
+		,	weekNumber
+		,	weekNumber2;
+		dayDate.setTime(Date.UTC(year, month, day));
+		dayDate2.setTime(Date.UTC(year2, month2, day2));
+		
+		if(useISOweekNum === true){
+			weekNumber = dayDate.getISO8601Week();
+			weekNumber2 = dayDate2.getISO8601Week();
+			maxwkn = new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week();
+		} else {
+				dayDate = (dayDate.getDay() !== prefStartDoW) ? dayDate.moveToDayOfWeek(prefStartDoW, -1) : dayDate;
+				weekNumber = dayDate.getWeekOfYear(prefStartDoW);
+				dayDate.setTime(Date.UTC((month != 0 ? year : year -1), 11, 31));
+				dayDate.getDay() !== prefStartDoW && dayDate.moveToDayOfWeek(prefStartDoW, -1);
+				maxwkn = dayDate.getWeekOfYear(prefStartDoW);
+				weekNumber = weekNumber === 0 ? weekNumber = 1 : weekNumber;
+				
+				dayDate2 = (dayDate2.getDay() !== prefStartDoW) ? dayDate2.moveToDayOfWeek(prefStartDoW, -1) : dayDate2;
+				weekNumber2 = dayDate2.getWeekOfYear(prefStartDoW);
+				dayDate2.setTime(Date.UTC((month2 != 0 ? year2 : year2 -1), 11, 31));
+				dayDate2.getDay() !== prefStartDoW && dayDate2.moveToDayOfWeek(prefStartDoW, -1);
+				weekNumber2 = weekNumber2 === 0 ?  1 : weekNumber2;
+		}
+		
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		weekNumber = weekNumber == 0 ? maxwkn : weekNumber;
+		weekNumber2 = weekNumber2 == 0 ? maxwkn : weekNumber2;
+		if(weekNumOffset !== undefined && weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + weekNumOffset;
+			var wkNum2 = parseInt(weekNumber2,10) + weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber2 = wkNum2 > maxwkn ? (wkNum2 - maxwkn) : wkNum2;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+			weekNumber2 = weekNumber2 < 10 ? '0' + weekNumber2 : weekNumber2;
+		}
+		// if(weekModulusNum != undefined && weekModulusNum <= 52 && weekModulusNum != 1) {
+			// modNumber = (parseInt(weekNumber, 10) % weekModulusNum);
+			// modNumber = modNumber !== 0 ? modNumber : weekModulusNum;
+			// weekNumber = weekNumber + ' (' + modNumber +')';
+		// }
+		
+		this.$.weekNumber.setShowing(true);
+		var wkTemplate = new enyo.g11n.Template($L("Wk #{weekStr1}-#{weekStr2}"));
+		var weekTxt = wkTemplate.evaluate({weekStr1: weekNumber, weekStr2: weekNumber2});
+		this.$.weekNumber.setContent(weekTxt);
 	},
 
 	startOfWeekChanged: function startOfWeekChanged (oldStartOfWeek) {
 		if (this.startOfWeek === oldStartOfWeek) {
 			return;
 		}
-		var dayFormats	= this.G11N.fmts.dateTimeHash.long.day
+		var dayFormats	= this.G11N.fmts.dateTimeHash.short.day
 		,	headers		= this.$.weekHeader.getComponents()
 		,	startOfWeek	= this.startOfWeek
 		,	weekLength	= dayFormats.length
+		,	fmt = new enyo.g11n.DateFmt({date:"EEE"})
+		,	dt = new Date()
+		, txt
 		;
+		dt.moveToDayOfWeek(startOfWeek);
 		for (var dayIndex, i=0; i < weekLength; ++i) {
 			dayIndex = (i + startOfWeek) % weekLength;
-			headers[i].setContent (dayFormats [dayIndex]);
+			txt = fmt.format(dt);
+			headers[i].setContent (txt);
+			dt.addDays(1);
 		}
 	},
 
 	makeDayHeaders: function makeDayHeaders () {
-		var dayFormats	= this.G11N.fmts.dateTimeHash.long.day
+		var dayFormats	= this.G11N.fmts.dateTimeHash.short.day
 		,	weekLength	= dayFormats.length
 		,	weekHeader	= this.$.weekHeader
 		;
@@ -71,6 +147,7 @@ enyo.kind({
 			({	name	: day
 			,	content	: dayFormats [dayIndex]
 			,	flex	: 1
+			,	style	: "padding-left: 4px;"
 			});
 		}
 		this.startOfWeekChanged();
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/prefs/PreferencesView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/prefs/PreferencesView.js
index d06f5ca..356f66e 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/prefs/PreferencesView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/prefs/PreferencesView.js
@@ -12,6 +12,39 @@ enyo.kind(
 });
 
 enyo.kind(
+{	name	: "calendar.prefs.SnoozeSelector"
+,	kind	: enyo.ListSelector
+,	value	: "5"
+,	label	: $L("Snooze")
+,   hideArrow: true
+,	items	:[
+		{caption:$L('30 minutes before') + ' ' +$L('start'), value:'-30'},
+		{caption:$L('15 minutes before') + ' ' +$L('start'), value:'-15'},
+		{caption:$L('10 minutes before') + ' ' +$L('start'), value:'-10'},
+		{caption:$L('5 minutes before') + ' ' +$L('start'), value:'-5'},
+		{caption:$L('At Start Time'), value:'0'},
+		{caption:$L('5 minutes'), value:'5'},
+		{caption:$L('10 minutes'), value:'10'},
+		{caption:$L('15 minutes'), value:'15'},
+		{caption:$L('30 minutes'), value:'30'},
+		{caption:$L('1 hour'), value:'60'},
+		{caption:$L('2 hours'), value:'120'},
+		{caption:$L('4 hours'), value:'240'},
+		{caption:$L('8 hours'), value:'480'},
+		{caption:$L('10 hours'), value:'600'},
+		{caption:$L('12 hours'), value:'720'},
+		{caption:$L('1 day'), value:'1440'},
+		{caption:$L('2 days'), value:'2880'},
+		{caption:$L('3 days'), value:'4320'},
+		{caption:$L('4 days'), value:'5760'},
+		{caption:$L('5 days'), value:'7200'},
+		{caption:$L('6 days'), value:'8640'},
+		{caption:$L('1 week'), value:'10080'},
+		{caption:$L('2 weeks'), value:'20160'}
+	]
+});
+
+enyo.kind(
 {	name	: "calendar.prefs.TimedReminderSelector"
 ,	kind	: enyo.ListSelector
 ,	value	: "-PT5M"
@@ -23,9 +56,44 @@ enyo.kind(
 	,	{caption: $L("5 minutes before")	, value: "-PT5M"}
 	,	{caption: $L("10 minutes before")	, value: "-PT10M"}
 	,	{caption: $L("15 minutes before")	, value: "-PT15M"}
+	,	{caption: $L("20 minutes before")	, value: "-PT20M"}
 	,	{caption: $L("30 minutes before")	, value: "-PT30M"}
+	,	{caption: $L("45 minutes before")	, value: "-PT45M"}
 	,	{caption: $L("1 hour before")		, value: "-PT1H"}
+	,	{caption: $L("1 hour, 30 minutes before")	, value: "-PT90M"}
+	,	{caption: $L("2 hours before")		, value: "-PT2H"}
+	,	{caption: $L("2 hours, 30 minutes before")	, value: "-PT150M"}
+	,	{caption: $L("3 hours before")		, value: "-PT3H"}
+	,	{caption: $L("3 hours, 30 minutes before")	, value: "-PT210M"}
+	,	{caption: $L("4 hours before")		, value: "-PT4H"}
+	,	{caption: $L("5 hours before")		, value: "-PT5H"}
+	,	{caption: $L("6 hours before")		, value: "-PT6H"}
+	,	{caption: $L("7 hours before")		, value: "-PT7H"}
+	,	{caption: $L("8 hours before")		, value: "-PT8H"}
+	,	{caption: $L("10 hours before")		, value: "-PT10H"}
+	,	{caption: $L("12 hours before")		, value: "-PT12H"}
+	,	{caption: $L("18 hours before")		, value: "-PT18H"}
+	,	{caption: $L("23 hours before")		, value: "-PT23H"}
 	,	{caption: $L("1 day before")		, value: "-P1D"}
+	,	{caption: $L("36 hours before")		, value: "-PT36H"}
+	,	{caption: $L("2 days before")		, value: "-P2D"}
+	,	{caption: $L("2 days, 12 hours before")		, value: "-PT60H"}
+	,	{caption: $L("3 days before")		, value: "-P3D"}
+	,	{caption: $L("3 days, 12 hours before")		, value: "-PT84H"}
+	,	{caption: $L("4 days before")		, value: "-P4D"}
+	,	{caption: $L("5 days before")		, value: "-P5D"}
+	,	{caption: $L("6 days before")		, value: "-P6D"}
+	,	{caption: $L("1 week before")		, value: "-P1W"}
+	,	{caption: $L("2 weeks before")		, value: "-P2W"}
+	,	{caption: $L("3 weeks before")		, value: "-P3W"}
+	,	{caption: $L("4 weeks before")		, value: "-P4W"}
+	,	{caption: $L("8 weeks before")		, value: "-P8W"}
+	,	{caption: $L("12 weeks before")		, value: "-P12W"}
+	,	{caption: $L("16 weeks before")		, value: "-P16W"}
+	,	{caption: $L("20 weeks before")		, value: "-P20W"}
+	,	{caption: $L("24 weeks before")		, value: "-P24W"}
+	,	{caption: $L("52 weeks before")		, value: "-P52W"}
+
 	]
 });
 
@@ -38,10 +106,28 @@ enyo.kind(
 ,	items	:
 	[	{caption: $L("No Reminder")			, value: "none"}
 	,	{caption: $L("At start time")		, value: "-PT0M"}
+	,	{caption: $L("12 hours before")		, value: "-PT12H"}
+	,	{caption: $L("18 hours before")		, value: "-PT18H"}
 	,	{caption: $L("1 day before")		, value: "-P1D"}
+	,	{caption: $L("36 hours before")		, value: "-PT36H"}
 	,	{caption: $L("2 days before")		, value: "-P2D"}
+	,	{caption: $L("60 hours before")		, value: "-PT60H"}
 	,	{caption: $L("3 days before")		, value: "-P3D"}
+	,	{caption: $L("84 hours before")		, value: "-PT84H"}
+	,	{caption: $L("4 days before")		, value: "-P4D"}
+	,	{caption: $L("5 days before")		, value: "-P5D"}
+	,	{caption: $L("6 days before")		, value: "-P6D"}
 	,	{caption: $L("1 week before")		, value: "-P1W"}
+	,	{caption: $L("2 weeks before")		, value: "-P2W"}
+	,	{caption: $L("3 weeks before")		, value: "-P3W"}
+	,	{caption: $L("4 weeks before")		, value: "-P4W"}
+	,	{caption: $L("8 weeks before")		, value: "-P8W"}
+	,	{caption: $L("12 weeks before")		, value: "-P12W"}
+	,	{caption: $L("16 weeks before")		, value: "-P16W"}
+	,	{caption: $L("20 weeks before")		, value: "-P20W"}
+	,	{caption: $L("24 weeks before")		, value: "-P24W"}
+	,	{caption: $L("52 weeks before")		, value: "-P52W"}
+	
 	]
 });
 
@@ -52,7 +138,70 @@ enyo.kind(
 ,	items	:
 	[	{caption: $L("30 minutes")	, value: 30}
 	,	{caption: $L("1 hour")		, value: 60}
+	,	{caption: $L("90 minutes")	, value: 90}
 	,	{caption: $L("2 hours")		, value: 120}
+	,	{caption: $L("3 hours")		, value: 180}
+	,	{caption: $L("4 hours")		, value: 240}
+	,	{caption: $L("8 hours")		, value: 480}
+	]
+});
+
+enyo.kind(
+{	name	: "calendar.prefs.NotificationMaxRepeats"
+,	kind	: enyo.ListSelector
+,	value	: '99999'
+,   label   : $L("Max. Repeat")
+,   hideArrow: true
+,	items	:[
+		{caption:$L('Unlimited'), value:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{caption:$L('1'), value:'1'},
+		{caption:$L('2'), value:'2'},
+		{caption:$L('3'), value:'3'},
+		{caption:$L('4'), value:'4'},
+		{caption:$L('5'), value:'5'},
+		{caption:$L('10'), value:'10'},
+		{caption:$L('15'), value:'15'},
+		{caption:$L('20'), value:'20'},
+		{caption:$L('25'), value:'25'},
+		{caption:$L('30'), value:'30'},
+		{caption:$L('35'), value:'35'},
+		{caption:$L('40'), value:'40'},
+		{caption:$L('45'), value:'45'},
+		{caption:$L('50'), value:'50'},
+		{caption:$L('55'), value:'55'},
+		{caption:$L('60'), value:'60'},
+		{caption:$L('65'), value:'65'},
+		{caption:$L('70'), value:'70'},
+		{caption:$L('75'), value:'75'},
+		{caption:$L('80'), value:'80'},
+		{caption:$L('85'), value:'85'},
+		{caption:$L('90'), value:'90'},
+		{caption:$L('95'), value:'95'},
+		{caption:$L('100'), value:'100'}
+	]
+});
+
+enyo.kind(
+{	name	: "calendar.prefs.NotificationRepeatIntervals"
+,	kind	: enyo.ListSelector
+,	value	: '0'
+,   label   : $L("Repeat Interval")
+,   hideArrow: true
+,	items	:[
+		{caption:$L('Disabled'), value:'0'},
+		{caption:$L('5 Seconds'), value:'.083'},
+		{caption:$L('10 Seconds'), value:'.167'},
+		{caption:$L('15 Seconds'), value:'.25'},
+		{caption:$L('20 Seconds'), value:'.333'},
+		{caption:$L('25 Seconds'), value:'.417'},
+		{caption:$L('30 Seconds'), value:'.5'},
+		{caption:$L('1 Minutes'), value:'1'},
+		{caption:$L('2 Minutes'), value:'2'},
+		{caption:$L('3 Minutes'), value:'3'},
+		{caption:$L('4 Minutes'), value:'4'},
+		{caption:$L('5 Minutes'), value:'5'},
+		{caption:$L('10 Minutes'), value:'10'},
+		{caption:$L('15 Minutes'), value:'15'}
 	]
 });
 
@@ -78,6 +227,19 @@ enyo.kind(
 ,	textAlign	: "left"
 });
 
+enyo.kind({name:"calendar.prefs.UberMinuteInt"
+, kind: enyo.ListSelector
+, value:5
+, textAlign: "left"
+, items:[
+	{caption: $L("Event Minute Interval")+": 1", value: 1},
+	{caption: $L("Event Minute Interval")+": 5", value: 5},
+	{caption: $L("Event Minute Interval")+": 10", value: 10},
+	{caption: $L("Event Minute Interval")+": 15", value: 15},
+	{caption: $L("Event Minute Interval")+": 30", value: 30}
+	]
+});
+
 /*
  * Custom item kind for the ColorPicker popup menu.  Required so we could show the color swatch not using an image.
  * The regular MenuItem only allows a caption and an image-based icon.  Normally we could just add components
@@ -141,6 +303,204 @@ enyo.kind(
 });
 
 enyo.kind({
+	name		: "calendar.prefs.UberIconList",
+	kind		: enyo.VFlexBox,
+	flex: 1,
+	className	: "enyo-bg",
+	
+	components:[
+		{name:"uberIconDrawer", kind: enyo.Drawer, caption: $L("Categories"), style:"padding:5px;", open:false, onOpenChanged: "drawerChg", components: [
+			{name: "uberIconList", kind: enyo.VirtualList, style:"margin-top:10px;height:300px;", onSetupRow: "buildIconItems", components: [
+				{name: "iconRowItem", kind: enyo.SwipeableItem, onConfirm:"CatDelete", onclick: "CatSelected", style:"padding:0px;", components:[
+					{ kind:enyo.VFLexBox, flex:1, components: [
+						{kind: enyo.RowItem, style:"border:1px solid black;padding:1px;", components:[
+							{kind:enyo.InputBox, style:"padding:0px;", components: [
+								{kind:enyo.Control, style:"width:20px", align:"left", components:[
+									{name: "itemIcon", kind:enyo.Image, style:"height:12px", src:""}
+								]},
+								{ name: "iconName", kind: enyo.Input, showing:true, autoWordComplete:false, autoCapitalize:"lowercase", spellcheck: false, autocorrect: false, className: "enyo-input-inner", onfocus: "inputFocus", onchange: "iconChange", onkeypress:"verifyKeys"},
+								{ name: "addCatItem", style:"height:40px", kind: enyo.Control, tapHighlight: true, content:$L("Add Category"), showing: false, onclick:"addCategoryItem"}
+							]}
+						]}
+					]}
+				]}
+			]}
+		]}
+	
+	],
+	
+	uberCategories: [
+		{name: 'birthday'}, // Do NOT Localize these
+		{name: 'car'},
+		{name: 'doctor'},
+		{name: 'holiday'},
+		{name: 'kids'},
+		{name: 'party'},
+		{name: 'plane'},
+		{name: 'vacation'},
+	],
+	
+	vListResize: function (){
+		if(this.$.uberIconList.hasNode()){
+			this.$.uberIconList.$.scroller.measure();
+			// FIXME: if we refresh, then we always re-render the dom, which seems
+			// unncessary and over-aggressive.
+			// if we merely update, then we don't blap away a rendering if list is hidden.
+			// in addition, it's more compatible with controls that have a render-specific state like editors
+			if(this.doingInput){
+				this.$.uberIconList.update();
+			} else {
+				this.$.uberIconList.refresh();
+			}
+			this.$.uberIconList.$.scroller.start();
+		}
+	},
+	
+	create: function create () {
+		this.loadUserUberIcons();
+		this.inherited(arguments);
+		this.doingInput = false;
+		this.$.uberIconList.$.scroller["stabilize"] = function(){return true;}; //hack
+		this.$.uberIconList.resizeHandler = enyo.bind(this, this.vListResize);
+	},
+	
+	destroy: function destroy (){
+		this.saveUserUberIcons();
+		this.inherited(arguments);
+	},
+	
+	loadUserUberIcons: function loadUserUberIcons(){
+		var prefsMgr = enyo.application.prefsManager;
+		this.userUberIcons = [];
+		var iconCookie =  prefsMgr && prefsMgr.getUberCalendarPrefs({name:"userUberIcons"});
+		var len = iconCookie && iconCookie.length;
+		if(iconCookie && len >0){
+			for(var i = 0; i<len; i++){
+				this.userUberIcons.push(iconCookie[i]);
+			}
+		} else {
+			this.userUberIcons = this.uberCategories.slice();
+		}
+		this.iconsModified = false;
+	},
+	
+	saveUserUberIcons: function saveUserUberIcons(){
+		var icons = [], len = this.userUberIcons && this.userUberIcons.length;
+		var prefsMgr = enyo.application.prefsManager;
+		if(len > 0){
+			for(var i=0; i <len; i++){
+				var icon = this.userUberIcons[i];
+				if(icon && icon.name && icon.name != "" && icon.name !== "newcategory"){ // only save valid names
+					icons.push(this.userUberIcons[i]);
+				}
+			}
+			prefsMgr.setUberCalendarPrefs({name:"userUberIcons", values: icons});
+		} else { //user deleted all cats erase cookie
+			prefsMgr.setUberCalendarPrefs({name:"userUberIcons", values: false});
+		}
+	},
+	
+	buildIconItems: function buildIconItems (inSender, inIndex) {
+		var len = this.userUberIcons && this.userUberIcons.length;
+		//console.log("build list : " + inIndex);
+		if(this.userUberIcons && len > 0){
+			var idx = inIndex;
+			if(idx >= 0 && idx < len) {
+				var icon = this.userUberIcons[idx];
+				if(icon && icon.name){
+					this.$.itemIcon.setSrc("/media/internal/.scrims/ubercalendar/icon-" + icon.name + ".png");
+					this.$.iconName.setValue(icon.name);
+				}
+				return true;
+			} else if(idx === len) {
+				this.$.iconRowItem.setSwipeable(false);
+				this.$.itemIcon.setShowing(false);
+				this.$.iconName.setShowing(false);
+				this.$.addCatItem.setShowing(true);
+				return true;
+			}
+		} else {
+			return;
+		}
+	},
+	
+	CatDelete: function CatDelete (inSender, inIndex){
+		this.userUberIcons.splice(inIndex, 1);
+		this.doingInput = false;
+		this.$.uberIconList.punt();
+		this.saveUserUberIcons();
+		if(this.userUberIcons.length === 0){
+			this.userUberIcons = this.uberCategories.slice();
+			this.saveUserUberIcons();
+			this.$.uberIconList.punt();
+		}
+	},
+	
+	CatSelected: function CatSelected (inSender, inEvent){
+		if(this.$.iconName.getShowing()){
+			this.$.iconName.forceFocus();
+			this.$.iconName.forceSelect();
+		}
+	},
+	
+	iconChange: function iconChange(inSender, inEvent){
+		var testStr = this.$.iconName.getValue();
+		var idx = this.$.uberIconList.fetchRowIndex();
+		//console.log("input onchange fired ::::" + testStr); 
+		this.doingInput = false;
+		if(testStr && testStr !== ""){
+			testStr = testStr.replace(/[^\w\-]/g,"");
+			testStr = testStr.substring(0, 20);
+			this.userUberIcons[idx] = {name: testStr.toLowerCase()};
+			this.$.iconName.forceBlur();
+			this.$.uberIconList.reset();
+			//this.buildIconItems(idx -1);
+			this.saveUserUberIcons();
+		} else if (testStr === ""){
+			this.userUberIcons.splice(idx,1);
+			//this.$.iconName.blur();
+			this.$.uberIconList.punt();
+			this.saveUserUberIcons();
+		}
+		
+	},
+	
+	verifyKeys: function verifyKeys(inSender, inEvent){
+		var testStr = this.$.iconName.getValue();
+		if(testStr.length <22){
+			return
+		}
+		inEvent.preventDefault();
+	},
+	
+	addCategoryItem: function addCategoryItem (inSender, inEvent){
+		var len = this.userUberIcons.length;
+		this.userUberIcons.push({name:"newcategory"});
+		//this.$.uberIconList.punt();
+		this.$.uberIconList.prepareRow(len);
+		this.$.uberIconList.reset();
+		this.$.uberIconList.select(len);
+		this.$.iconRowItem.clickHandler(inSender, inEvent);
+		return true;
+	},
+	
+	stabilize: function stabilize(){
+		//override hack
+	},
+	
+	drawerChg: function drawerChg(inSender, inEvent){
+		if(this.$.uberIconDrawer.getOpen()){
+			this.$.uberIconList.refresh();
+		}
+	},
+	
+	inputFocus: function inputFocus(inSender, inEvent){
+		this.doingInput = true;
+	},
+
+});
+
+enyo.kind({
 	name		: "calendar.prefs.PreferencesView",
 	kind		: enyo.VFlexBox,
 	className	: "prefs enyo-bg",
@@ -157,6 +517,8 @@ enyo.kind({
 	},
 
 	components: [
+		{kind:"PalmService", name:"geTweaks", method:"get", service:"palm://org.webosinternals.tweaks.prefs/", onFailure:"tweaksFailedCallback", onSuccess: "gotTweaksReply"},
+		{kind:"PalmService", name:"seTweaks", method:"set", service:"palm://org.webosinternals.tweaks.prefs/", onFailure:"tweaksFailedCallback", onSuccess: "setAdvReq"},
 		{name: "pane", kind: enyo.Pane, flex: 1, components: [
 	    // This is the first view.  It contains all the app preferences and the accountsList
 
@@ -183,30 +545,219 @@ enyo.kind({
 					{kind: enyo.RowGroup, caption: $L("First Day of Week"), components:[
 						{kind: "calendar.day.DayPicker", name: "startOfWeek", onChange: "chooseStartOfWeek"}
 					]},
-//					Commenting out the following but keeping it in case it is needed again.
-//					{kind: enyo.RowGroup, caption: $L("Day Start and End"), components:[
-//						{kind: enyo.HFlexBox, components: [
-//							{content: $L("Start"), width: "3em", className: "enyo-picker-label"},
-//							{name: "dayStartTime", kind: enyo.TimePicker, label: " ", onChange: "chooseDayStartTime"}
-//						]},
-//						{kind: enyo.HFlexBox, components: [
-//							{content: $L("End"), width: "3em", className: "enyo-picker-label"},
-//							{name: "dayEndTime", kind: enyo.TimePicker, label: " ", onChange: "chooseDayEndTime"}
-//						]}
-//					]},
+					//Commenting out the following but keeping it in case it is needed again.
+					{kind: enyo.RowGroup, caption: $L("Day Start and End"), components:[
+						{kind: enyo.HFlexBox, components: [
+							{content: $L("Start"), width: "3em", className: "enyo-picker-label"},
+							{name: "dayStartTime", kind: enyo.TimePicker, label: " ", onChange: "chooseDayStartTime"}
+						]},
+						{kind: enyo.HFlexBox, components: [
+							{content: $L("End"), width: "3em", className: "enyo-picker-label"},
+							{name: "dayEndTime", kind: enyo.TimePicker, label: " ", onChange: "chooseDayEndTime"}
+						]}
+					]},
 					{kind: enyo.RowGroup, caption: $L("Default Event Duration"), components:[
 						{kind: "calendar.prefs.DurationSelector", onChange: "chooseDuration"}
 					]},
 
 					{kind: enyo.RowGroup, caption: $L("Default Event Reminder"), components:[
 						{kind: "calendar.prefs.TimedReminderSelector"	, name: "reminder"			, onChange: "chooseReminder"},
-						{kind: "calendar.prefs.AllDayReminderSelector"	, name: "allDayReminder"	, onChange: "chooseAllDayReminder"}
+						{kind: "calendar.prefs.AllDayReminderSelector"	, name: "allDayReminder"	, onChange: "chooseAllDayReminder"},
+						{kind: "calendar.prefs.SnoozeSelector"	, name: "snooze"	, onChange: "chooseSnooze"}
 					]},
 
 					{kind: enyo.RowGroup, caption: $L("Event Reminders"), components:[
 						{kind: "calendar.prefs.AlertSelector", onChange: "chooseAlert"}
 					]},
 
+					{kind: enyo.RowGroup, caption: $L("Enhanced Features"), components:[
+						{name:"uberCalDrawer", kind: enyo.Drawer, caption: $L("UberCalendar Prefs"), style:"padding:5px;", open:false, components: [
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout,  style:"margin-top:10px;",components:[
+								{flex: 1, content: $L("Show week number")},
+								{name:"showWkNumber", kind: enyo.ToggleButton, state: false, onChange:"chooseShowWkNumber"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Peek at agenda list")},
+								{name:"showPeek", kind: enyo.ToggleButton, state: false, onChange:"chooseShowPeek"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Shrink agenda list")},
+								{name:"shrinkAgenda", kind: enyo.ToggleButton, state: false, onChange:"chooseShrinkAgenda"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Stop auto close")},
+								{name:"stopAutoClose", kind: enyo.ToggleButton, state: true, onChange:"chooseStopAutoClose"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Blink for Alert")},
+								{name:"snoozeThrob", kind: enyo.ToggleButton, state: true, onChange:"chooseSnoozeThrob"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Disable reminders")},
+								{name:"disableReminders", kind: enyo.ToggleButton, state: false, onChange:"chooseDisableReminders"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Per calendar alarms")},
+								{name:"perCalAlarms", kind: enyo.ToggleButton, state: true, onChange:"choosePerCalAlarms"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Alarms follow toggles")},
+								{name:"alarmsFollowToggles", kind: enyo.ToggleButton, state: false, onChange:"chooseAlarmsFollowToggles"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"notificationMaxRepeat", kind:"calendar.prefs.NotificationMaxRepeats", onChange:"chooseNotificationMaxRepeats"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"notificationRepeatInterval", kind:"calendar.prefs.NotificationRepeatIntervals", onChange:"chooseNotificationRepeatIntervals"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Show agenda search")},
+								{name:"showSearch", kind: enyo.ToggleButton, state: false, onChange:"chooseShowSearch"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Snoozed for Banner")},
+								{name:"showSnoozeBanner", kind: enyo.ToggleButton, state: false, onChange:"chooseShowSnoozeBanner"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Link off after load")},
+								{name:"linkOffAfterLoad", kind: enyo.ToggleButton, state: false, onChange:"chooseLinkOffAfterLoad"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Auto confirm swipe in agenda")},
+								{name:"autoConfirmAgendaSwipe", kind: enyo.ToggleButton, state: false, onChange:"chooseAutoConfirmAgendaSwipe"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Day views enhanced"), onclick:"toggleDayDrawer"},
+								{name:"dayViewEnhanced", kind: enyo.ToggleButton, state: true, onChange:"chooseDayViewEnhanced"}
+							 ]},
+							 {name:"dayDrawer", kind: enyo.Drawer, style:"padding:5px;", open:false, components: [
+								{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Show mini month at start")},
+									{name:"dayShowMini", kind: enyo.ToggleButton, state: true, onChange:"chooseDayShowMini"}
+								 ]},
+								{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Day: view icons")},
+									{name:"dayUseIcons", kind: enyo.ToggleButton, state: true, onChange:"chooseDayUseIcons"}
+								 ]},
+								 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Day: alarm icons")},
+									{name:"dayAlarmIcons", kind: enyo.ToggleButton, state: true, onChange:"chooseDayAlarmIcons"}
+								 ]},
+								 {kind: enyo.RowItem, tapHighlight: false, components:[
+									{name:"dayHourHeight", kind: enyo.ListSelector, label: $L("Shrink Day View"), value: 59, onChange:"chooseDayHourHeight",
+										items: [{caption: $L("None"), value: 59}
+												,{caption: $L("Small"), value: 45}
+												,{caption: $L("Medium"), value: 37}
+												,{caption: $L("Strong"), value: 29}
+												]
+									}
+								 ]}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Week views enhanced"), onclick:"toggleWeekDrawer"},
+								{name:"weekViewEnhanced", kind: enyo.ToggleButton, state: true, onChange:"chooseWeekViewEnhanced"}
+							 ]},
+							 {name:"weekDrawer", kind: enyo.Drawer, style:"padding:5px;", open:false, components: [
+								{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Show mini month at start")},
+									{name:"weekShowMini", kind: enyo.ToggleButton, state: true, onChange:"chooseWeekShowMini"}
+								 ]},
+								{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Week: view icons")},
+									{name:"weekUseIcons", kind: enyo.ToggleButton, state: true, onChange:"chooseWeekUseIcons"}
+								 ]},
+								 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Week: alarm icons")},
+									{name:"weekAlarmIcons", kind: enyo.ToggleButton, state: true, onChange:"chooseWeekAlarmIcons"}
+								 ]},
+								 {kind: enyo.RowItem, tapHighlight: false, components:[
+									{name:"weekHourHeight", kind: enyo.ListSelector, label: $L("Shrink Week View"), value: 59, onChange:"chooseWeekHourHeight",
+										items: [{caption: $L("None"), value: 59}
+												,{caption: $L("Small"), value: 45}
+												,{caption: $L("Medium"), value: 37}
+												,{caption: $L("Strong"), value: 29}
+												]
+									}
+								 ]}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Month views enhanced"), onclick:"toggleMonthDrawer"},
+								{name:"monthViewEnhanced", kind: enyo.ToggleButton, state: true, onChange:"chooseMonthViewEnhanced"}
+							 ]},
+							 {name:"monthDrawer", kind: enyo.Drawer, style:"padding:5px;", open:false, components: [
+								{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Show mini month at start")},
+									{name:"monthShowMini", kind: enyo.ToggleButton, state: true, onChange:"chooseMonthShowMini"}
+								 ]},
+								{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+									{flex: 1, content: $L("Month: view icons")},
+									{name:"monthUseIcons", kind: enyo.ToggleButton, state: true, onChange:"chooseMonthUseIcons"}
+								 ]},
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Use ISO week number")},
+								{name:"useISOWeekNumber", kind: enyo.ToggleButton, state: true, onChange:"chooseISOWeek"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Scroll to current time")},
+								{name:"scrollToCurrentTime", kind: enyo.ToggleButton, state: true, onChange:"chooseScrollToCurrentTime"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Use subject in parenthesis")},
+								{name:"useParens", kind: enyo.ToggleButton, state: true, onChange:"chooseUseParens"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Work week only")},
+								{name:"workWeekOnly", kind: enyo.ToggleButton, state: false, onChange:"chooseWorkWeekOnly"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{flex: 1, content: $L("Enable UC Groups")},
+								{name:"enableUcGroups", kind: enyo.ToggleButton, state: true, onChange:"chooseEnableUcGroups"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"startUpGroup", kind: enyo.ListSelector, label: $L("Start up group"), value: "none", onChange:"chooseStartUpGroup",
+									items: [{caption: $L("None"), value: "none"}
+											]
+								}
+							 ]},
+							{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{name:"weekModulusNum", kind: enyo.IntegerPicker, label: $L("Week-Number Modulo"), value:1, min: 1, max: 52, onChange: "chooseWeekModulusNum"}
+							]},
+							{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+								{name:"weekNumberOffset", kind: enyo.IntegerPicker, label: $L("Week-Number Offset"), value:0, min: 0, max: 52, onChange: "chooseWeekNumberOffset"}
+							]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"openInView", kind: enyo.ListSelector, label: $L("Open In View"), value: "week", onChange:"chooseOpenInView",
+									items: [{caption: $L("Day"), value: "day"}
+											,{caption: $L("Week"), value: "week"}
+											,{caption: $L("Month"), value: "month"}
+											,{caption: $L("Last"), value: "last"}
+											]
+								}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"tapInView", kind: enyo.ListSelector, label: $L("Tap in view"), value: "view", onChange:"chooseTapInView",
+									items: [{caption: $L("Edit"), value: "edit"}
+											,{caption: $L("View"), value: "view"}
+											]
+								}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"tapInUberAgenda", kind: enyo.ListSelector, label: $L("Tap in agenda list"), value: "view", onChange:"chooseTapInUberAgenda",
+									items: [{caption: $L("Edit"), value: "edit"}
+											,{caption: $L("View"), value: "view"}
+											]
+								}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"uberMinuteInt", kind:"calendar.prefs.UberMinuteInt", label: $L("Event Minute Interval"), value: 5, onChange:"chooseUberMinuteInt"}
+							 ]},
+							 {kind: enyo.RowItem, tapHighlight: false, components:[
+								{name:"uberCats", kind:"calendar.prefs.UberIconList" }
+							 ]}
+						]}
+					]},
+
 					{kind: enyo.Group, caption: $L("Calendar Colors"), components: [
 						{name: "calendarList", kind: enyo.VirtualRepeater, onSetupRow: "getCalendar", components: [
 							{kind: enyo.Item, name: "calendarItem", onclick: "calendarClick", layoutKind: enyo.HFlexLayout, className:"accounts-list-item", components: [
@@ -216,7 +767,90 @@ enyo.kind({
 							]}
 						]},
 						{kind: "calendar.prefs.ColorPicker", name: "colorPicker", onSelect: "colorSelected"}
-					]}
+					]},
+					{kind: enyo.RowGroup, caption: $L("Advanced Sync Requirements"), components:[
+						
+							{name: "advReqNotEnabled", kind: enyo.RowItem, tapHighlight: false, components:[
+								{ content: $L("Tweaks Not Enabled")}
+							]},
+						{kind: enyo.VFlexBox, flex:1,components: [
+							{name: "advSyncReqList", kind: enyo.VirtualRepeater, onSetupRow: "setupAdvReqList", components: [
+								{kind: enyo.VFlexBox, flex:1,components: [
+								{kind: enyo.Item, tapHighlight: true, layoutKind: enyo.HFlexLayout, onclick:"openAdvSRAcctDrawer", components:[
+									{name: "advSRAcctIcon", kind: enyo.Image, className:"icon-image"},
+									{name: "advSRAcctName", flex: 1, className: "ellipsis cal-name"},
+									{name:"advSRUserName"}
+								 ]},
+								{name:"advSRAcctDrawer", kind: enyo.Drawer, style:"padding:5px;", open:false, components: [
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{flex: 1, content: $L("Enable Requirements")},
+										{name:"advSRAcctEnable", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{flex: 1, content: $L("Use for contacts")},
+										{name:"advSRAcctContacts", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{flex: 1, content: $L("Wifi only")},
+										{name:"advSRAcctWifi", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{flex: 1, content: $L("Cell data only")},
+										{name:"advSRAcctCell", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{name:"advSRAcctBatt", kind: enyo.IntegerPicker, label: $L("Min. battery %"), value:0, min: 0, max: 100, onChange: "chooseAdvSRAcctBatt"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: false, components:[
+										{name:"advSRAcctInterval", kind: enyo.ListSelector, label: $L("Interval"), value: "20m", onChange:"chooseAdvSRAcctInterval",
+											items: [{caption:$L('5 Minutes'), value:'5m'},
+													{caption:$L('10 Minutes'), value:'10m'},
+													{caption:$L('15 Minutes'), value:'15m'},
+													{caption:$L('20 Minutes'), value:'20m'},
+													{caption:$L('30 Minutes'), value:'30m'},
+													{caption:$L('1 Hour'), value:'60m'},
+													{caption:$L('3 Hours'), value:'3h'},
+													{caption:$L('6 Hours'), value:'6h'},
+													{caption:$L('12 Hours'), value:'12h'},
+													{caption:$L('1 Day'), value:'24h'},
+													{caption:$L('2 Days'), value:'2d'},
+													{caption:$L('4 Days'), value:'4d'},
+													{caption:$L('6 Days'), value:'6d'},
+													{caption:$L('8 Days'), value:'8d'},
+													{caption:$L('10 Days'), value:'10d'},
+													{caption:$L('14 Days'), value:'14d'}
+												]
+										}
+									 ]},
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{flex: 1, content: $L("Charging")},
+										{name:"advSRAcctCharging", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+										{flex: 1, content: $L("On touchstone")},
+										{name:"advSRAcctTouchstone", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									{kind: enyo.RowItem, tapHighlight: true, layoutKind: enyo.HFlexLayout, onclick: "openadvSRAcctTimeDrawer", components:[
+										{flex: 1, content: $L("Sync all day")},
+										{name:"advSRAcctAllday", kind: enyo.ToggleButton, state: false, onChange:"chooseAdvSRAcctOption"}
+									]},
+									
+									{name:"advSRAcctTimeDrawer", kind: enyo.Drawer, style:"padding:5px;", open:true, components: [
+										{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+											{content: $L("Start"), width: "3em", className: "enyo-picker-label"},
+											{name: "advSRAcctStartTime", kind: enyo.TimePicker, label: " ", minuteInterval: 5, onChange: "chooseAdvSRAcctStartTime"}
+										]},
+										{kind: enyo.RowItem, tapHighlight: false, layoutKind: enyo.HFlexLayout, components:[
+											{content: $L("End"), width: "3em", className: "enyo-picker-label"},
+											{name: "advSRAcctStopTime", kind: enyo.TimePicker, label: " ", minuteInterval: 5, onChange: "chooseAdvSRAcctStopTime"}
+										]}
+									]}
+								]}
+								]}
+							]}
+						]}
+					]},
+					{kind: enyo.Button, name: "advReqSetTweaksBtn", caption: $L("Set sync requirements"), onclick: "saveAdvReq"}
 				 ]}
 				]},
 				{className:"accounts-footer-shadow"},
@@ -237,12 +871,17 @@ enyo.kind({
 	],
 
 	create: function create () {
+		this.validReqAccounts = [];
+		this.advReqAcctListItems = [];
+		this.advancedSyncEnabled = false;
 		this.inherited (arguments);
 		enyo.application.watch({accountsAndCalendars: this});
 	},
 
 	ready: function ready (){
+		this.remindersManager = enyo.application.reminderManager;
 		this.$.accountsList.getAccountsList("CALENDAR", []);
+		this.setupAdvReqAccts();
 	},
 
 	destroy: function destroy(){
@@ -298,19 +937,66 @@ enyo.kind({
 		var ui = this.$;
 		ui.startOfWeek		.setValue (this.prefs.startOfWeek);
 		ui.reminder			.setValue (this.prefs.defaultEventReminder);
+		ui.snooze			.setValue (this.prefs.defaultSnooze);
 		ui.allDayReminder	.setValue (this.prefs.defaultAllDayEventReminder);
 		ui.durationSelector	.setValue (this.prefs.defaultEventDuration);
 		ui.alertSelector	.setValue (this.prefs.alarmSoundOn);
+		ui.showWkNumber		.setState (this.prefs.showWkNumber);
+		ui.showPeek			.setState (this.prefs.showPeek);
+		ui.shrinkAgenda		.setState (this.prefs.shrinkAgenda);
+		ui.stopAutoClose	.setState (this.prefs.stopAutoClose);
+		ui.snoozeThrob		.setState (this.prefs.snoozeThrob);
+		ui.disableReminders	.setState (this.prefs.disableReminders);
+		ui.perCalAlarms		.setState (this.prefs.perCalAlarms);
+		ui.alarmsFollowToggles.setState (this.prefs.alarmsFollowToggles);
+		ui.showSearch		.setState (this.prefs.showSearch);
+		ui.showSnoozeBanner	.setState (this.prefs.showSnoozeBanner);
+		ui.dayViewEnhanced	.setState (this.prefs.dayViewEnhanced);
+		ui.dayDrawer		.close();
+		ui.dayShowMini		.setState (this.prefs.dayShowMini);
+		ui.dayUseIcons		.setState (this.prefs.dayUseIcons);
+		ui.dayAlarmIcons	.setState (this.prefs.dayAlarmIcons);
+		ui.dayHourHeight	.setValue((this.prefs.dayHourHeight ? this.prefs.dayHourHeight: 59));
+		ui.weekViewEnhanced	.setState (this.prefs.weekViewEnhanced);
+		ui.weekDrawer		.close();
+		ui.weekShowMini		.setState (this.prefs.weekShowMini);
+		ui.weekUseIcons		.setState (this.prefs.weekUseIcons);
+		ui.monthViewEnhanced.setState (this.prefs.monthViewEnhanced);
+		ui.monthDrawer		.close();
+		ui.monthShowMini	.setState (this.prefs.monthShowMini);
+		ui.monthUseIcons	.setState (this.prefs.monthUseIcons);
+		ui.weekAlarmIcons	.setState (this.prefs.weekAlarmIcons);
+		ui.weekHourHeight	.setValue((this.prefs.weekHourHeight ? this.prefs.weekHourHeight: 59))
+		ui.useISOWeekNumber	.setState (this.prefs.useISOWeekNumber);
+		ui.scrollToCurrentTime	.setState (this.prefs.scrollToCurrentTime);
+		ui.useParens		.setState (this.prefs.useParens);
+		ui.workWeekOnly		.setState (this.prefs.workWeekOnly);
+		ui.enableUcGroups	.setState (this.prefs.enableUcGroups);
+		this.setupUberGroups();
+		ui.startUpGroup		.setValue(this.prefs.startUpGroup || "none");
+		ui.openInView		.setValue (this.prefs.openInView);
+		ui.linkOffAfterLoad	.setState (this.prefs.linkOffAfterLoad);
+		ui.autoConfirmAgendaSwipe	.setState (this.prefs.autoConfirmAgendaSwipe);
+		ui.tapInView		.setValue (this.prefs.tapInView);
+		ui.tapInUberAgenda	.setValue (this.prefs.tapInUberAgenda);
+		ui.uberMinuteInt	.setValue (this.prefs.uberMinuteInt);
+		ui.notificationRepeatInterval.setValue (this.prefs.notificationRepeatInterval);
+		ui.notificationMaxRepeat.setValue (this.prefs.notificationMaxRepeat);
+		ui.weekModulusNum	.setValue (this.prefs.weekModulusNum);
+		ui.weekNumberOffset	.setValue (this.prefs.weekNumberOffset);
+		ui.uberCalDrawer.close();
+		ui.uberCats.$.uberIconDrawer.close();
 
 //		Commenting out the following but keeping it in case it is needed again.
-//		var utcStartTime = new Date (this.prefs.startTimeOfDay);
-//		utcStartTime.addMinutes (utcStartTime.getTimezoneOffset());
-//		ui.dayStartTime.setValue (utcStartTime);
-//
-//		var utcEndTime = new Date (this.prefs.endTimeOfDay);
-//		utcEndTime.addMinutes (utcEndTime.getTimezoneOffset());
-//		ui.dayEndTime.setValue (utcEndTime);
+		var utcStartTime = new Date (this.prefs.startTimeOfDay);
+		utcStartTime.addMinutes (utcStartTime.getTimezoneOffset());
+		ui.dayStartTime.setValue (utcStartTime);
+
+		var utcEndTime = new Date (this.prefs.endTimeOfDay);
+		utcEndTime.addMinutes (utcEndTime.getTimezoneOffset());
+		ui.dayEndTime.setValue (utcEndTime);
 		this.setupDefaultCalendar();
+		this.setupAdvReqAccts();
 	},
 
 	setupDefaultCalendar: function setupDefaultCalendar(){
@@ -359,25 +1045,25 @@ enyo.kind({
 	},
 
 //	Commenting out the following but keeping it in case it is needed again.
-//	chooseDayStartTime: function chooseDayStartTime () {
-//		var value = this.$.dayStartTime.getValue()
-//		,	newStartOfDay = new Date(this.prefs.startTimeOfDay);
-//		newStartOfDay.setHours(value.getHours());
-//		newStartOfDay.setMinutes(value.getMinutes());
-//		// Convert the time back to utc
-//		newStartOfDay.addMinutes(-newStartOfDay.getTimezoneOffset());
-//		this.prefs.startTimeOfDay = newStartOfDay.getTime();
-//	},
-//
-//	chooseDayEndTime: function chooseDayEndTime () {
-//		var value = this.$.dayEndTime.getValue()
-//		,	newEndOfDay = new Date(this.prefs.endTimeOfDay);
-//		newEndOfDay.setHours(value.getHours());
-//		newEndOfDay.setMinutes(value.getMinutes());
-//		// Convert the time back to utc
-//		newEndOfDay.addMinutes(-newEndOfDay.getTimezoneOffset());
-//		this.prefs.endTimeOfDay = newEndOfDay.getTime();
-//	},
+	chooseDayStartTime: function chooseDayStartTime () {
+		var value = this.$.dayStartTime.getValue()
+		,	newStartOfDay = new Date(this.prefs.startTimeOfDay);
+		newStartOfDay.setHours(value.getHours());
+		newStartOfDay.setMinutes(value.getMinutes());
+		// Convert the time back to utc
+		newStartOfDay.addMinutes(-newStartOfDay.getTimezoneOffset());
+		this.prefs.startTimeOfDay = newStartOfDay.getTime();
+	},
+
+	chooseDayEndTime: function chooseDayEndTime () {
+		var value = this.$.dayEndTime.getValue()
+		,	newEndOfDay = new Date(this.prefs.endTimeOfDay);
+		newEndOfDay.setHours(value.getHours());
+		newEndOfDay.setMinutes(value.getMinutes());
+		// Convert the time back to utc
+		newEndOfDay.addMinutes(-newEndOfDay.getTimezoneOffset());
+		this.prefs.endTimeOfDay = newEndOfDay.getTime();
+	},
 	chooseReminder: function chooseReminder () {
 		this.prefs.defaultEventReminder = this.$.reminder.getValue();
 	},
@@ -389,6 +1075,10 @@ enyo.kind({
 	chooseDuration: function chooseDuration () {
 		this.prefs.defaultEventDuration = this.$.durationSelector.getValue();
 	},
+	
+	chooseSnooze: function chooseSnooze () {
+		this.prefs.defaultSnooze = this.$.snooze.getValue();
+	},
 
 	syncNow: function syncNow () {
 		enyo.application.calendarsManager.syncAllCalendars();
@@ -408,6 +1098,185 @@ enyo.kind({
 		}
 	},
 
+	chooseShowWkNumber: function chooseShowWkNumber(inSender, inState) {
+		this.prefs.showWkNumber = inState;
+	},
+	
+	chooseShowPeek: function chooseShowPeek(inSender, inState) {
+		this.prefs.showPeek = inState;
+	},
+	
+	chooseShrinkAgenda: function chooseShrinkAgenda(inSender, inState) {
+		this.prefs.shrinkAgenda = inState;
+	},
+	
+	chooseStopAutoClose: function chooseStopAutoClose(inSender, inState) {
+		this.prefs.stopAutoClose = inState;
+		this.remindersManager.stopAutoClose = inState;
+	},
+	
+	chooseSnoozeThrob: function chooseSnoozeThrob(inSender, inState) {
+		this.prefs.snoozeThrob = inState;
+		this.remindersManager.snoozeThrob = inState;
+	},
+	
+	chooseDisableReminders: function chooseDisableReminders(inSender, inState) {
+		this.prefs.disableReminders = inState;
+		this.remindersManager.disableReminders = inState;
+	},
+	
+	choosePerCalAlarms: function choosePerCalAlarms(inSender, inState) {
+		this.prefs.perCalAlarms = inState;
+		this.remindersManager.perCalAlarms = inState;
+	},
+	
+	chooseAlarmsFollowToggles: function chooseAlarmsFollowToggles(inSender, inState) {
+		this.prefs.alarmsFollowToggles = inState;
+		this.remindersManager.alarmsFollowToggles = inState;
+		this.remindersManager.setupAlarmsFollowToggles(inState);
+	},
+	
+	chooseShowSearch: function chooseShowSearch(inSender, inState) {
+		this.prefs.showSearch = inState;
+	},
+	
+	chooseShowSnoozeBanner: function chooseShowSnoozeBanner(inSender, inState) {
+		this.prefs.showSnoozeBanner = inState;
+	},
+	
+	chooseDayViewEnhanced: function chooseDayViewEnhanced(inSender, inState) {
+		this.prefs.dayViewEnhanced = inState;
+		this.$.dayDrawer.setOpen(inState);
+	},
+	
+	toggleDayDrawer: function toggleDayDrawer(inSender){
+		this.$.dayDrawer.toggleOpen();
+	},
+	
+	chooseDayShowMini: function chooseDayShowMini(inSender, inState) {
+		this.prefs.dayShowMini = inState;
+	},
+	
+	chooseDayUseIcons: function chooseDayUseIcons(inSender, inState) {
+		this.prefs.dayUseIcons = inState;
+	},
+	
+	chooseDayAlarmIcons: function chooseDayAlarmIcons(inSender, inState) {
+		this.prefs.dayAlarmIcons = inState;
+	},
+	
+	chooseDayHourHeight: function chooseDayHourHeight() {
+		this.prefs.dayHourHeight = this.$.dayHourHeight.getValue();
+	},
+	
+	chooseWeekViewEnhanced: function chooseWeekViewEnhanced(inSender, inState) {
+		this.prefs.weekViewEnhanced = inState;
+		this.$.weekDrawer.setOpen(inState);
+	},
+	
+	toggleWeekDrawer: function toggleWeekDrawer(inSender){
+		this.$.weekDrawer.toggleOpen();
+	},
+	
+	chooseWeekShowMini: function chooseWeekShowMini(inSender, inState) {
+		this.prefs.weekShowMini = inState;
+	},
+	
+	chooseWeekUseIcons: function chooseWeekUseIcons(inSender, inState) {
+		this.prefs.weekUseIcons = inState;
+	},
+	
+	chooseWeekAlarmIcons: function chooseWeekAlarmIcons(inSender, inState) {
+		this.prefs.weekAlarmIcons = inState;
+	},
+	
+	chooseWeekHourHeight: function chooseWeekHourHeight() {
+		this.prefs.weekHourHeight = this.$.weekHourHeight.getValue();
+	},
+	
+	chooseMonthViewEnhanced: function chooseMonthViewEnhanced(inSender, inState) {
+		this.prefs.monthViewEnhanced = inState;
+		this.$.monthDrawer.setOpen(inState);
+	},
+	
+	toggleMonthDrawer: function toggleMonthDrawer(inSender){
+		this.$.monthDrawer.toggleOpen();
+	},
+	
+	chooseMonthShowMini: function chooseMonthShowMini(inSender, inState) {
+		this.prefs.monthShowMini = inState;
+	},
+	
+	chooseMonthUseIcons: function chooseMonthUseIcons(inSender, inState) {
+		this.prefs.monthUseIcons = inState;
+	},
+	
+	chooseISOWeek: function chooseISOWeek(inSender, inState) {
+		this.prefs.useISOWeekNumber = inState;
+	},
+	
+	chooseScrollToCurrentTime: function chooseScrollToCurrentTime(inSender, inState) {
+		this.prefs.scrollToCurrentTime = inState;
+	},
+	
+	chooseUseParens: function chooseUseParens(inSender, inState) {
+		this.prefs.useParens = inState;
+	},
+	
+	chooseEnableUcGroups: function chooseEnableUcGroups(inSender, inState) {
+		this.prefs.enableUcGroups = inState;
+	},
+	
+	chooseWorkWeekOnly: function chooseWorkWeekOnly(inSender, inState) {
+		this.prefs.workWeekOnly = inState;
+	},
+	
+	chooseWeekModulusNum: function chooseWeekModulusNum() {
+		this.prefs.weekModulusNum = this.$.weekModulusNum.getValue();
+	},
+	
+	chooseWeekNumberOffset: function chooseWeekNumberOffset() {
+		this.prefs.weekNumberOffset = this.$.weekNumberOffset.getValue();
+	},
+	
+	chooseOpenInView: function chooseOpenInView() {
+		this.prefs.openInView = this.$.openInView.getValue();
+	},
+	
+	chooseStartUpGroup: function chooseStartUpGroup() {
+		this.prefs.startUpGroup = this.$.startUpGroup.getValue();
+	},
+	
+	chooseLinkOffAfterLoad: function chooseLinkOffAfterLoad(inSender, inState) {
+		this.prefs.linkOffAfterLoad = inState;
+	},
+	
+	chooseAutoConfirmAgendaSwipe: function chooseAutoConfirmAgendaSwipe(inSender, inState) {
+		this.prefs.autoConfirmAgendaSwipe = inState;
+	},
+	
+	chooseTapInView: function chooseTapInView() {
+		this.prefs.tapInView = this.$.tapInView.getValue();
+	},
+	
+	chooseTapInUberAgenda: function chooseTapInUberAgenda() {
+		this.prefs.tapInUberAgenda = this.$.tapInUberAgenda.getValue();
+	},
+	
+	chooseUberMinuteInt: function chooseUberMinuteInt() {
+		this.prefs.uberMinuteInt = this.$.uberMinuteInt.getValue();
+	},
+	
+	chooseNotificationRepeatIntervals: function chooseNotificationRepeatIntervals() {
+		this.prefs.notificationRepeatInterval = this.$.notificationRepeatInterval.getValue();
+		this.remindersManager.notificationRepeatInterval = this.$.notificationRepeatInterval.getValue();
+	},
+	
+	chooseNotificationMaxRepeats: function chooseNotificationMaxRepeats() {
+		this.prefs.notificationMaxRepeat = this.$.notificationMaxRepeat.getValue();
+		this.remindersManager.notificationMaxRepeat = this.$.notificationMaxRepeat.getValue();
+	},
+	
 	calendarClick: function calendarClick(inSender, inEvent) {
 		var calendar = this.calendars[inEvent.rowIndex];
 		this.$.colorPicker.setCalendarId(calendar._id);
@@ -422,12 +1291,363 @@ enyo.kind({
 		var calendarIndex = inSender.getCalendarIndex();
 		enyo.application.calendarsManager.setCalendarColor(calendarId, value);
 	},
+	
+	openAdvSRAcctDrawer: function openAdvSRAcctDrawer(inSender, inEvent){
+		this.$.advSRAcctDrawer.toggleOpen();
+	},
+	
+	openadvSRAcctTimeDrawer: function openadvSRAcctTimeDrawer(inSender, inEvent){
+		this.$.advSRAcctTimeDrawer.toggleOpen();
+	},
+	
+	chooseAdvSRAcctOption: function chooseAdvSRAcctOption(inSender, inState){
+		console.error("toggle sender " + inSender.name);
+		var map = {advSRAcctEnable: "onoff", advSRAcctContacts: "contacts", advSRAcctWifi: "wifi",
+			advSRAcctCell: "cell", advSRAcctCharging: "charging", advSRAcctTouchstone: "docked",
+			advSRAcctAllday: "allday"};
+		var prop = map[inSender.name];
+		var idx = this.$.advSyncReqList.fetchRowIndex();
+		this.advReqAcctListItems[idx][prop] = inState;
+		console.error("advReqAcctListItems index " +idx+ ", prop " + prop + ", value: "+inState);
+	},
+	
+	chooseAdvSRAcctInterval: function chooseAdvSRAcctInterval(inSender, inValue, oldValue){
+		var idx = this.$.advSyncReqList.fetchRowIndex();
+		var val = inValue;
+		this.advReqAcctListItems[idx].interval = val;
+		console.error("advReqAcctListItems index:" +idx+ ", interval: " + val);
+	},
+	
+	chooseAdvSRAcctBatt: function chooseAdvSRAcctBatt(inSender){
+		var idx = this.$.advSyncReqList.fetchRowIndex();
+		var val = this.$.advSRAcctBatt.getValue();
+		this.advReqAcctListItems[idx].batt = val;
+		console.error("advReqAcctListItems index:" +idx+ ", battery: " + val);
+	},
+	
+	chooseAdvSRAcctStartTime: function chooseAdvSRAcctStartTime(inSender){
+		var idx = this.$.advSyncReqList.fetchRowIndex();
+		var val = this.$.advSRAcctStartTime.getValue();
+		this.advReqAcctListItems[idx].starttime =  new Date(val.getTime());
+		console.error("advReqAcctListItems index:" +idx+ ", starttime: " + val);
+	},
+	
+	chooseAdvSRAcctStopTime: function chooseAdvSRAcctStopTime(inSender){
+		var idx = this.$.advSyncReqList.fetchRowIndex();
+		var val = this.$.advSRAcctStopTime.getValue();
+		this.advReqAcctListItems[idx].endtime = new Date(val.getTime());
+		console.error("advReqAcctListItems index:" +idx+ ", endtime: " + val);
+	},
 
 	addAccountTemplates: function(inSender, templates) {
 		this.templates = templates;
 	},
 
-
+	setupUberGroups: function setupUberGroups(){
+		if(!this.prefs){ return;}
+		this.userUberCalGroups = [];
+		var ui = this.$;
+		var prefsMgr = enyo.application.prefsManager;
+		var grpsCookie = prefsMgr && prefsMgr.getUberCalendarPrefs({name:"userUberCalGroups"});
+		var len = grpsCookie && grpsCookie.length;
+		if(grpsCookie && len >0){
+			for(var i = 0; i<len; i++){
+				this.userUberCalGroups.push(grpsCookie[i]);
+			}
+			//console.error("prefs  userUberCalGroups:  "+ JSON.stringify(this.userUberCalGroups));
+		} else {
+			var defCal = prefsMgr.getDefaultCalendar();
+			var grp = [{rId: "default", groupname: $L('Default Group'),includes: [defCal] , workweek: false}];
+			prefsMgr.setUberCalendarPrefs({name:"userUberCalGroups", values: grp});
+			this.userUberCalGroups = grp;
+		}
+		if(this.userUberCalGroups && this.userUberCalGroups.length >0){
+			var items = [];
+			items.push({caption: $L('None'), value:'none'});
+			for(var grp, len = this.userUberCalGroups.length, i=0; i<len;i++){
+				grp = this.userUberCalGroups[i];
+				items.push({caption: grp.groupname, value: grp.rId});
+			}
+			if(ui.startUpGroup && items && items.length > 1){
+				ui.startUpGroup.setItems(items);
+			}
+		}
+	},
+	
+	setupAdvReqAccts: function setupAdvReqAccts(){
+		var calmgr = enyo.application.calendarsManager;
+		this.advReqAccounts = calmgr.getAdvReqCalList();
+		if(this.advReqAccounts && this.advReqAccounts.length > 0){
+			var acct, len = this.advReqAccounts.length;
+			for(var i=0;i<len;i++){
+				acct = this.advReqAccounts[i] && this.advReqAccounts[i]._id;
+				if(acct && acct !== undefined && acct !== ""){
+					if(this.validReqAccounts.indexOf(acct) === -1){
+						this.validReqAccounts.push(acct);
+					}
+				}
+			}
+		}
+		return this.getTweaksAdvReq();
+	},
+	
+	tweaksFailedCallback: function tweaksFailedCallback(inSender, response){
+		console.error("TWEAKS call failed : " + (inSender && JSON.stringify(response)) );
+		this.advSyncReq = {};
+		this.$.advReqNotEnabled.setShowing(true);
+		this.$.advReqSetTweaksBtn.setShowing(false);
+	},
+	
+	gotTweaksReply: function(inSender, response){
+		//console.error("got tweaks response: " + JSON.stringify(response));
+		var fromDefault = false, reqs = {}, ui = this.$,
+		defaults,
+		acctOps;
+		
+		this.advSyncReq = {};
+		this.needTweaksSave = false;
+		if(response){
+			if(response.advancedSyncEnabled){
+				this.advancedSyncEnabled = true;
+				ui.advReqNotEnabled.setShowing(false);
+				ui.advReqSetTweaksBtn.setShowing(true);
+				if(response.syncStringField && response.syncStringField !== ""){
+					try{
+						reqs = JSON.parse(response.syncStringField);
+						if(reqs && reqs !== undefined){
+							for(var prop in reqs){// saved accountIds
+								if(this.validReqAccounts.indexOf(prop) !== -1 && reqs.hasOwnProperty(prop) && !this.advSyncReq.hasOwnProperty(prop)){
+									//valid account, not previously added, so add
+									this.advSyncReq[prop] = [];
+									defaults = this.getDefaultSync(prop);
+									if(reqs[prop] && reqs[prop] !== undefined && reqs[prop].length){
+										//has a valid array
+										acctOps = reqs[prop].slice(0);
+										for(var j=0;j<defaults.length;j++){
+											if(acctOps[j] != undefined && acctOps[j] !== null ){
+												this.advSyncReq[prop][j] = acctOps[j];
+											} else {
+												this.advSyncReq[prop][j] = defaults[j];
+												this.needTweaksSave = true;
+											}
+										}
+									} else {
+										this.needTweaksSave = true;
+										this.advSyncReq[prop] = defaults.slice(0);
+									}
+									//console.error("TWEAKS adv req results: " + prop + ",values: " + JSON.stringify(this.advSyncReq[prop]) );
+								} else {
+									//not valid account or duplicate
+									console.error("TWEAKS adv req results skipping account Id: " + prop);
+								}
+							}
+						}
+					} catch(err){//parsing error set defaults
+						console.error("TWEAKS adv req parsing response error!!! " + JSON.stringify(err) );
+						var id,len = this.validReqAccounts.length;
+						this.needTweaksSave = true;
+						for(var i=0;i<len;i++){
+							id = this.validReqAccounts[i];
+							this.advSyncReq[id] = this.getDefaultSync(id);
+						}
+						fromDefault = true;
+					}
+				} else { // enabled but nothing saved, set defaults
+					console.error("TWEAKS adv req no saved requirements");
+					this.needTweaksSave = true;
+					var id,len = this.validReqAccounts.length;
+					for(var i=0;i<len;i++){
+						id = this.validReqAccounts[i];
+						this.advSyncReq[id] = this.getDefaultSync(id);
+					}
+					fromDefault = true;
+				}
+				// have an object from tweaks, did a calendar get added?
+				if(!fromDefault){
+					var acctOps, def, id,len = this.validReqAccounts.length;
+					for(var i=0;i<len;i++){
+						id = this.validReqAccounts[i];
+						def = this.getDefaultSync(id);
+						if(!this.advSyncReq.hasOwnProperty(id) || this.advSyncReq[id] === undefined){
+							this.advSyncReq[id] = def.slice(0);
+							this.needTweaksSave = true;
+							console.error("TWEAKS adv req added an account or reset account: " + id);
+						} else {
+							acctOps = this.advSyncReq[id].slice(0);
+							for(var j=0;j<def.length;j++){
+								if(acctOps[j] != undefined && acctOps[j] !== null ){
+									this.advSyncReq[id][j] = acctOps[j];
+								} else {
+									this.advSyncReq[id][j] = def[j];
+									this.needTweaksSave = true;
+								}
+							}
+						}
+						console.error("TWEAKS adv req results: " + id + ",values: " + JSON.stringify(this.advSyncReq[id]) );
+					}
+				}
+				this.buildAdvReqModels();
+			} else {
+				console.error("TWEAKS adv req not enabled");
+				this.advancedSyncEnabled = false;
+				ui.advReqNotEnabled.setShowing(true);
+				ui.advReqSetTweaksBtn.setShowing(false);
+			}
+			
+		}
+	},
+	
+	buildAdvReqModels: function buildAdvReqModels(){
+		this.advReqAcctListItems = [];
+		if(this.validReqAccounts && this.validReqAccounts.length > 0){
+			var hrs, mins, sDate, eDate, acctId, allDay, allDayDisabled, openStartEnd, interval, obj = {}, acctOps =[], len = this.validReqAccounts.length;
+			var timeMachine = new Date();
+			for(var i=0;i<len;i++){
+				acctId = this.validReqAccounts[i];
+				acctOps = this.advSyncReq[acctId].slice(0);
+				this.advReqAcctListItems[i] = {};
+				this.advReqAcctListItems[i].Id = i;
+				interval = acctOps[5];
+				timeMachine.setTime(acctOps[9]);
+				hrs = timeMachine.getUTCHours();
+				mins = timeMachine.getUTCMinutes();
+				sDate = new Date(2000, 0, 1, hrs, mins, 0, 0);
+				timeMachine.setTime(acctOps[10]);
+				hrs = timeMachine.getUTCHours();
+				mins = timeMachine.getUTCMinutes();
+				eDate = new Date(2000, 0, 1, hrs, mins, 0, 0);
+				if(interval.indexOf("m") !== -1 || (interval.indexOf("h") !== -1 && parseInt(interval,10) <= 6)){
+					allDay = acctOps[8];
+					allDayDisabled = false;
+					openStartEnd = !allDay;
+				} else {
+					openStartEnd =false;
+					allDayDisabled = true;
+					allDay = true;
+				}
+				this.advReqAcctListItems[i]._id = this.advReqAccounts[i]._id;
+				this.advReqAcctListItems[i].alias = this.advReqAccounts[i].alias;
+				this.advReqAcctListItems[i].username = this.advReqAccounts[i].username;
+				this.advReqAcctListItems[i].accountName = this.advReqAccounts[i].accountName;
+				this.advReqAcctListItems[i].icon = this.advReqAccounts[i].icon;
+				this.advReqAcctListItems[i].bigOpen = false;
+				this.advReqAcctListItems[i].onoff = acctOps[0];
+				this.advReqAcctListItems[i].contacts  = acctOps[1];
+				this.advReqAcctListItems[i].wifi = acctOps[2];
+				this.advReqAcctListItems[i].cell = acctOps[3];
+				this.advReqAcctListItems[i].batt = parseInt(acctOps[4], 10);
+				this.advReqAcctListItems[i].interval = acctOps[5];
+				this.advReqAcctListItems[i].charging = acctOps[6];
+				this.advReqAcctListItems[i].docked = acctOps[7];
+				this.advReqAcctListItems[i].allday = allDay;
+				this.advReqAcctListItems[i].openStartEnd = openStartEnd;
+				this.advReqAcctListItems[i].allDayDisabled = allDayDisabled;
+				this.advReqAcctListItems[i].starttime = sDate;
+				this.advReqAcctListItems[i].endtime = eDate;
+				//console.error("build adv req models, account: " + acctId + ", ops: " + JSON.stringify(this.advReqAcctListItems[i]));
+			}
+			this.$.advSyncReqList.render();
+		}
+	},
+	
+	setupAdvReqList: function setupAdvReqList(inSender, inIndex){
+		if(!this.showing){console.error("AdvReq prefs view not showing");return false;}
+		//console.error("setupAdvReqList " + inSender + ", inIndex " + inIndex);
+		var item, ui = this.$, len = this.advReqAcctListItems.length;
+		var idx = inIndex;
+		var is24Hr = this.is24Hr;
+		//console.error("len " + len + " , asEnabled: " + this.advancedSyncEnabled + ", idx: " + idx);
+		if(len > 0 && idx < len && this.advancedSyncEnabled){
+			item = this.advReqAcctListItems[idx];
+			if(item){
+				ui.advSRAcctIcon.setSrc(item.icon);
+				ui.advSRAcctName.setContent(item.alias?item.alias:item.accountName);
+				ui.advSRUserName.setContent(item.username);
+				ui.advSRAcctEnable.setState(item.onoff);
+				ui.advSRAcctContacts.setState(item.contacts);
+				ui.advSRAcctWifi.setState(item.wifi);
+				ui.advSRAcctCell.setState(item.cell);
+				ui.advSRAcctBatt.setValue(item.batt);
+				ui.advSRAcctInterval.setValue(item.interval);
+				ui.advSRAcctCharging.setState(item.charing);
+				ui.advSRAcctTouchstone.setState(item.docked);
+				ui.advSRAcctAllday.setState(item.allday);
+				ui.advSRAcctAllday.setDisabled(item.allDayDisabled);
+				ui.advSRAcctStartTime.setValue(item.starttime);
+				ui.advSRAcctStartTime.setIs24HrMode (is24Hr);
+				ui.advSRAcctStopTime.setValue(item.endtime);
+				ui.advSRAcctStopTime.setIs24HrMode (is24Hr);
+				ui.advSRAcctTimeDrawer.setOpen(item.openStartEnd);
+			}
+			return true;
+		}
+	},
+	
+	getTweaksAdvReq: function(){
+		var ui = this.$;
+		if(this.validReqAccounts && this.validReqAccounts.length > 0){
+			ui.geTweaks.call({ owner: "google-first-sync", 
+					keys: ["advancedSyncEnabled", "syncStringField"]});
+		} else { //no valid sync accounts, skip
+			this.advSyncReq = {};
+		}
+	},
+	
+	getDefaultSync: function (Id){
+		var timeMachine = new Date(2000, 0, 1, 0, 0, 0, 0);
+		timeMachine.setHours(7);
+		var start = timeMachine.getTime();
+		timeMachine.setHours(18);
+		var end = timeMachine.getTime();
+		var defaults = [false /*onoff*/, false /*contacts*/, false /*wifi*/, false /*cell*/, 0 /*battery*/, "20m" /*0d0h20m0s*/, false /*charging*/, false /*docked*/, true /*all day*/, start, end];
+		var acct, idx, len = this.advReqAccounts.length;
+		for(var i=0;i<len;i++){
+			acct = this.advReqAccounts[i];
+			if(acct && acct._id === Id){
+				idx = i;
+				if((acct.accountName.toLowerCase()).indexOf("facebook") !== -1){
+					defaults[5] = "24h";
+				}
+				break;
+			}
+		}
+		return defaults.slice(0);
+	},
+	
+	saveAdvReq: function(){
+		if(this.advancedSyncEnabled){
+			var hrs, mins, acct = {}, acctId, tempList = [], obj = {}, len, _id;
+			var map = ["onoff", "contacts","wifi","cell","batt","interval","charging","docked", "allday", "starttime", "endtime"];
+			
+			len = this.advReqAcctListItems.length;
+			for(var i=0;i<len;i++){
+				acct = this.advReqAcctListItems[i];
+				_id = acct._id;
+				for(var j=0;j<map.length;j++){
+					if(j === 9 || j === 10){
+						hrs = (acct[map[j]]).getHours();
+						mins = (acct[map[j]]).getMinutes();
+						tempList[j] = Date.UTC(2000, 0, 1, hrs, mins, 0, 0);
+					} else {
+						tempList[j] = acct[map[j]];
+					}
+				}
+				obj[_id] = tempList.slice(0);
+			}
+			if(obj){
+				var objJson = JSON.stringify(obj);
+				console.error("prefs saving tweaks: " + objJson)
+				this.$.seTweaks.call({ owner: "google-first-sync", 
+									"syncStringField": objJson});
+			}
+		}
+	},
+	
+	setAdvReq: function(inSender, result){
+		console.error("prefs saved tweaks result: " + JSON.stringify(result) );
+		//close???
+	},
+	
 	// "Add Account" button was tapped
 	addAccount: function addAccount(button) {
 		this.$.AccountsView.AddAccount(this.templates);
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/MissedRemindersView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/MissedRemindersView.js
index d42166c..883b6c1 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/MissedRemindersView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/MissedRemindersView.js
@@ -1,41 +1,55 @@
 enyo.kind({
 	name		: "calendar.reminders.MissedRemindersView",
 	kind		: enyo.VFlexBox,
-	//className	: "enyo-bg",
+	className	: "missed enyo-bg",
 
 	events: {
 		onExit:"",	
 		onShowEventDetails: ""	
 	},
+	
+	published: {
+		reminderState: null //watching for changes
+	},
 
 	components: [
-		{kind: enyo.PageHeader, components:[
-			{kind: enyo.Image, src: "./images/notification-large-calendar.png"},
-			{content: $L("Missed Reminders")}
-		]},	
-			
-		{flex: 1, name: "list", kind: enyo.VirtualList, className: "list", lookAhead: 0, pageSize: 1, onSetupRow: "listSetupRow", components: [
-			{kind: enyo.SwipeableItem, className: "item", confirmRequired: false, onConfirm: "itemSwipe", onclick: "itemClick", components: [
-				{kind: enyo.HFlexBox, components: [
-					{kind: enyo.Image, src: "./images/notification-large-calendar.png"},
-					{kind: enyo.VFlexBox, components: [
-						{name: "subject", className: "reminder-text reminder-event-subject"},
-						{name: "subtitle", className: "reminder-text reminder-event-location"} //"Today 5:30pm at Location"	
+		{name: "pane", kind: enyo.Pane, flex: 1, components: [
+			{kind: enyo.VFlexBox, name: "missedAndAccounts",  components: [
+				{kind: enyo.PageHeader, className:"enyo-toolbar-light missed-header", pack:"center", components:[
+					{kind: enyo.Image, src:"/usr/palm/applications/com.palm.app.calendar/images/header-icon-calendar48x48.png", className: "missedIcon"},
+					{content: $L("Missed Reminders"), className:""}
+				]},	
+				{className:"missed-header-shadow"},
+				{name:"contentScroller", kind: enyo.Scroller, flex: 1, components: [
+					{kind:"VFlexBox", className:"box-center missed-body", components: [
+						{flex: 1, name: "list", kind: enyo.VirtualList, className: "list", lookAhead: 0, pageSize: 1, onSetupRow: "listSetupRow", components: [
+							{kind: enyo.SwipeableItem, confirmRequired: true, onConfirm: "itemSwipe", onclick: "itemClick", components: [
+								{kind: enyo.HFlexBox, components: [
+									{kind: enyo.Image, src:"../images/notification-large-calendar.png", style:"height:48px;width:48px", className:"notification-icon", flex:1},
+									{kind: enyo.VFlexBox, components: [
+										{name: "subject", className: ""},
+										{name: "subtitle", className: ""} //"Today 5:30pm at Location"	
+									]}
+								]}
+							]}
+						]}
+					]}
+				]},
+				{className:"missed-footer-shadow"},
+				{kind:"Toolbar", className:"enyo-toolbar-light",components:[
+					{kind: enyo.HFlexBox, components:[
+						{kind: enyo.Button, name: "btnDismissAll", className: "enyo-button-negative", caption: $L("Dismiss All"), onclick: "dismissAll" },
+						{kind: enyo.Button, name: "btnDone", className: "enyo-button-afirmative", caption: $L("Done"), onclick: "exit" }
 					]}
 				]}
 			]}
-		]},
-		
-		{kind: enyo.HFlexBox, components:[
-			{kind: enyo.Button, name: "btnDismissAll", caption: $L("Dismiss All"), onclick: "dismissAll" },
-			{kind: enyo.Button, name: "btnDone", caption: $L("Done"), onclick: "exit" }
-		]}		
+		]}
 	],
 	
 	create: function create() {
-		console.info("======= MRL: create");
+		//console.info("======= MRL: create");
 		this.inherited (arguments);
-		this.reminderManager = new ReminderManager();
+		this.reminderManager = enyo.application.reminderManager;
 		enyo.application.watch({reminderState: this});
 		this.reminders = this.reminderManager.getAllReminders();
 		this.showCount = 0;
@@ -44,10 +58,10 @@ enyo.kind({
 	showingChanged: function showingChanged(){
 		this.inherited (arguments);
 		if(this.getShowing()){
-			console.info("======= MRL: show");
+			//console.info("======= MRL: show");
 			this.showCount++;
 			if(this.showCount > 0){
-				this.$.list.refresh();
+				this.$.list.punt();
 			}	
 		}
 		else{
@@ -56,13 +70,13 @@ enyo.kind({
 	},
 		
 	exit: function exit(){
-		console.info("======= MRL: exit");
+		//console.info("======= MRL: exit");
 		enyo.application.ignore({reminderState: this});
 		this.doExit();
 	},
 	
 	listSetupRow: function listSetupRow(inSender, inIndex) {
-		console.info("======= MRL: listSetupRow");
+		//console.info("======= MRL: listSetupRow");
 		if (!this.reminders) {
 			this.reminders = this.reminderManager.getAllReminders();
 		}						
@@ -78,7 +92,7 @@ enyo.kind({
 	},
 	
 	itemClick: function itemClick(item, arg2, itemIndex){
-		console.info("======= MRL: itemClick");
+		//console.info("======= MRL: itemClick");
 		var reminder = this.reminders[itemIndex];
 		//TODO: Launch edit view
 		this.reminderManager.showEventDetails(reminder);
@@ -87,22 +101,22 @@ enyo.kind({
 	},
 
 	itemSwipe: function itemSwipe(item, itemIndex){
-		console.info("======= MRL: itemSwipe");		
+		//console.info("======= MRL: itemSwipe");		
 		var reminder = this.reminders[itemIndex];
 		this.reminderManager.dismissReminder(reminder);
 	},
 	
 	dismissAll: function dismissAll(){
-		console.info("======= MRL: dismissAll");
-		this.reminderManager.dismissAllReminders();
+		//console.info("======= MRL: dismissAll");
+		this.reminderManager.missedDismissAll();
 		this.exit();
 	},
 		
-	remindersUpdated: function remindersDisplayUpdated(reminder){
-		console.info("======= MRL: remindersDisplayUpdated");
+	reminderStateChanged: function reminderStateChanged(reminderState){
+		//console.info("======= MRL: remindersDisplayUpdated");
 		this.reminders = this.reminderManager.getAllReminders();
 		if(this.showCount > 0){
-			this.$.list.refresh();
+			this.$.list.punt();
 		}
 	},
 });
\ No newline at end of file
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.css b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.css
index 344e5bf..bedb776 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.css
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.css
@@ -14,6 +14,12 @@ body {
 	font-size:16px;
 	font-weight:bold;
 }
+#snoozeTxt {
+	width:260px;
+	font-size:12px;
+	margin:0px;
+	padding:1px;
+}
 .notification-subject,
 .notification-body {
 	width:260px;
@@ -39,4 +45,68 @@ body {
 }
 .button-left {
 	margin-right:4px;
+}
+.missed .missed-header {
+	font-size				: 20px;
+	text-align			 	: center;
+}
+
+.missed .enyo-header-inner {
+	margin					: 0px;
+	padding					: 0px;
+	text-align				: center;
+}
+
+.missedIcon {
+	margin-right			: 5px;
+}
+
+.calendar-color-image {
+	width: 30px;
+	height: 30px;
+	padding-right: 15px;
+}
+
+.missed .legend	{
+	background-image		: url(../../images/glossy-top-highlight.png);
+	background-repeat		: repeat-x;
+	height					: 26px; 
+	width					: 26px;
+	padding					: 0;
+	-webkit-border-radius	: 4px;
+}
+
+.missed .color-space {
+	margin-left: 8px;
+}
+
+.missed .cal-name {
+	width: 60%;
+}
+
+.missed .icon-image {
+	width: 32px;
+	height: 32px;
+}
+
+.missed-header img {
+    display:block;
+    margin-right: 10px;
+}
+.missed-header-shadow,
+.missed-footer-shadow {
+    position: absolute; 
+    z-index: 100;
+    height: 3px;
+    width: 100%;
+    pointer-events: none;
+}
+.missed-header-shadow {
+    top: 54px;
+    background:transparent url('../../images/light_chrome_drop_shadow_header.png') bottom repeat-x;
+}
+.missed-footer-shadow {
+    bottom: 0;
+    height: 57px; 
+    background:transparent url('../../images/light_chrome_drop_shadow_footer.png') top repeat-x;
 }
\ No newline at end of file
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.js
index 599fa21..bfcb85b 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/reminders/ReminderDialog.js
@@ -25,7 +25,7 @@ enyo.kind({
 		,	dateComponents	: "md"
 		})
 	,	runningLate		: $L("Running late. On my way...")
-	,	snoozedTemplate	: new enyo.g11n.Template ($L("1#Snoozed for 1 minute|#Snoozed for #{num} minutes"))
+	,	snoozedTemplate	: new enyo.g11n.Template ($L("0<#Snoozed for #{num} minutes before start|0#Snoozed at start time|1#Snoozed for 1 minute|1>#Snoozed for #{num} minutes"))
 	},
 
 	components: [
@@ -40,22 +40,43 @@ enyo.kind({
 		]},
 		{components: [
 			{kind:"NotificationButton", name: "btnEmail", content: $L("Contact Meeting Attendees"), onclick: "emailClicked", showing: false, className: "enyo-notification-button button-top" },
-			{kind: enyo.HFlexBox, components: [
+			{name: "snoozeTxt", className: "notification-body", content:"Hi"},
+			{name:"defBtnRow", kind: enyo.HFlexBox, showing:true, components: [
 				{
-					kind:"NotificationButton", name: "btnSnooze", content: $L("Snooze"), className: "enyo-notification-button-alternate button-right", flex:1, onclick: "snoozeClicked"
+					kind:"NotificationButton", name: "btnDismiss", content: $L("Dismiss"),	className: "enyo-notification-button-affirmative button-right", flex:1, onclick: "dismissClicked"
 				},
 				{
-					kind:"NotificationButton", name: "btnDismiss", content: $L("Dismiss"),	className: "enyo-notification-button-affirmative button-left", flex:1, onclick: "dismissClicked"
+					kind:"NotificationButton", name: "btnSnooze", content: $L("Snooze"), className: "enyo-notification-button-alternate button-left", flex:1, onclick: "snoozeClicked"
+				},
+				{
+					kind:"NotificationButton", name:"plusMinus", content:"+/-", style:"margin-bottom:4px;", onclick: "PlusMinusClicked"
 				}
 			]},
-		]}
+			{name:"ucBtnRow", kind: enyo.HFlexBox, showing: false, components: [
+				{
+					kind:"NotificationButton", name: "minus", content: "-",	className: "enyo-notification-button button-left", onclick: "minusClicked"
+				},
+				{
+					kind:"NotificationButton", name: "btnSnooze2", content: $L("Snooze"), className: "enyo-notification-button-alternate", flex:1, onclick: "snoozeClicked"
+				},
+				{
+					kind:"NotificationButton", name:"plus", content:"+", className: "enyo-notification-button button-right", onclick: "plusClicked"
+				}
+			]}
+		]},
+		{name:"playAlarmSound", kind: enyo.PalmService, service:"palm://com.palm.activitymanager/", method:"create", onResponse:"setupPlayAlarmSoundResponse"}
 	],
 
 	create: function create() {
 		//this.rdlog("create");
 		this.inherited			(arguments);
-		this.DEFAULT_SNOOZE		= 5;
 		this.reminderManager	= enyo.application.reminderManager;
+		this.prefs 				= enyo.application.prefsManager.prefs;
+		this.DEFAULT_SNOOZE		= parseInt((this.prefs.defaultSnooze || 5), 10);
+		this.stopAutoClose		= !!this.prefs.stopAutoClose;
+		this.showSnoozeBanner		= !!this.prefs.showSnoozeBanner;
+		this.notificationRepeatInterval = (this.prefs.notificationRepeatInterval || 0);
+		this.notificationMaxRepeat = parseInt((this.prefs.notificationMaxRepeat || 2), 10);
 		enyo.application.watch	({reminderState: this});
 	},
 
@@ -95,9 +116,148 @@ enyo.kind({
 		var	attendees	= this.reminder.attendees
 		,	num			= attendees && attendees.length
 		;
+		this.getValidSnooze();
+		this.rdlog("updateDialog: repeatsFired:" + this.repeatsFired +", not rep: " + this.notificationRepeatInterval + ", max rep: " + this.notificationMaxRepeat);
+		if(parseFloat(this.notificationRepeatInterval) !== 0 && this.repeatsFired < parseInt(this.notificationMaxRepeat)) {
+			if(this.reminderManager.fromDash === false) {
+				this.rdlog("scheduling play alarm sound: repeatsFired:" + this.repeatsFired +", notif rep: " + this.notificationRepeatInterval + ", max rep: " + this.notificationMaxRepeat);
+				this.schedulePlayAlarmSoundTask();
+			} else {
+				this.reminderManager.fromDash = false;
+			}
+		}
+		ui.snoozeTxt.setContent(this.snoozeOptions[this.snzIndex].caption);
+		ui.ucBtnRow.setShowing(false);
+		ui.defBtnRow.setShowing(true);
 		ui.btnEmail.setShowing (!(num === 1 && attendees[0].organizer || !num));
 	},
 
+	schedulePlayAlarmSoundTask: function schedulePlayAlarmSoundTask() {
+		//retrigger reminder every X minutes until we acknowledge it.
+		//notificationRepeatInterval disables the notification repeat
+		//also check to make sure we have not exceeded the max repeat value
+		var repeatNum = this.repeatsFired !== undefined ? this.repeatsFired : 0;
+		if( (parseFloat(this.notificationRepeatInterval) != 0 && repeatNum < parseInt(this.notificationMaxRepeat)) || (parseFloat(this.notificationRepeatInterval) === 0 && this.stopAutoClose === true) ) {
+			var playSoundTime = new Date();
+			if(parseFloat(this.notificationRepeatInterval) != 0 && repeatNum < parseInt(this.notificationMaxRepeat)) {
+				this.repeatsFired = repeatNum + 1;
+				playSoundTime.setTime(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+			} else {
+				// repeat notification is disabled, but stop auto close is on
+				// schedule a snooze 7 mins before autoClose time to change autoclose time
+				var endTime = parseInt(this.reminder.endTime, 10);
+				var autoTime = parseInt(this.reminder.autoCloseTime, 10);
+				var startTime = parseInt(this.reminder.startTime, 10);
+				var dura = endTime - startTime;
+				var testTime = (dura < 900000) ? (startTime+900000) : (startTime+dura);
+				// verify this is the first time setting auto close time
+				if(autoTime === testTime) {
+					playSoundTime.setTime(autoTime - 7*60*1000);
+				} else {
+					return;
+				}
+			}
+			var at = this.dateFormatForScheduler(playSoundTime);
+			var reminderJSON = JSON.stringify(this.reminder);
+			//this.rdlog("sched play: repeatsFired:" + this.repeatsFired +", not rep: " + this.notificationRepeatInterval + ", mac rep: " + this.notificationMaxRepeat + ", " + reminderJSON);
+			var activityArgs =
+			{	"start"		: true
+			,	"replace"	: true
+			,	"activity"	:
+				{	"name"			: "calendar.playAlarmSound"
+				,	"description"	: "repeat notification"
+				,	"type"			:
+					{	"persist"		: false
+					,	"foreground"	: true
+					}
+				,	"schedule"	: {"start": at}
+				,	"callback":
+					{
+						"method": "palm://com.palm.applicationManager/launch",
+						"params": {
+							"id": "com.palm.app.calendar",
+							"params": {"playAlarmSound": reminderJSON}
+						}
+					}
+				}
+			}
+			this.rdlog("playAlarm sound schedule request sent: " + this.reminder.eventId + ", repeatsFired:" + this.repeatsFired +", notif rep: " + this.notificationRepeatInterval + ", max rep: " + this.notificationMaxRepeat);
+			this.$.playAlarmSound.call(activityArgs);
+		}
+	},
+	
+	setupPlayAlarmSoundResponse: function setupPlayAlarmSoundResponse(inSender, result){
+		this.rdlog("playAlarm sound scheduled" + JSON.stringify(result));
+	},
+	
+	dateFormatForScheduler: function dateFormatForScheduler(date){
+		var year = date.getUTCFullYear();
+		var mon = date.getUTCMonth() + 1;
+		var day = date.getUTCDate();
+
+		var hrs = date.getUTCHours();
+		var min = date.getUTCMinutes();
+		var sec = date.getUTCSeconds();
+
+		mon = (mon < 10) ? ("0"+mon) : mon;
+		day = (day < 10) ? ("0"+day) : day;
+		hrs = (hrs < 10) ? ("0"+hrs) : hrs;
+		min = (min < 10) ? ("0"+min) : min;
+		sec = (sec < 10) ? ("0"+sec) : sec;
+
+		var dateString;
+			//YYYY-MM-DD HH:MM:SSZ
+		dateString = "" + year +"-"+ mon +"-"+ day + " " + hrs +":"+ min +":"+ sec + "Z";
+		return dateString
+	},
+	
+	getValidSnooze: function getValidSnooze(){
+		this.snoozeOptions = [];
+		this.DEFAULT_SNOOZE		= parseInt((this.prefs.defaultSnooze || 5), 10);
+		this.snoozeOptions = this.snoozeDurationOptions.slice(0);
+		var curDate = new Date();
+		var curDateTS = curDate.getTime();
+		var defSnooze = this.snoozeOptions[0].value;
+		var defSnoozeTS = defSnooze * 60*1000; //put in millisec
+		var testDateTS = this.reminder.startTime + defSnoozeTS;
+		while(testDateTS <= curDateTS && defSnooze <= 0)
+		{
+			//remove the invalid option
+			var tmp = this.snoozeOptions.shift();
+			defSnooze = parseInt(this.snoozeOptions[0].value);
+			defSnoozeTS = defSnooze * 60*1000;
+			testDateTS = this.reminder.startTime + defSnoozeTS;
+		}
+		this.repeatsFired =0;
+		this.snzProps = this.reminderManager.findSnoozedListItem(this.reminder.eventId);
+		if(this.snzProps && this.snzProps !== -1) {
+			this.repeatsFired = this.snzProps.repeatNumber !== undefined ? this.snzProps.repeatNumber : 0 ;
+			if(this.snzProps.lastSnooze !== undefined){
+				var testsnz = parseInt(this.snzProps.lastSnooze, 10)/(60*1000);
+				
+				for(var i=0; i<this.snoozeOptions.length; i++) {
+					if(this.snoozeOptions[i].value == testsnz) {
+						this.snzIndex = i;
+						this.DEFAULT_SNOOZE = parseInt(this.snoozeOptions[i].value, 10);
+						return;
+					}
+				}
+			}
+		}
+		for(var i=0; i<this.snoozeOptions.length; i++) {
+			if(this.DEFAULT_SNOOZE == parseInt(this.snoozeOptions[i].value, 10)) {
+				this.snzIndex = i;
+				return;
+			}
+		}
+		//if the DEFAULT_SNOOZE < defSnooze then it is no longer a valid snooze option so use the next valide value
+		if( this.DEFAULT_SNOOZE < defSnooze )
+		{
+			this.DEFAULT_SNOOZE = defSnooze;
+			this.snzIndex= 0;
+		}
+	},
+
 	detailClicked: function detailClicked() {
 		//this.rdlog("detailClicked: "+this.reminder._id);
 		this.reminderManager.showEventDetails(this.reminder);
@@ -125,12 +285,56 @@ enyo.kind({
 
 	snoozeClicked: function snoozeClicked (event) {
 		//this.rdlog ("snoozeClicked: "+ this.reminder._id);
-		this.showSnoozedBanner (this.DEFAULT_SNOOZE, this.reminder);
-		this.reminderManager.snoozeReminder (this.reminder);
+		var snzTS;
+		var curTS = new Date().getTime();
+		if(this.DEFAULT_SNOOZE === 0) {
+			snzTS = this.reminder.startTime - curTS;
+		} else if (this.DEFAULT_SNOOZE <0){
+			snzTS = (this.reminder.startTime + this.DEFAULT_SNOOZE*60*1000) - curTS;
+		} else {
+			snzTS = this.DEFAULT_SNOOZE*60*1000;
+		}
+		if (snzTS <0) {
+			snzTS = 1000;
+		}
+		if (this.stopAutoClose === true) {
+			this.showSnoozedBanner (this.DEFAULT_SNOOZE, this.reminder);
+			this.reminder.autoCloseTime = parseInt(this.reminder.autoCloseTime, 10) + snzTS + 24*60*60*1000; // snooze time + 1 day
+			this.reminder.autoCloseTime = this.reminder.autoCloseTime.toString();
+			this.reminderManager.snoozeReminder(this.reminder, snzTS, this.reminder.autoCloseTime);
+		} else {
+			this.showSnoozedBanner (this.DEFAULT_SNOOZE, this.reminder);
+			this.reminderManager.snoozeReminder(this.reminder, snzTS);
+		}
+		
+		//this.reminderManager.snoozeReminder (this.reminder);
+	},
+	
+	PlusMinusClicked: function PlusMinusClicked (event){
+		//this.rdlog("plus minus fired!!!!!!!");
+		this.$.defBtnRow.setShowing(false);
+		this.$.ucBtnRow.setShowing(true);
+	},
+	
+	plusClicked: function plusClicked (event){
+		var length = this.snoozeOptions.length;
+		this.snzIndex = (this.snzIndex + 1) < length ? (this.snzIndex + 1) : 0;
+		this.$.snoozeTxt.setContent(this.snoozeOptions[this.snzIndex].caption);
+		this.DEFAULT_SNOOZE = parseInt(this.snoozeOptions[this.snzIndex].value, 10);
+		//this.rdlog("plus fired!!!!!!!" + this.DEFAULT_SNOOZE);
+	},
+
+	minusClicked: function minusClicked (event){
+		//this.rdlog("minus fired!!!!!!!");
+		var length = this.snoozeOptions.length;
+		this.snzIndex = (this.snzIndex - 1) < 0 ? (length - 1) : (this.snzIndex - 1);
+		this.$.snoozeTxt.setContent(this.snoozeOptions[this.snzIndex].caption);
+		this.DEFAULT_SNOOZE = parseInt(this.snoozeOptions[this.snzIndex].value, 10);
+		//this.rdlog("minus fired!!!!!!!" + this.DEFAULT_SNOOZE);
 	},
 
 	showSnoozedBanner: function showSnoozedBanner (minutes, reminder) {
-		var message = this.G11N.snoozedTemplate.formatChoice (minutes, {num: minutes});
+		var message = this.G11N.snoozedTemplate.formatChoice (minutes, {num: Math.abs(minutes)});
 		var details = {};
 		details.eventId = reminder.eventId;
 		details.startTime = ""+reminder.startTime;	//Needs to be a string to get across the bus intact
@@ -143,5 +347,31 @@ enyo.kind({
 		//this.rdlog("exit");
 		enyo.application.ignore({reminderState: this});
 		this.reminderManager.closeDialog();
-	}
+	},
+	
+	snoozeDurationOptions:[
+		{caption:$L('30 minutes before') + ' ' +$L('start'), value:'-30'},
+		{caption:$L('15 minutes before') + ' ' +$L('start'), value:'-15'},
+		{caption:$L('10 minutes before') + ' ' +$L('start'), value:'-10'},
+		{caption:$L('5 minutes before') + ' ' +$L('start'), value:'-5'},
+		{caption:$L('At Start Time'), value:'0'},
+		{caption:$L('5 minutes'), value:'5'},
+		{caption:$L('10 minutes'), value:'10'},
+		{caption:$L('15 minutes'), value:'15'},
+		{caption:$L('30 minutes'), value:'30'},
+		{caption:$L('1 hour'), value:'60'},
+		{caption:$L('2 hours'), value:'120'},
+		{caption:$L('4 hours'), value:'240'},
+		{caption:$L('8 hours'), value:'480'},
+		{caption:$L('10 hours'), value:'600'},
+		{caption:$L('12 hours'), value:'720'},
+		{caption:$L('1 day'), value:'1440'},
+		{caption:$L('2 days'), value:'2880'},
+		{caption:$L('3 days'), value:'4320'},
+		{caption:$L('4 days'), value:'5760'},
+		{caption:$L('5 days'), value:'7200'},
+		{caption:$L('6 days'), value:'8640'},
+		{caption:$L('1 week'), value:'10080'},
+		{caption:$L('2 weeks'), value:'20160'}
+	]
 });
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/CalendarsManager.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/CalendarsManager.js
index e3f546a..39e2f46 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/CalendarsManager.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/CalendarsManager.js
@@ -564,7 +564,13 @@ enyo.kind({
 
 	isInvitationEnabledCalendar: function isInvitationEnabledCalendar(calendarId){
 		var kind = this.getCalAccountKind(calendarId);
-		return (kind == "com.palm.calendarevent.eas:1");
+			//console.log("calendars Manager kind:::::: " + kind + " read only: "+ !!(this.isCalendarReadOnly(calendarId)));
+		if(kind == "com.palm.calendarevent.google:1"){
+			var readonly =  !!(this.isCalendarReadOnly(calendarId));
+			return !readonly;
+		} else {
+			return (kind == "com.palm.calendarevent.eas:1");
+		}
 	},
 
 	getCal: function getCal(calId) {
@@ -692,6 +698,60 @@ enyo.kind({
 		//console.log("==== Calendar color changed.");
 	},	
 	
+	getAdvReqCalList: function(){
+		var account, tempList = [], syncingAccounts = [];
+		var accounts = this.rawAccounts;
+		
+		if (accounts) {
+			for(var id in accounts){
+				if(accounts.hasOwnProperty(id) && accounts[id]){
+					account = accounts[id];
+					EAS = false;
+					if(account.capabilityProviders && account.capabilityProviders.length){
+						var len = account.capabilityProviders.length;
+						for(var i=0;i<len;i++){
+							if(account.capabilityProviders[i] && account.capabilityProviders[i].implementation){
+								EAS = account.capabilityProviders[i].implementation.indexOf("com.palm.eas") !== -1;
+								if(EAS === true) {break;}
+							}
+						}
+					}
+					//console.error("Account: (" + id + ")" + JSON.stringify(account));
+					//console.error("Account provider: (" + id + ")" + JSON.stringify(account.provider));
+					if(account.provider && account.provider.sync && !EAS){
+						syncingAccounts.push(account);
+						//console.error("Account: (" + account._id + ", " + account.alias + ", " + account.accountName + " , " + account.username+ ")");
+					}
+				}
+			}
+	
+			var acct, obj = {}, sAlen = syncingAccounts.length;
+			for(var j=0;j<sAlen;j++){
+				acct = syncingAccounts[j];
+				obj = {
+					_id: acct._id,
+					alias: acct.alias,
+					provider: acct.provider,
+					accountName: acct.accountName,
+					username: acct.username
+				};
+				if(acct.provider && acct.provider.icon && acct.provider.icon.loc_32x32) {
+					// There is an icon in this account's template just for calendars
+					obj.icon = acct.provider.icon.loc_32x32;
+				}else {
+					var accountTemplate = acct && this.accountTemplates[acct.templateId];
+					if (accountTemplate && accountTemplate.icon && accountTemplate.icon.loc_32x32) {
+						obj.icon =  accountTemplate.icon.loc_32x32;
+					}
+				}
+				//console.error("AdvReqsList num: " + j + ", info " + JSON.stringify(obj));
+				tempList.push(obj);
+			}
+		}
+		return tempList;
+	},
+
+	
 	syncAllCalendars: function syncAllCalendars () {
 
 		var	account
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/DatabaseManager.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/DatabaseManager.js
index e213a73..827e16e 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/DatabaseManager.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/DatabaseManager.js
@@ -273,6 +273,44 @@ enyo.kind({
 		this.shimCallbacks(request, successCB, failureCB);
 	},
 	
+	clearEventsFromDeletedCalendar: function(calId, callBack){
+		//from edit scene undefined calType from a removed account, find and delete them
+		var query = {	"select": ["_id", "subject"]
+					,	"from": "com.palm.calendarevent:1"
+					,	"where":[{"prop": "calendarId", "op": "=", "val": calId}]
+					};
+		
+		var request0 = this.$.findCalendarEvents.call({query: query	});
+		var goEventIdsCB = enyo.bind(this, goEventIds);
+		var eventIds = [], badLen = 0;
+		this.shimCallbacks(request0, goEventIdsCB, goEventIdsCB);
+		
+		function goEventIds(response){
+			var event, badEvents = response.results;
+			badLen = badEvents && badEvents.length;
+			for(var i=0;i<badLen;i++){
+				event = badEvents[i];
+				eventIds.push(event._id);
+				console.error("found to be del: " + event.subject + ", id: " + event._id);
+			}
+			
+			console.error("Deleting: " + eventIds.length + " undefined events");
+			if(badLen){
+				var request = this.$.deleteByIds.call({"ids": eventIds, "purge":true});
+				var deletedBadEventsCB = enyo.bind(this, deletedBadEvents);
+				this.shimCallbacks(request, deletedBadEventsCB, deletedBadEventsCB);
+			} else {
+				callBack(false);
+			}
+		}
+		
+		function deletedBadEvents(response){
+			console.error("clearEventsFromDeletedCalendar done: "+JSON.stringify(response))
+			callBack(response);
+		}
+
+	},
+	
 	//Used for adding an exception to a parent, and creating the exception child event.
 	updateParentAddChild: function updateParentAddChild (parentSlice, childEvent, successCB, failureCB, markChildDeleted) {
 		//Mojo.Log.info("$$$$$$$$$$$$ In updateParentAddChild %j, %j", parentSlice, childEvent);
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/EventView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/EventView.js
index ee68003..30d1cac 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/EventView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/EventView.js
@@ -60,6 +60,18 @@ enyo.kind({
 		if (!event) { return; }
 //		this.addClass ("fade-in");
 		this.calendarsChanged();
-		this.setContent (event.subject || $L("No Subject"));	// OK because, enyo.Control.render() overrides with children's content if present.
+		var prefs = enyo.application.prefsManager.prefs;
+		var txt, useParens  = !!prefs.useParens;
+		if(event.subject && useParens){
+			var str = event.subject;
+			var idx = str.indexOf("("), idx2;
+			if(idx !== -1){
+				idx2 = str.indexOf(")");
+				if(idx2 !== -1 && (idx2 -idx > 5)){
+					txt = str.substr(idx, idx2-idx+1);
+				}
+			}
+		}
+		this.setContent ((txt ? txt : event.subject) || $L("No Subject"));	// OK because, enyo.Control.render() overrides with children's content if present.
 	}
 });
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/JumpToView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/JumpToView.js
index 10d7efa..9227859 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/JumpToView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/JumpToView.js
@@ -15,8 +15,11 @@ enyo.kind({
 	},
 
 	components	: [
-		{name: "date", kind: enyo.DatePicker},
+		{name: "date", kind: enyo.DatePicker, onChange: "jumpDateChange"},
 		{kind: enyo.VFlexBox, components: [
+			{kind:enyo.HFlexBox, pack:"center", align:"center", components:[
+				{name: "jumpMiniMonth",kind:"calendar.uc.MiniMonth", linked:false, followViewDay:true, onMiniMonDateTap:"miniMonDateTap", followMe: ["prefs"]}
+			]},
 			{name: "btnJump", kind: enyo.Button, caption: $L("Go To Date"), onclick: "dateClicked", className: "enyo-button-dark"},
 			{kind: enyo.Button, caption: $L("Show Today"), onclick: "dateClicked", className: "enyo-button-dark"},
 			{kind: enyo.Button, caption: $L("Cancel"), onclick: "cancelClicked", className: "enyo-button-light"}
@@ -31,6 +34,10 @@ enyo.kind({
 		this.inherited (arguments);
 		this.setupOnClose();
 	},
+	
+	ready: function ready(){
+		this.inherited (arguments);
+	},
 
 	destroy: function destroy(){
 		this.inherited (arguments);
@@ -49,6 +56,15 @@ enyo.kind({
 		this.exitView();
 		return true;
 	},
+	
+	jumpDateChange: function jumpDateChange() {
+		this.$.jumpMiniMonth.setViewDay(this.$.date.getValue());
+	},
+	
+	miniMonDateTap: function miniMonDateTap(inSender, inValue){
+		this.$.date.setValue(inValue);
+		this.$.jumpMiniMonth.setViewDay(this.$.date.getValue());
+	},
 
 	exitView: function exitView () {
 		DEBUG && this.log ("########## Exit JumpTo view.");
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/PrefsManager.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/PrefsManager.js
index 7d54e34..cc80128 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/PrefsManager.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/PrefsManager.js
@@ -11,6 +11,7 @@ function PrefsManager () {
 	this.readPrefsFailed	= enyo.bind (this, this.readPrefsFailed);
 	this.savedPrefs			= enyo.bind (this, this.savedPrefs);
 	this.readPrefs();
+	this.loadUberCalendarPrefs();
 }
 
 PrefsManager.prototype.plog = function plog(str){
@@ -265,6 +266,60 @@ PrefsManager.prototype.getDefaultCalendar = function getDefaultCalendar () {
 	}
 };
 
+PrefsManager.prototype.getUberCalendarPrefs = function(request){
+	if(request && request.name && this.uberParams[request.name]){
+			return this.uberParams[request.name];
+	} else {
+		return false;
+	}
+};
+
+PrefsManager.prototype.setUberCalendarPrefs = function(data){
+	var idx;
+	
+	if(data && data.name) {
+		if((idx = this.uberCookieNames.indexOf(data.name)) !== -1){
+			if(data.values) {
+				this.uberParams[data.name] = data.values;
+				enyo.setCookie(data.name, enyo.json.stringify(data.values));
+				//console.log("updating cookie:  " + data.name + ", values: "+ enyo.json.stringify(data.values));
+			} else { //when value is false clear cookie
+				delete this.uberParams[data.name];
+				this.uberCookieNames.splice(idx,1);
+				enyo.setCookie(data.name, "empty", {"Max-Age": 0});
+				//console.log("deleting cookie:  " + data.name + ", cookieNames: "+ enyo.json.stringify(this.uberCookieNames));
+			}
+		} else if(data.values != undefined && data.values !== ""){ //only saving cookies with values
+			this.uberCookieNames.push(data.name);
+			this.uberParams[data.name] = data.values;
+			enyo.setCookie(data.name, enyo.json.stringify(data.values));
+			enyo.setCookie("uberCookieNames", enyo.json.stringify(this.uberCookieNames));
+			//console.log("adding new cookie:  " + data.name + ", values: "+ enyo.json.stringify(data.values));
+		}
+	}
+};
+
+PrefsManager.prototype.loadUberCalendarPrefs = function(){
+	var i, values, cNames = enyo.getCookie("uberCookieNames");
+	this.uberCookieNames = [];
+	this.uberParams = {};
+	if(!cNames) {
+		return;
+	}
+	var cookieNames = enyo.json.parse(cNames);
+	var len = cookieNames.length;
+	if(cookieNames && len > 0){
+		for(i=0; i< len; i++){
+			values = enyo.getCookie(cookieNames[i]);
+			if(values != undefined) {
+				this.uberParams[cookieNames[i]] = enyo.json.parse(values);
+				this.uberCookieNames.push(cookieNames[i]);
+			}
+		}
+	}
+	console.log("uberParams:  " + enyo.json.stringify(this.uberParams));
+};
+
 PrefsManager.prototype.alarmSoundOptions =
 {	mute		: 0
 ,	systemSound	: 1
@@ -280,10 +335,52 @@ PrefsManager.prototype.defaultPrefs =
 ,	defaultCalendarID			: 0
 ,	defaultEventDuration		: 60
 ,	defaultEventReminder		: "-PT15M"
+,	defaultSnooze				: "5"
 ,	endTimeOfDay				: -111599994	// This is based on UTC
 ,	isFirstUse					: true
-//,	nextLaunch					: "last"		// Remember last used view. Other values are agenda, day, week, and month.
+//,	nextLaunch					: ""		// Remember last used view. Other values are agenda, day, week, and month.
 ,	startOfWeek					: 1				// Sunday
 ,	startTimeOfDay				: -226799992	// This is based on UTC
 ,	userChangedStartOfWeek		: false
+,	stopAutoClose				: false
+,	snoozeThrob					: true
+,	linkOffAfterLoad			: false
+,	autoConfirmAgendaSwipe		: false
+,	disableReminders			: false
+,	perCalAlarms				: true
+,	alarmsFollowToggles			: false
+,	notificationRepeatInterval	: '2'
+,	notificationMaxRepeat		: '99999'
+,	showWkNumber				: false			// show week number in calendar
+,	showPeek					: false			// show peek of agenda list
+,	showSearch					: false			// show search of agenda list
+,	showSnoozeBanner			: true			// show search of agenda list
+,	dayShowMini					: true			// show mini month on start
+,	weekShowMini				: true			// show mini month on start
+,	monthShowMini				: true			// show mini month on start
+,	dayUseIcons					: true
+,	weekUseIcons				: true
+,	monthUseIcons				: true
+,	dayAlarmIcons				: true
+,	weekAlarmIcons				: true
+,	dayViewEnhanced				: true
+,	weekViewEnhanced			: true
+,	monthViewEnhanced			: true
+,	dayHourHeight				: 59
+,	weekHourHeight				: 59
+,	useISOWeekNumber			: true			// use iso week numbers first week contains Thursday
+,	openInView					: "week"		//setting for first open
+,	uberMinuteInt				: 5				//setting for edit event minute interval
+,	weekModulusNum				: 1				//setting for week modulus
+,	weekNumberOffset			: 0				//setting for week offset
+,	scrollToCurrentTime			: true			//setting for whether to scroll to current time in day & week
+,	useParens					: true			//setting for whether to use subject in parentheses
+,	tapInView					: "view"		//setting for whether to edit or view
+,	tapInUberAgenda				: "view"		//setting for whether to edit or view
+,	workWeekOnly				: false			//work week default setting
+,	enableUcGroups				: true			// enables UC groups
+,	startUpGroup				: "none"
+,	ucAgendaAllCals				: false
+,	ucAgendaAllDay				: true
+,	shrinkAgenda				: false
 };
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/ReminderManager.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/ReminderManager.js
index 866fea0..f722963 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/ReminderManager.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/ReminderManager.js
@@ -10,6 +10,7 @@ enyo.kind({
 	published: {
 		prefs: null,
 		accountsAndCalendars: null,
+		calendars:		null,
 		reminderState: null //We generate and also listen to reminderState. See dashboard below.
 	},
 
@@ -20,7 +21,7 @@ enyo.kind({
 
 	create: function create(){
 		this.inherited (arguments);
-		enyo.application.watch({accountsAndCalendars: this, prefs: this, reminderState: this});	//We generate and also listen to reminderState. See dashboard below.
+		enyo.application.watch({calendars: this, accountsAndCalendars: this, prefs: this, reminderState: this});	//We generate and also listen to reminderState. See dashboard below.
 
 		this.reminders = {};
 		this.queuedReminders = {remindersAdded: [], remindersToUpdate: [], eventIdsToClose: []};
@@ -33,6 +34,7 @@ enyo.kind({
 	},
 
 	destroy: function destroy(){
+		this.saveSnoozedList();
 		this.closeDialog();
 		this.dismissAllReminders();
 
@@ -41,7 +43,7 @@ enyo.kind({
 		a && a.dismiss	&& a.dismiss.cancel();
 
 		enyo.application.ignore({reminderState: this});
-
+		this.alarmsFollowToggles && enyo.application.ignore({calendars: this});
 		// TODO: Make the following components proper members of App/AppLaunch so they'll be auto-destroyed when their parent is.
 		delete this.prefsManager;
 		delete this.calendarsManager;
@@ -51,6 +53,126 @@ enyo.kind({
 		this.inherited (arguments);
 	},
 
+	readSnoozedList: function readSnoozedList() {
+		if(this.prefsManager) {
+			this.snoozedList =[];
+			var snzedlistcookie = this.prefsManager.getUberCalendarPrefs({name:"snoozeCookie"});
+			var len = snzedlistcookie && snzedlistcookie.length;
+			if (snzedlistcookie && len >0) {
+				for(var i = 0; i<len; i++){
+					this.snoozedList.push(snzedlistcookie[i]);
+				}
+			}
+			var oldExc = this.excludedCals && this.excludedCals.slice();
+			if(!this.alarmsFollowToggles){
+				this.excludedCals =[];
+				var exccalscookie = this.prefsManager.getUberCalendarPrefs({name:"excCalAlarms"});
+				var len = exccalscookie && exccalscookie.length;
+				if (exccalscookie && len >0) {
+					for(var i = 0; i<len; i++){
+						this.excludedCals.push(exccalscookie[i]);
+					}
+				}
+			} else {
+				if(this.calendars){
+					this.excludedCals =[];
+					var toggle;
+					for (var id in this.calendars) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+						if (this.calendars.hasOwnProperty (id)) {
+							toggle		= this.calendars	[id];
+							if(!toggle.on){
+								this.excludes.push(id);
+							}
+						}
+					}
+				} else {
+					this.excludedCals = oldExc ? oldExc : [];
+				}
+			}
+		} else {
+			this.snoozedList =[];
+			this.excludedCals =[];
+		}
+	},
+	
+	saveSnoozedList: function saveSnoozedList() {
+		if(!this.prefsManager){
+			return;
+		}
+		var snzList = [], len = this.snoozedList && this.snoozedList.length;
+		if(len > 0){
+			for(var i=0; i <len; i++){
+				var snz = this.snoozedList[i];
+				if(snz && snz.eventId && snz.eventId != ""){ 
+					snzList.push(this.snoozedList[i]);
+				}
+			}
+			this.prefsManager.setUberCalendarPrefs({name:"snoozeCookie", values: snzList});
+		} else { //user deleted all cats erase cookie
+			this.prefsManager.setUberCalendarPrefs({name:"snoozeCookie", values: false});
+		}
+	},
+
+	findSnoozedListItem: function findSnoozedListItem(eId) {
+		var evtId = eId;
+		var snzdList = this.snoozedList;
+		if(snzdList.length !== 0) {
+			for(var idx = 0; idx < snzdList.length; idx++) {
+				if(snzdList[idx].eventId == evtId) {
+					var props = {lastSnooze: snzdList[idx].lastSnoozedTS, repeatNumber: snzdList[idx].repeatNumber};
+					return props;
+				}
+			}
+		} else {
+			return -1;
+		}
+	},
+	
+	updateExcCals: function(exCals){
+		this.excludedCals = [];
+		if(exCals && exCals.length > 0){
+			for(var i=0, len = exCals.length; i < len; i++){
+				if(exCals[i] && exCals[i] != undefined){
+					this.excludedCals.push(exCals[i]);
+				}
+			}
+		} else {
+			this.excludedCals = [];
+		}
+		console.error("reminders manager :::::::::::: " + this.excludedCals);
+	},
+	
+	updateSnoozedListItem: function(eId, snoozeTS, repeat, deleteIt) {
+		if(!this.prefsManager){
+			return;
+		}
+		var snzTS = snoozeTS !== undefined ? snoozeTS : false;
+		if(this.snoozedList.length === 0) {
+			if(snzTS !==undefined && repeat !== undefined && deleteIt !== undefined && deleteIt === false) {
+				this.snoozedList.push({eventId: eId, lastSnoozedTS: snzTS, repeatNumber: (repeat ? 1 : 0)});
+			} else if(deleteIt === true) {
+				return;
+			}
+		} else {
+			for(var found, idx=0; idx < this.snoozedList.length; idx++) {
+				if(eId == this.snoozedList[idx].eventId) {
+					if(snzTS !==undefined && repeat !== undefined && deleteIt !== undefined && deleteIt === false){
+						this.snoozedList[idx].lastSnoozedTS = snzTS;
+						this.snoozedList[idx].repeatNumber = repeat ? this.snoozedList[idx].repeatNumber + 1 : 0;
+					} else if(deleteIt === true) {
+						this.snoozedList.splice(idx, 1);
+					}
+					found = true;
+				}
+			}
+			if(!found && snzTS !==undefined && repeat !== undefined && deleteIt !== undefined && deleteIt === false){
+				this.snoozedList.push({eventId: eId, lastSnoozedTS: snzTS, repeatNumber: (repeat ? 1 : 0)});
+			}
+			
+		}
+		this.saveSnoozedList();
+	},
+	
 	logReminders: function logReminders(){
 //		console.info("==========================================================START");
 //		var i = 0;
@@ -69,10 +191,20 @@ enyo.kind({
 
 	handleLaunchParams: function handleLaunchParams(launchParams){
 		if (launchParams.alarm) {
+			if(this.managersReady && this.disableReminders === true){
+				this.dismissReminders(launchParams.alarm);
+				return;
+			}
+			
 			this.addReminders(launchParams.alarm);
 			return;
 		}
 
+		if (launchParams.playAlarmSound){
+			this.playAlarmSound(launchParams.playAlarmSound);
+			return;
+		}
+
 		if (launchParams.alarmClose){
 			this.closeReminders(launchParams.alarmClose);
 			return;
@@ -121,7 +253,6 @@ enyo.kind({
 		this.reminderWindowSize = size;
 	},
 
-
 	//There is a chance when we receive reminders taht the calendars manager and the prefs manager are not finished getting their data yet,
 	//and so calls into them may fail.  At reminder manager creation, we register to listen for prefs and accounts and calendars.
 	//When the managers are ready, we can proceed with showing/updating a reminder.  Until then, we store any incoming reminders in queuedReminders.
@@ -129,6 +260,7 @@ enyo.kind({
 	accountsAndCalendarsChanged: function accountsAndCalendarsChanged(){
 		//this.rmlog("Got accountsAndCalendarsChanged");
 		this.calendarsManagerReady = true;
+		
 		enyo.application.ignore({accountsAndCalendars: this});
 		if (this.calendarsManagerReady && this.prefsManagerReady) {
 			this.managersReady = true;
@@ -139,17 +271,65 @@ enyo.kind({
 	prefsChanged: function prefsChanged(){
 		//this.rmlog("Got prefsChanged");
 		this.prefsManagerReady = true;
+		this.alarmsFollowToggles = !!this.prefsManager.prefs.alarmsFollowToggles;
 		enyo.application.ignore({prefs: this});
 		if (this.calendarsManagerReady && this.prefsManagerReady) {
 			this.managersReady = true;
 			this.processQueuedReminders();
 		}
 	},
+	
+	calendarsChanged: function calendarsChanged(old){
+		
+		this.alarmsFollowToggles = !!this.prefsManager.prefs.alarmsFollowToggles;
+		if(!this.alarmsFollowToggles){
+			enyo.application.ignore({calendars: this});
+			return;
+		}
+		if(this.calendars){
+			var toggle;
+			this.excludedCals = [];
+			for (var id in this.calendars) {									// TODO: Set current calendarId to single-selected writeable calendar or default cal.
+				if (this.calendars.hasOwnProperty (id)) {
+					toggle		= this.calendars	[id];
+					if(!toggle.on){
+						this.excludedCals.push(id);
+					}
+				}
+			}
+		}
+		console.error("reminders manager calendars changed RMMM alarmsFollowToggles: "+ this.alarmsFollowToggles +" exc: " + this.excludedCals);
+	},
+	
+	setupAlarmsFollowToggles: function setupAlarmsFollowToggles(bool){
+		console.error("setupAlarmsFollowToggles changed RMMM: " + bool)
+		var followToggles = !!bool;
+		if(this.calendarsManagerReady && followToggles){
+			enyo.application.watch({calendars: this});
+			//this.readSnoozedList();
+		} else if(this.calendarsManagerReady && !followToggles){
+			enyo.application.ignore({calendars: this});
+			this.readSnoozedList();
+		}
+	},
 
 	processQueuedReminders: function processQueuedReminders(){
 		//this.rmlog("Processing queued reminders");
 		var queue = this.queuedReminders;
+		this.alarmsFollowToggles = !!this.prefsManager.prefs.alarmsFollowToggles;
+		this.readSnoozedList();
+		this.stopAutoClose = this.prefsManager.prefs.stopAutoClose;
+		this.notificationMaxRepeat = this.prefsManager.prefs.notificationMaxRepeat;
+		this.notificationRepeatInterval = this.prefsManager.prefs.notificationRepeatInterval;
+		this.disableReminders = !!this.prefsManager.prefs.disableReminders;
+		this.snoozeThrob =  !!this.prefsManager.prefs.snoozeThrob;
+		this.perCalAlarms = !!this.prefsManager.prefs.perCalAlarms;
 		var somethingToShow = queue.remindersAdded.length + queue.remindersToUpdate.length + queue.eventIdsToClose.length;
+		if(this.disableReminders === true){
+			this.dismissReminders(queue.remindersAdded);
+			return;
+		}
+		
 		this.addReminders(queue.remindersAdded);
 		this.updateReminders(queue.remindersToUpdate, queue.eventIdsToClose);
 
@@ -163,6 +343,7 @@ enyo.kind({
 		if(!reminders){
 			return;
 		}
+		this.fromDash = false;
 
 		//if managers we rely on are not fully initialized yet, we have to queue these reminders
 		if(!this.managersReady){
@@ -172,7 +353,7 @@ enyo.kind({
 		}
 
 		var remindersLength = reminders.length;
-		var reminder;
+		var cleanRem = [], reminder;
 
 		if(remindersLength === 0){
 			return;
@@ -193,15 +374,39 @@ enyo.kind({
 			}
 			this.checkForReplacement(reminder);
 			//this.rmlog("addReminders: adding "+reminder._id);
-			this.reminders[reminder._id] = reminder;
+			if((this.perCalAlarms || this.alarmsFollowToggles) && this.excludedCals && this.excludedCals.length > 0){
+				console.error("reminders manager :  testing: " + reminder.calendarId + ",   indexOf:  " +this.excludedCals.indexOf(reminder.calendarId)+ ",  :excl cals: " + this.excludedCals);
+				if(this.excludedCals.indexOf(reminder.calendarId) !== -1){
+					if(this.reminders[reminder._id]){
+						this.dismissReminder(reminder);
+					} else {
+						this.$.dismiss.call({"reminderId": reminder._id, "eventId": reminder.eventId, "startTime": reminder.startTime});
+						if(reminder.eventId){this.updateSnoozedListItem(reminder.eventId, false, false,true);}
+					}
+				} else {
+					cleanRem.push(reminder);
+					this.reminders[reminder._id] = reminder;
+				}
+			} else {
+				this.reminders[reminder._id] = reminder;
+			}
+		}
+		
+		if((this.perCalAlarms || this.alarmsFollowToggles) && this.excludedCals && this.excludedCals.length > 0){
+			if(cleanRem){
+				reminders = [];
+				reminders = cleanRem;
+			}
+			remindersLength = reminders.length;
 		}
 
 		//assume that if we've received something to add, we have something to show.  And whatever it is, it's in the
 		//list we just got.
-		if(remindersLength === 1){
+		if(remindersLength === 0){
+			this.currentReminder = this.findAnotherReminder("show");
+		} else if(remindersLength === 1){
 			this.currentReminder = reminders[0];
-		}
-		else{
+		} else {
 			this.currentReminder = this.whichReminderToShow(reminders);
 		}
 
@@ -272,7 +477,7 @@ enyo.kind({
 
 		this.closeRemindersByEventId(eventIdsToClose);
 		this.currentReminder = showingReminder;
-
+		this.fromDash = false;
 		if(displayChanged)
 			this.openReminderWindow(this.currentReminder);
 
@@ -307,22 +512,61 @@ enyo.kind({
 		var reminderIdsLength = reminderIds.length;
 		for(var i = 0; i < reminderIdsLength; i++){
 			//this.rmlog("removeReminders: deleting "+reminderIds[i]);
+			if(this.reminders && this.reminders[reminderIds[i]] && this.reminders[reminderIds[i]].eventId && this.reminders[reminderIds[i]].eventId != undefined && this.reminders[reminderIds[i]].eventId != null ) {
+				this.updateSnoozedListItem(this.reminders[reminderIds[i]].eventId, false, false,true);
+			}
 			delete this.reminders[reminderIds[i]];
 		}
 		this.logReminders();
 		//this.rmlog("removeReminders: out");
 	},
 
+	playAlarmSound: function playAlarmSound(rem) {
+		var reminder = JSON.parse(rem);
+		//this.rmlog("playAlarmSound: in" +reminder._id );
+		if(!reminder._id) {return;}
+		var props = this.findSnoozedListItem(reminder.eventId);
+		if((props && props !== -1 && props.repeatNumber > parseInt(this.notificationMaxRepeat)) || (parseFloat(this.notificationRepeatInterval) === 0 && !this.stopAutoClose)){
+			//this.rmlog("exiting playAlarmSound: " +JSON.stringify(props));
+			return;
+		}
+		//this.rmlog("testing playAlarmSound: " +(this.reminders.hasOwnProperty(reminder._id) && this.reminders[reminder._id] && this.reminders[reminder._id].state !== ReminderManager.SNOOZED));
+		if (this.reminders.hasOwnProperty(reminder._id) && this.reminders[reminder._id] && this.reminders[reminder._id].state !== ReminderManager.SNOOZED){
+			if (this.stopAutoClose === true) {
+				reminder.autoCloseTime = parseInt(reminder.autoCloseTime, 10) + 24*60*60*1000; // snooze time + 1 day
+				reminder.autoCloseTime = reminder.autoCloseTime.toString();
+				this.snoozeReminder(reminder, 1000, reminder.autoCloseTime);
+			
+			} else {
+				this.snoozeReminder(reminder, 1000);
+			}
+		}
+	},
+
 	//called by the reminder assistant
 	//sets the state of the reminder to snoozed, launches the service to update the snooze time, and
 	//displays the next reminder
-	snoozeReminder: function snoozeReminder(reminder){
+	snoozeReminder: function snoozeReminder(reminder, snz, autoClose){
 		//this.rmlog("snoozeReminder: in");
 		reminder.state = ReminderManager.SNOOZED;
 		//this.rmlog("snoozeReminder: overwriting "+reminder._id);
 		this.reminders[reminder._id] = reminder;
-
-		this.$.snooze.call({"reminderId": reminder._id});
+		//snoozeTS is in millisecs
+		var snoozeTS = snz;
+		var autoCloseT = autoClose;
+		if(snoozeTS != undefined && snoozeTS != null) {
+			if(autoCloseT != undefined && autoCloseT != null) {
+				var rep = snoozeTS != 1000 ? false : true; //1000 is the repeat notification
+				this.updateSnoozedListItem(reminder.eventId, snoozeTS, rep, false);
+				this.$.snooze.call({"reminderId": reminder._id, "snoozeDuration": snoozeTS, "autoCloseTime": autoCloseT});
+			} else {
+				var rep = snoozeTS != 1000 ? false : true; //1000 is the repeat notification
+				this.updateSnoozedListItem(reminder.eventId, snoozeTS, rep, false);
+				this.$.snooze.call({"reminderId": reminder._id, "snoozeDuration": snoozeTS});
+			}
+		} else {
+			this.$.snooze.call({"reminderId": reminder._id});
+		}
 
 		this.currentReminder = this.findAnotherReminder("show");
 		this.openReminderWindow(this.currentReminder);
@@ -358,6 +602,8 @@ enyo.kind({
 	dismissAllReminders: function dismissAllReminders(reminders){
 		//TODO: Make dismiss take a list, and do them as a batch
 		//this.rmlog("dismissAllReminder: in");
+		this.snoozedList = [];
+		this.saveSnoozedList();
 		for(var item in this.reminders){
 			if (this.reminders.hasOwnProperty(item) && this.reminders[item]) {
 				//this.rmlog("dismissAllReminder: dismissing "+item);
@@ -485,7 +731,7 @@ enyo.kind({
 		for (var item in this.reminders) {
 			if (this.reminders.hasOwnProperty(item) && this.reminders[item]) {
 				reminder = this.reminders[item];
-				if(reminder.state == ReminderManager.HIDDEN){
+				if(reminder.state !== ReminderManager.SNOOZED){
 					reminderList.push(reminder);
 				}
 			}
@@ -706,10 +952,15 @@ enyo.kind({
 	dashIconTap: function dashIconTap(){
 		//this.rmlog("DASH: Icon tap");
 		if(this.dashboardList.length > 1){
-			this.doShowMissedRemindersList();
+			this.showMissedRemindersList();
 		}
 		else{
-			this.showEventDetails(this.reminders[0]);
+			var reminders = this.getAllReminders()
+			if(reminders && reminders.length && reminders[0]) {
+				this.showEventDetails(reminders[0]);
+			} else {
+				this.dashboard.pop();
+			}
 		}
 	},
 
@@ -717,6 +968,7 @@ enyo.kind({
 	dashDetailsClicked: function dashDetailsClicked(inSender, layer){
 		//this.rmlog("DASH: Show event");
 		//launch edit view
+		this.fromDash = true;
 		this.showEventDetails(layer.reminder);
 		this.dismissReminder(layer.reminder);
 	},
@@ -734,6 +986,13 @@ enyo.kind({
 			//this.rmlog("DASH: dashDismissAll: DISMISSING ALL");
 			this.dismissAllReminders();
 		}
+	},
+	
+	missedDismissAll: function missedDismissAll(){
+		this.dismissAllReminders();
+		if(this.dashboard){
+			//this.$.dashboard.destroy();
+		}
 	}
 });
 
@@ -741,5 +1000,5 @@ ReminderManager.HIDDEN = 1;
 ReminderManager.SNOOZED = 2;
 ReminderManager.SHOWING = 3;
 
-ReminderManager.WINDOWSIZE_S = "116px";
-ReminderManager.WINDOWSIZE_L = "158px";
+ReminderManager.WINDOWSIZE_S = "130px";
+ReminderManager.WINDOWSIZE_L = "172px";
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/Utilities.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/Utilities.js
index 1ad9e47..df2cab5 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/Utilities.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/shared/Utilities.js
@@ -286,12 +286,41 @@
 			case '-P1D':
 			case '-P2D':
 			case '-P3D':
+			case '-P4D':
+			case '-P5D':
+			case '-P6D':
 			case '-P1W':
 			case '-PT5M':
 			case '-PT10M':
 			case '-PT15M':
+			case '-PT20M':
 			case '-PT30M':
+			case '-PT45M':
+			case '-PT90M':
+			case '-PT150M':
+			case '-PT220M':
 			case '-PT1H':
+			case '-PT2H':
+			case '-PT3H':
+			case '-PT4H':
+			case '-PT5H':
+			case '-PT6H':
+			case '-PT7H':
+			case '-PT8H':
+			case '-PT10H':
+			case '-PT12H':
+			case '-PT18H':
+			case '-PT23H':
+			case '-PT36H':
+			case '-P2W':
+			case '-P3W':
+			case '-P4W':
+			case '-P8W':
+			case '-P12W':
+			case '-P16W':
+			case '-P20W':
+			case '-P24W':
+			case '-P52W':
 				isStandard = true;
 		}	
 		if(isAllDay){
@@ -300,10 +329,27 @@
 				case '-PT0M':
 				case 'PT0M':
 				case '+PT0M':
+				case '-PT12H':
+				case '-PT18H':
 				case '-P1D':
+				case '-PT36H':
 				case '-P2D':
+				case '-PT60H':
 				case '-P3D':
+				case '-PT84H':
+				case '-P4D':
+				case '-P5D':
+				case '-P6D':
 				case '-P1W':
+				case '-P2W':
+				case '-P3W':
+				case '-P4W':
+				case '-P8W':
+				case '-P12W':
+				case '-P16W':
+				case '-P20W':
+				case '-P24W':
+				case '-P52W':
 					isStandardForType = true;
 			}
 		}
@@ -319,6 +365,43 @@
 				case '-PT30M':
 				case '-PT1H':
 				case '-P1D':
+				case '-P2D':
+				case '-P3D':
+				case '-P4D':
+				case '-P5D':
+				case '-P6D':
+				case '-P1W':
+				case '-PT5M':
+				case '-PT10M':
+				case '-PT15M':
+				case '-PT20M':
+				case '-PT30M':
+				case '-PT45M':
+				case '-PT90M':
+				case '-PT150M':
+				case '-PT220M':
+				case '-PT1H':
+				case '-PT2H':
+				case '-PT3H':
+				case '-PT4H':
+				case '-PT5H':
+				case '-PT6H':
+				case '-PT7H':
+				case '-PT8H':
+				case '-PT10H':
+				case '-PT12H':
+				case '-PT18H':
+				case '-PT23H':
+				case '-PT36H':
+				case '-P2W':
+				case '-P3W':
+				case '-P4W':
+				case '-P8W':
+				case '-P12W':
+				case '-P16W':
+				case '-P20W':
+				case '-P24W':
+				case '-P52W':
 					isStandardForType = true;
 			}
 		}
@@ -835,6 +918,322 @@
 // TODO: Move all RRule manipulation functions below this comment into the Calendar.RRuleManager loadable library.
 //--------------------------------------------------------------------------------------------------------------------
 
+	
+	function currentRRuleCountExcluding(event, localStart) {
+		
+		if(!event || !event.rrule || !event.rrule.count || !localStart){
+			return -1;
+		}
+		//console.error("event rule: "+JSON.stringify (event.rrule) +" , localstart: " + event.currentLocalStart +" , count: " + event.rrule.count+" , dtstart: "+event.dtstart);
+		if(event.rrule.count && event.rrule.count === 1) {
+			return 0;
+		}
+		var rcfrequency = event.rrule.freq;
+		// howmany times between
+		var rcEndTS = localStart;
+		var rcint = event.rrule.interval;
+		var rcount = event.rrule.count;
+		var rcstTS = event.dtstart;
+		var rcstD = new Date(rcstTS);
+		var rcEvtMonth = rcstD.getMonth();
+		var rcEvtDate = rcstD.getDate();
+		var rcEvtYear = rcstD.getFullYear();
+		var rcEvtHour = rcstD.getHours();
+		var rcEvtMin = rcstD.getMinutes();
+		var rcEvtSec = 0;
+		var stDoW = rcstD.getDay();
+		var dlen = 3600000*24;
+		//var rcduraD = this.howManyDaysBetween(new Date(event.dtstart), new Date(event.dtend)) + 1;
+		var rcdays, count, evalTS, rcdaysofwk = [];
+		this.recTS = []; // array of timestamps of the recurring evt
+		switch (rcfrequency) {
+				case 'DAILY':
+					rcdays = rcint;
+					count = 0;
+					evalTS = rcstTS;
+					for(var i = 0; i < rcount; i++){
+						if(evalTS < rcEndTS){
+							count++;
+						} else {
+							return count;
+						}
+						evalTS = evalTS + rcdays*dlen;
+					}
+					return count;
+					break;
+				case 'WEEKLY':
+					rcdays = rcint*7;
+					count = 0;
+					evalTS = rcstTS;
+					// find the day numbers from their names
+					var rci = event.rrule.rules[0].ruleValue.length;
+					 
+					if(rci > 1) {
+						for(var i=0; i < rci; i++) {
+							rcdaysofwk[i] = event.rrule.rules[0].ruleValue[i].day;
+						}
+						var rc1stSunday = rcstD;
+						// get start day dow because it has to be in rcdaysofwk
+						var rcpos = rcdaysofwk.indexOf(stDoW);
+						// do first week
+						//need to get to the last of the array before start of next week
+						if(rcpos !== 0){
+							for(var i = rcpos; i < rci; i++){
+								rc1stSunday.moveToDayOfWeek(rcdaysofwk[i],1);
+								evalTS = rc1stSunday.getTime();
+								if(evalTS < rcEndTS){
+									count++;
+								} else {
+									return count;
+								}
+							}
+							rc1stSunday.addDays(rcdays);
+							rc1stSunday.moveToDayOfWeek(rcdaysofwk[0],-1);
+							evalTS = rc1stSunday.getTime();
+						}
+						// now at begining of week
+						for(var i = 0; i < rcount; i++){
+							if(evalTS < rcEndTS){
+								count++; //add first day
+							} else {
+								return count;
+							}
+							for(var i = 1; i < rci; i++){
+								rc1stSunday.moveToDayOfWeek(rcdaysofwk[i],1);
+								evalTS = rc1stSunday.getTime();
+								if(evalTS < rcEndTS){
+									count++;
+								} else {
+									return count;
+								}
+							}
+							rc1stSunday.addDays(rcdays);
+							rc1stSunday.moveToDayOfWeek(rcdaysofwk[0],-1);
+							evalTS = rc1stSunday.getTime();
+						}
+						return count;
+					} else {
+						for(var i = 0; i < rcount; i++){
+							if(evalTS < rcEndTS){
+								count++;
+							} else {
+								return count;
+							}
+							//rcstD.addDays(rcdays);
+							evalTS = evalTS + rcdays * dlen;
+						}
+						return count;
+					}
+					break;
+				case 'MONTHLY':
+					var mon, yr, rcyears = Math.floor(rcint/12), rcmons = Math.floor(rcint%12);
+					count = 0;
+					evalTS = rcstTS;
+					if (event.rrule.rules[0].ruleType === "BYMONTHDAY") {
+						var valid, rcmonthday = parseInt(event.rrule.rules[0].ruleValue[0].ord, 10);
+						if(rcmonthday > 0) {
+							var i = 0;
+							while(count <= rcount){
+								mon = rcEvtMonth + (rcmons*i) <= 11 ? rcEvtMonth + (rcmons*i) : rcEvtMonth + (i*rcmons) -12;
+								yr	= rcEvtMonth + (i*rcmons) <= 11 ? rcEvtYear + (i*rcyears) : rcEvtYear + (i*rcyears) + 1;
+								try {valid = Date.validateDay(rcmonthday, yr, mon);
+								} catch (e){ valid = false;}
+								if(valid){
+									evalTS = new Date(yr, mon, rcmonthday, rcEvtHour, rcEvtMin, 0, 0).getTime();
+									if(evalTS < rcEndTS){
+										count++;
+									} else {
+										return count;
+									}
+								}
+								i++;
+							}
+							return count;
+						} else if(rcmonthday < 0) {
+							for(var i = 0; i < rcount; i++){
+								mon = rcEvtMonth + 1+(i*rcmons) <= 11 ? rcEvtMonth + 1+(i*rcmons) : rcEvtMonth + 1+ (i*rcmons) -12;
+								yr	= rcEvtMonth + 1+(i*rcmons) <= 11 ? rcEvtYear + (i*rcyears) : rcEvtYear + (i*rcyears) + 1;
+								evalTS = new Date(yr, mon, 1, rcEvtHour, rcEvtMin, 0, 0).getTime();
+								evalTS = evalTS + rcmonthday*dlen;
+								if(evalTS < rcEndTS) {
+									count++;
+								} else if(evalTS === rcEndTS){
+									return count;
+								} else{
+									return count -1;
+								}
+								
+							}
+							return count;
+						}
+						return count; //should never get here
+					} else {
+						// check for multiple by days and last week type set
+						var byDayLen = event.rrule.rules[0].ruleValue.length;
+						var byDayDefault = true;
+						if(byDayLen && byDayLen > 1) {
+							var byDayArray = [];
+							var ford = parseInt(event.rrule.rules[0].ruleValue[0].ord, 10);
+							for(var i=0; i<byDayLen; i++) {
+								var ord = parseInt(event.rrule.rules[0].ruleValue[i].ord, 10);
+								if(ord && ord !== ford) {//we only care about matching bysetpos type repeat
+									byDayDefault = true; //default to just using first byday
+									break; //cal doesn't support multiple pos days in monthly repeat 
+								} else if(ord && ord === ford) {
+									var DoW = event.rrule.rules[0].ruleValue[i].day;
+									if(byDayArray.indexOf(DoW) === -1) {//not in previously
+										byDayArray.push(DoW);
+									}
+									byDayDefault = false;
+								}
+							} //should have an array with the last days wanted
+							if(!byDayDefault && byDayArray.length > 1) {
+								if(ford<0){
+									var rcmonthday = -1;
+								} else if(ford>0) {
+									var rcmonthday = 1;
+								}
+								
+								var rcmonChk, rcDoW, rcmonTS, chkmon, rcstmon = rcstD.getMonth();
+								var rcstyear = rcstD.getFullYear();
+								var i = 0;
+								while(count <=rcount) { //cycle through intervals
+									chkmon = (rcstmon + (i*rcmons)) > 11 ? rcstmon + (i*rcmons) - 12 : rcstmon + (i*rcmons);
+									if(ford<0){
+										mon = (rcstmon + 1+ (i*rcmons)) > 11 ? rcstmon +1+ (i*rcmons) - 12 : rcstmon +1+ (i*rcmons);
+										yr = (rcstmon + 1+(i*rcmons)) > 11 ? rcstyear + 1 + (i*rcyears) : rcstyear + (rcyears*i);
+										//rcmonTS = new Date(yr, mon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).addDays(rcmonthday).getTime();
+										rcmonTS = new Date(yr, mon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() + rcmonthday*dlen;
+									} else if(ford>0){
+										mon = (rcstmon + (i*rcmons)) > 11 ? rcstmon + (i*rcmons) - 12 : rcstmon + (i*rcmons);
+										yr = (rcstmon + (i*rcmons)) > 11 ? rcstyear + 1 + (i*rcyears) : rcstyear + (rcyears*i);
+										rcmonTS = new Date(yr, mon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() + rcmonthday*dlen;
+									}
+									rcDoW = new Date(rcmonTS).getDay();
+									for(var k=0; k< Math.abs(ford); k++) {
+										while(byDayArray.indexOf(rcDoW) === -1) {
+											rcmonTS = rcmonTS + rcmonthday*dlen;
+											rcDoW = new Date(rcmonTS).getDay();
+										}
+										if(k !== (Math.abs(ford) - 1)){
+											rcmonTS = rcmonTS + rcmonthday*dlen;
+											var rcDoW = new Date(rcmonTS).getDay();
+										}
+									}
+									rcmonChk = new Date(rcmonTS);
+									if(rcmonChk.getMonth() === chkmon) { // test valid date in the month
+										if(rcmonTS < rcEndTS) {
+											count++;
+										} else if(rcmonTS === rcEndTS){
+											return count;
+										}else if(rcmonTS > rcEndTS){
+											if(rcmonChk.getMonth() === new Date(rcEndTS).getMonth()){
+												return count;
+											}else {
+												return count-1;
+											}
+										}
+									}
+									i++;
+								}
+								return count;
+							} else {
+								byDayDefault = true; // just one byday
+							}
+						}else if(byDayLen === 1 || byDayDefault) {
+							var nth = parseInt(event.rrule.rules[0].ruleValue[0].ord,10);
+							if(nth && nth > 0) {
+								var rcstmon = rcstD.getMonth();
+								var rcstyear = rcstD.getFullYear();
+								var i=0, rcaddTS, rcmonTS, rcmonChk, rcmonD, rcfstday, rcwantday = rcstD.getDay();
+								while(count <= rcount) {
+									mon = (rcstmon + (i*rcmons)) > 11 ? rcstmon + (i*rcmons) - 12 : rcstmon + (i*rcmons);
+									yr = (rcstmon + (i*rcmons)) > 11 ? rcstyear + 1 + (i*rcyears) : rcstyear + (rcyears*i);
+									rcmonD = new Date(yr, mon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0);
+									rcfstday = rcmonD.getDay();
+									rcaddTS = ((rcwantday - rcfstday) < 0) ? ((rcwantday - rcfstday) + 7)*dlen : (rcwantday - rcfstday)*dlen;
+									rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth-1);
+									rcmonChk = new Date(rcmonTS);
+									if(rcmonChk.getMonth() === mon) { // test valid date in the month
+										if(rcmonTS < rcEndTS) {
+											count++;
+										}  else if(rcmonTS === rcEndTS) {
+											return count;
+										} else {
+											return count -1;
+										}
+									}
+									i++;
+								}
+							} else if(nth && nth<0) {
+								var rcstmon = rcstD.getMonth();
+								var rcstyear = rcstD.getFullYear();
+								var rcaddTS, chkmon, rcLstDay, rcmonTS, rcmonChk, rcmonD, rcwantday = rcstD.getDay();
+								for(var i=0; i<rcount; i++) {
+									chkmon = (rcstmon + (i*rcmons)) > 11 ? rcstmon + (i*rcmons) - 12 : rcstmon + (i*rcmons);
+									mon = (rcstmon + 1+(i*rcmons)) > 11 ? rcstmon + (i*rcmons) - 11 : rcstmon + 1+(i*rcmons);
+									yr = (rcstmon + 1+(i*rcmons)) > 11 ? rcstyear + 1 + (i*rcyears) : rcstyear + (rcyears*i);
+									rcmonD = new Date(new Date(yr, mon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() - dlen) ;
+									rcLstday = rcmonD.getDay();
+									rcaddTS = ((rcwantday - rcLstday) > 0) ? ((rcwantday - rcLstday) - 7)*dlen : (rcwantday - rcLstday)*dlen;
+									rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth+1);
+									rcmonChk = new Date(rcmonTS);
+									if(rcmonChk.getMonth() === chkmon) {
+										if(rcmonTS < rcEndTS) {
+											count++;
+										}  else if(rcmonTS === rcEndTS) {
+											return count;
+										} else {
+											return count -1;
+										}
+									}
+								}
+							}
+						}
+						return count; //should never get here
+					}
+					break;
+				case 'YEARLY':
+					var mon, day, yr, type, valid, rule, ruleLength, count = 0, rcyears=rcint;
+					evalTS = rcstTS;
+					ruleLength = event.rrule.rules && event.rrule.rules.length;
+					for(var i=0;i <  ruleLength;i++){
+						rule = event.rrule.rules[i];
+						type = rule.ruleType;
+						if(type === "BYMONTHDAY"){
+							day = parseInt(rule.ruleValue[0].ord,10);
+						} else if(type === "BYMONTH"){
+							mon = parseInt(rule.ruleValue[0].ord,10) -1;
+						}
+					}
+					if(!(isNaN(mon) || isNaN(day))){
+						var i = 0;
+						while(count < rcount){
+							yr = rcEvtYear + (i*rcyears);
+							try{valid = Date.validateDay(day, yr, mon);
+							} catch(e){
+								valid = false;
+							}
+							if(valid){
+								evalTS = new Date(yr, mon, day, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime();
+								if(evalTS < rcEndTS){
+									count++;
+								}  else if(evalTS === rcEndTS) {
+									return count;
+								} else {
+									return count -1;
+								}
+							}
+							i++;
+						}
+						return count;
+					}
+					break;
+		}
+		return -1;
+	}
+	
+
 	// Publish the Utilities object for public access:
 	this.Utilities	=
 	{	addException					: addException
@@ -869,6 +1268,7 @@
 	,	updateByDayRRule				: updateByDayRRule
 	,	wrapIt							: wrapIt
 	,	isArrayLike						: isArrayLike
+	,	currentRRuleCountExcluding		: currentRRuleCountExcluding
 	};
 
 })();
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week.js
new file mode 100644
index 0000000..501c299
--- /dev/null
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week.js
@@ -0,0 +1,44 @@
+Date.prototype.getWeek = function() {
+	var date = new Date(this);
+	var year = date.getFullYear();
+	var month = date.getMonth();
+	var day = date.getDate();
+	
+	var when = new Date(year,month,day);
+	var newYear = new Date(year,0,1);
+	var modDay = newYear.getDay();
+
+	if(this.startDay != 1)
+		if (modDay == 0) modDay=6; else modDay--;
+
+	var daynum = ((Date.UTC(year,when.getMonth(),when.getDate(),0,0,0) -
+		Date.UTC(year,0,1,0,0,0)) /1000/60/60/24) + 1;
+
+	if (modDay < 4 ) {
+		var weekno = Math.floor((daynum+modDay-1)/7)+1;
+	}
+	else {
+		var weekno = Math.floor((daynum+modDay-1)/7);
+	
+		if (weekno == 0) {
+			year--;
+		
+			var prevNewYear = new Date(year,0,1);
+			var prevmodDay = prevNewYear.getDay();
+			if (prevmodDay == 0) prevmodDay = 6; else prevmodDay--;
+			if (prevmodDay < 4) weekno = 53; else weekno = 52;
+		}
+	}
+
+	return weekno;
+};
+
+Date.prototype.getISO8601Week = function() {
+	var d = new Date(this);
+	d.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7 + 3);
+	var ms = d.valueOf();
+	d.setUTCMonth(0, 4);
+	var w = Math.round((ms - d.valueOf()) / 604800000) + 1;
+	if (w <= 9) { w = "0" + w; }
+	return w;
+};
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekCarousel.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekCarousel.js
index bd02879..c956d06 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekCarousel.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekCarousel.js
@@ -27,6 +27,7 @@ enyo.kind({
 	{	currentDate	: null	// Date		: For watching when the current date changes.
 	,	events		: null	// Array	: For watching events (aka cache updates).		// TODO: Change to "cache": null // Boolean: ...
 	,	prefs		: null	// Object	: For watching preferences changes.
+	,	uberWorkWeek: null  // Bool		: for work week in week view
 	},
 
 	components: [
@@ -42,11 +43,11 @@ enyo.kind({
 
 	create: function create () {
 		this.inherited (arguments);
-		enyo.application.watch ({ events:this, prefs:this });
+		enyo.application.watch ({ events:this, prefs:this, uberWorkWeek: this});
 	},
 
 	destroy: function destroy () {
-		enyo.application.ignore ({ currentDate:this, events:this, prefs:this });	// !!! Ignore currentDate here b/c DomNode.showingChanged() is only called on create() not on destroy() !!!
+		enyo.application.ignore ({ currentDate:this, events:this, prefs:this, uberWorkWeek: this});	// !!! Ignore currentDate here b/c DomNode.showingChanged() is only called on create() not on destroy() !!!
 		this.inherited (arguments);
 	},
 
@@ -71,18 +72,21 @@ enyo.kind({
 
 		var	currentDate = enyo.application.currentDate;
 
-		DEBUG && this.log ("\tCurrentWeek: [",this.currentWeek,"]\tCurrentDate: [",currentDate,"]\t");
+		this.log ("\tCurrentWeek: [",this.currentWeek,"]\tCurrentDate: [",currentDate,"]\t");
 		
 		var oldCurrentWeek = this.currentWeek && +this.currentWeek;	
 		!this.currentWeek	&&	(this.currentWeek = new Date());				//	Create the current week if it doesn't exist.
 		currentDate			&&	(this.currentWeek.setTime (+currentDate));		//	Update the current week to the actual current date if it exists.
-
+		if(this.uberWorkWeek && this.startOfWeek !== 1){this.startOfWeek = 1;}
 		var	notStartOfWeek	=	this.currentWeek.getDay() != this.startOfWeek;
 		notStartOfWeek		&&	this.currentWeek.clearTime().moveToDayOfWeek (this.startOfWeek, -1);	// Move currentWeek to the 1st day of that week.
 
-		DEBUG && this.log ("\n\n============ WEEK:",String (this.currentWeek),"============\n\n");
+		this.log ("\n\n============ WEEK:",String (this.currentWeek),"============\n\n");
 		
-		if (+this.currentWeek != oldCurrentWeek) {
+		var todayTest = (new Date(this.getCurrentDay(currentDate))).clearTime().getTime();
+		var tday = (new Date).clearTime().getTime();
+		DEBUG && this.log ("\tCurrentWeek today test: [",todayTest,"]\ttodayTS: [",this.todayTS,"]\t");
+		if (+this.currentWeek != oldCurrentWeek || (todayTest !== this.todayTS && todayTest === tday)) {
 			this.viewsReady = false;			// VirtualCarousel doesn't allow you to pass through any additional parameters to setupView so we have to do this.
 			this.$.weekCarousel.renderViews(0);
 			this.viewsReady = true;
@@ -109,6 +113,9 @@ enyo.kind({
 		}
 		--startOfWeek;								// Date.getDay() is zero-based, but Calendar prefs startOfWeek is 1-based.
 
+		if(this.uberWorkWeek && startOfWeek !== 1){
+			startOfWeek = 1;
+		}
 		if (this.startOfWeek == startOfWeek) {
 			return;									// Start of week hasn't changed so do nothing.
 		}
@@ -134,6 +141,52 @@ enyo.kind({
 		}
 
 		enyoApp.autoDate = true;	// Reset autoDate mode.
+		if(this.showing && this.delayedUberWorkWeekChange === true){
+			//for group and work week changes when not active scene
+			this.delayedUberWorkWeekChange = false;
+			this.uberWorkWeekChanged();
+		}
+		if(this.showing && this.resizedWhileHidden === true){
+			//for pane width changes when not active scene
+			this.resized();
+			this.performResize(true);
+			this.resizedWhileHidden = false;
+		}
+		this.resizedWhileHidden = false;
+		this.delayedUberWorkWeekChange = false;
+	},
+
+	uberWorkWeekChanged: function uberWorkWeekChanged(old){
+		//console.error("Week carousel uberWorkWeek Changed!!!!!" + this.uberWorkWeek + " , old: " + old);
+		if(!this.showing){
+			//console.error("Week carousel not showing uberWorkWeek Changed!!!!!" + this.uberWorkWeek + " , old: " + old);
+			this.delayedUberWorkWeekChange = true;
+		} else if(old !== this.uberWorkWeek && (this.generated && this.showing && this.currentWeek) && old !== null){
+			var prefs		= this.prefs || enyo.application.prefsManager.prefs
+			,	startOfWeek	= prefs && prefs.startOfWeek
+			;
+			--startOfWeek;
+			if(this.uberWorkWeek && startOfWeek !== 1){
+				this.startOfWeek = 1;
+			} else if(!this.uberWorkWeek && this.startOfWeek !== startOfWeek){
+				this.startOfWeek = startOfWeek;
+			}
+			
+			var	notStartOfWeek	=	this.currentWeek.getDay() != this.startOfWeek;
+			if(notStartOfWeek && this.currentWeek.getDay() < this.startOfWeek){
+				this.currentWeek.clearTime().moveToDayOfWeek (this.startOfWeek, 1);
+			} else if(notStartOfWeek && this.currentWeek.getDay() > this.startOfWeek){
+				this.currentWeek.clearTime().moveToDayOfWeek (this.startOfWeek, -1);
+			}
+				
+			if(this.uberWorkWeek !== old){
+				this.viewsReady = false;			// VirtualCarousel doesn't allow you to pass through any additional parameters to setupView so we have to do this.
+				this.$.weekCarousel.renderViews(0,true);
+				this.viewsReady = true;
+				this.eventsChanged();
+			}
+			
+		}
 	},
 
 // BEGIN :-------: Custom Handlers :--------------------------------------------------------------------------------------------------------------------------//
@@ -141,7 +194,15 @@ enyo.kind({
 	viewSwitchedHandler: function viewSwitchedHandler(viewName){
 		this.broadcastMessage("becameCurrentPane", [(viewName == "weekCarousel")]);
 	},
-
+	
+	performResize: function performResize(resizeNeeded){
+		if(!this.showing){
+			this.resizedWhileHidden = true;
+		} else {
+			this.broadcastMessage("childNeedsResize", [resizeNeeded]);
+		}
+	},
+	
 // BEGIN :-------: Custom Methods :---------------------------------------------------------------------------------------------------------------------------//
 
 	getCurrentDay: function getCurrentDay (currentDate) {
@@ -166,6 +227,7 @@ enyo.kind({
 		var viewDate	= (new Date(this.currentWeek)).addWeeks (inViewIndex)
 		,	timeMachine		= this.timeMachine
 		;
+		this.todayTS = (new Date()).clearTime().getTime();
 
 		if (this.viewsReady) {
 
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekHeader.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekHeader.js
index 6bc90c4..477d38b 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekHeader.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekHeader.js
@@ -22,6 +22,7 @@ enyo.kind({
 	published:
 	{	date		: null	// Date		: This week's start date.
 	,	startOfWeek	: 0		// Number	: The first day (0:Sunday -> 6:Saturday) of this week.
+	,	uberWorkWeek: null  // Bool		: for work week in week view
 	},
 
 	G11N:
@@ -30,10 +31,13 @@ enyo.kind({
 	},
 
 	components: [
-		{name:"dateHeader", kind:"calendar.DateHeader", className:"date", duration:6, fit: false, formats:{
-				"short"	: new enyo.g11n.DateFmt ({date:"medium"})
-			,	full	: new enyo.g11n.DateFmt ({date:"long"})
-		}},
+		{kind:enyo.HFlexBox, components:[
+			{name:"dateHeader", kind:"calendar.DateHeader", className:"date", duration:6, fit: true, flex:1, formats:{
+					"short"	: new enyo.g11n.DateFmt ({date:"medium"})
+				,	full	: new enyo.g11n.DateFmt ({date:"long"})
+			}},
+			{name:"weekNumber"	, className:"today", showing:false}
+		]},
 		{name:"dayHeader", className:"days-header", kind: enyo.HFlexBox}
 	],
 
@@ -48,6 +52,12 @@ enyo.kind({
 		var dayHeader	= this.$.dayHeader
 		,	weekLength	= this.G11N.Fmts.dateTimeHash.long.day.length
 		;
+		if(this.uberWorkWeek === null){
+			this.uberWorkWeek = enyo.application.uberWorkView;	
+		}
+		if(this.uberWorkWeek){
+			weekLength = 5;
+		}
 		for (var i=0; i < weekLength; ++i) {
 			dayHeader.createComponent (
 			{	name		: "dayLabel" + i
@@ -61,8 +71,9 @@ enyo.kind({
 	},
 
 	dateChanged: function dateChanged (oldDate) {
+		//console.error("date changed : " + ((new Date()).clearTime().getTime()) + " , todayts : " + this.today);
 		var date = this.date;
-		if (!date || +this.date === +oldDate) {
+		if (!date || (+this.date === +oldDate && ((this.today && ((new Date()).clearTime().getTime()) === this.today )|| !this.today))) {
 			return;
 		}
 		var	ui			= this.$
@@ -70,16 +81,69 @@ enyo.kind({
 		;
 		ui.dateHeader.setDate (new Date(startDate));
 		this.startOfWeekChanged();
+		this.uberWeekNumber();
+	},
+	
+	uberWeekNumber: function uberWeekNumber (){
+		var prefs	= this.prefs || enyo.application.prefsManager.prefs;
+		if(!prefs.showWkNumber || !prefs.weekViewEnhanced) {
+			this.$.weekNumber.setShowing(false);
+			return;
+		}
+		var useISOweekNum = prefs.useISOWeekNumber
+		,	dayDate		= new Date (this.date || Date.now())
+		,	weekNumOffset = prefs.weekNumberOffset
+		,	weekModulusNum = prefs.weekModulusNum
+		,	prefStartDoW = prefs.startOfWeek -1
+		,	year = dayDate.getFullYear()
+		,	month = dayDate.getMonth()
+		,	day = dayDate.getDate()
+		,	maxwkn
+		,	weekNumber;
+		
+		if(this.uberWorkWeek && prefStartDoW !== 1){prefStartDoW =1;}
+		dayDate.setTime(Date.UTC(year, month, day));
+		
+		if(useISOweekNum === true){
+			weekNumber = dayDate.getISO8601Week();
+			maxwkn = new Date(Date.UTC((month != 0 ? year : year -1), 11, 28)).getISO8601Week();
+		} else {
+				dayDate = (dayDate.getDay() !== prefStartDoW) ? dayDate.moveToDayOfWeek(prefStartDoW, -1) : dayDate;
+				weekNumber = dayDate.getWeekOfYear(prefStartDoW);
+				dayDate.setTime(Date.UTC((month != 0 ? year : year -1), 11, 31));
+				dayDate.getDay() !== prefStartDoW && dayDate.moveToDayOfWeek(prefStartDoW, -1);
+				maxwkn = dayDate.getWeekOfYear(prefStartDoW);
+				weekNumber = weekNumber === 0 ? 1 : weekNumber;
+		}
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		weekNumber = weekNumber == 0 ? maxwkn : weekNumber;
+		if(weekNumOffset !== undefined && weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(weekModulusNum != undefined && weekModulusNum <= 52 && weekModulusNum != 1) {
+			modNumber = (parseInt(weekNumber, 10) % weekModulusNum);
+			modNumber = modNumber !== 0 ? modNumber : weekModulusNum;
+			weekNumber = weekNumber + ' (' + modNumber +')';
+		}
+		
+		this.$.weekNumber.setShowing(true);
+		var wkTemplate = new enyo.g11n.Template($L("Wk #{weekStr}"));
+		var weekTxt = wkTemplate.evaluate({weekStr: weekNumber});
+		this.$.weekNumber.setContent(weekTxt);
 	},
 
 	startOfWeekChanged: function startOfWeekChanged (oldStartOfWeek) {
-		if (this.startOfWeek === oldStartOfWeek) {
+		//console.error("start of week changed : " + ((new Date()).clearTime().getTime()) + " , todayts : " + this.today);
+		if (this.startOfWeek === oldStartOfWeek && ((this.today && ((new Date()).clearTime().getTime()) === this.today) || !this.today)) {
 			return;
 		}
 		var	days		= this.$.dayHeader.getComponents()
 		,	date		= this.timeMachine
 		,	weekLength = this.G11N.Fmts.dateTimeHash.long.day.length
 		;
+		if(this.uberWorkWeek){weekLength = 5;}
 		date.setTime (Date.now());
 		var	today = +date.clearTime();
 		date.setTime (this.date);
@@ -88,8 +152,30 @@ enyo.kind({
 			day = days[i];
 			day.setContent (this.G11N.HeaderFmt.format (date));
 			day.date = +date; // For the clickHandler
+			if(day.date == today){this.today = today;}
 			(day.date == today) ? day.addClass ("todayDate") : day.removeClass ("todayDate");
 			date.addDays (1);
 		}
+	},
+	
+	uberWorkWeekChanged: function uberWorkWeekChanged(old){
+		//console.error("Week header uberWorkWeek Changed!!!!!" + this.uberWorkWeek + " , old: " + old);
+		if(this.uberWorkWeek !== old && this.uberWorkWeek !== null){
+			var dayHeader	= this.$.dayHeader
+			,	weekLength	= (this.uberWorkWeek ? 5 : 7)
+			;
+			dayHeader.destroyComponents();
+			for (var i=0; i < weekLength; ++i) {
+				dayHeader.createComponent (
+				{	name		: "dayLabel" + i
+				,	className	: "day"
+				,	align		: "center"
+				,	pack		: "center"
+				,	flex		: 1
+				,	owner		: this
+				});
+			}
+			this.dateChanged();
+		}
 	}
 });
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.css b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.css
index c8349e4..a924b0a 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.css
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.css
@@ -9,7 +9,7 @@
 
 .calendar .week-view .week-header .date	{
 	color					: #333;
-	font-size				: 40px;
+	font-size				: 36px;
 	font-weight				: 100;
 	margin 					: 0;
 	overflow 				: hidden;
@@ -24,6 +24,10 @@
 /*	font-family: PreludeWGL-Light;*/
 }
 
+.calendar .week-view {
+	overflow:hidden;
+}
+
 /* Week View Header Days Styling */
 .calendar .week-view .week-header .days-header {
 	border					: none;
@@ -44,7 +48,7 @@
 .calendar .week-view .week-hours{
 	border 					: 1px solid #dbdbdb;
 	overflow 				: hidden;
-}
+}/*
 .calendar .week-view .week-hours .allday-header {
 	font-size				: 16px;
 	text-align				: left;
@@ -60,6 +64,25 @@
 	font-size				: 14px;
 	line-height				: 36px;
 	margin-right			: 10px;
+	overflow				:hidden;
+}
+*/
+.calendar .week-view .allday-header {
+	background-color		: #fff;
+	min-height				: 30px;
+	font-size				: 14px;
+	text-align				: left;
+/*	padding-left			: 10px;
+	background				: url(images/allday-header-border.png) repeat-x bottom;
+*/	overflow				:hidden;
+}
+.calendar .week-view .allday-header .label{
+	color 					: #666666;
+	font-size				: 14px;
+	line-height				: 30px;
+	margin-right			: 0px;
+	background-color		: #fff;
+	overflow				: hidden;
 }
 .calendar .week-view .week-hours .days {
 	background				: transparent;
@@ -67,7 +90,7 @@
 	height					: 1479px;
 }
 .calendar .week-view .week-hours .hours {
-	margin-top				: 29px!important;
+	margin-top				: 0px!important;
 }
 .calendar .week-view .week-hours .hour {
 	background				: url(../day/images/day-hour-markers.png) no-repeat;
@@ -99,15 +122,28 @@
 }
 
 .calendar .week-view .todayDate	{
-	color					: #333;
-}
-
+	color					: red;
+}
+.calendar .week-view .allday-header .allday-event	{
+	margin						: 8px 3px 8px 0px;
+	padding						: 0px 8px;
+	-webkit-border-radius		: 16px;
+}
+.calendar .week-view .allday-header .allday-event	.text{
+	color 						: #333;
+	font-weight					: bold;
+	font-size					: 12px;
+	opacity 					: 0.8;
+	overflow 					: hidden;
+	padding						: 3px 3px;
+	text-align					: center;
+}/*
 .calendar .week-view .day .allday-header {
 	background				: none;
 }
 .calendar .week-view .day .allday-header .label {
 	display 				: none;
-}
+}*/
 .calendar .week-view .day .hour	{
 	background				: none;
 	padding					: 0;
@@ -121,10 +157,10 @@
 	padding					: 0;
 }
 .calendar .hourLabels		{
-	height					: 1410px!important; 
+	/*height					: 1410px!important;*/ 
 }
 .events-header {
 	width					: 67px; 
 	margin-left				: -12px; 
 	text-align				: center;
-}
+}
\ No newline at end of file
diff --git a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.js b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.js
index efcb2ab..ed8706d 100644
--- a/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.js
+++ b/media/cryptofs/apps/usr/palm/applications/com.palm.app.calendar/app/week/WeekView.js
@@ -31,6 +31,11 @@ enyo.kind({
 	,	prefs	: null		// Object	: For watching Preferences changes (i.e. startOfWeek).
 	,	range	: null		// Object	: {start:Number, end:Number}: This week's start and end timestamps.
 	,	tzId	: ""		// String	: For watching timezone changes.
+	,	uberWorkWeek: null  // Bool		: for work week in week view
+	,	hourHeight: 59		//
+	,	useIcons: true
+	,	alarmIcons: true
+	,	enhancedView: true
 	},
 
 	G11N:
@@ -38,12 +43,34 @@ enyo.kind({
 	},
 
 	components:	[
+		{kind:"ApplicationEvents", onWindowRotated			: "windowRotatedHandler"},
 		{name:"header", kind:"calendar.week.WeekHeader"},
+		{name:"allDayContainer", className:"allday-header", kind: enyo.HFlexBox, components: [
+			{name:"allDayLabel", style:"padding-left:3px;width:62px;border-right:3px double #eaeaea;padding-right:0px;background:#fff;", className:"label"},
+			{kind:enyo.Scroller, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, style:"height:35px;padding:0px;margin-left:-2px;border-right:1px solid #dbdbdb;overflow:hidden;", flex:1, components: [
+				{name:"allDayHeader0", kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]},
+			{kind:enyo.Scroller, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, flex:1, style:"height:35px;border-right:1px solid #dbdbdb;overflow:hidden;", components: [
+				{name:"allDayHeader1", kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]},
+			{kind:enyo.Scroller, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, flex:1, style:"height:35px;border-right:1px solid #dbdbdb;overflow:hidden;", components: [
+				{name:"allDayHeader2", kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]},
+			{kind:enyo.Scroller, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, flex:1, style:"height:35px;border-right:1px solid #dbdbdb;overflow:hidden;", components: [
+				{name:"allDayHeader3", kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]},
+			{kind:enyo.Scroller, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, flex:1, style:"height:35px;border-right:1px solid #dbdbdb;overflow:hidden;", components: [
+				{name:"allDayHeader4", kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]},
+			{name:"allDayScroller5", kind:enyo.Scroller, showing: true, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, flex:1, style:"height:35px;border-right:1px solid #dbdbdb;overflow:hidden;", components: [
+				{name:"allDayHeader5", showing: true, kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]},
+			{name:"allDayScroller6", kind:enyo.Scroller, showing: true, autoVertical: true, vertical:true, autoHorizontal:false, horizontal:false, flex:1, style:"height:35px;margin-right:-4px;padding-right:4px;overflow:hidden;", components: [
+				{name:"allDayHeader6", showing: true, kind: enyo.VFlexBox, defaultKind:"calendar.eventView", onclick:""}
+			]}
+		]},
 		{name:"weekHours", className:"week-hours", kind: enyo.Scroller, flex:1, autoHorizontal:false, horizontal:false, vertical:true, components: [
 			{name: "weekContainer", className: "week-container", kind: enyo.Control, components: [
-				{name:"allDayContainer", className:"allday-header", kind: enyo.HFlexBox, components: [
-					{name:"allDayLabel", className:"label enyo-text-ellipsis events-header"}
-				]},
 				{name:"hourLabels"	, className:"hours", kind:"calendar.day.DayHours"},
 				{name:"week"	, className:"days enyo-fit", kind: HJSFlex, defaultKind:"calendar.day.DayView"}
 			]}
@@ -65,20 +92,37 @@ enyo.kind({
 
 	create: function create () {
 		this.inherited (arguments);
-
+		if(this.uberWorkWeek === null){
+			this.uberWorkWeek = enyo.application.uberWorkView;	
+		}
 		this.prefsChanged();
 		this.is24Hr === undefined && this.setIs24Hr(!enyo.application.fmts.isAmPm());	// If 24Hr isn't set yet, grab the current setting.
 
 		var ui = this.$;
+		if(this.uberWorkWeek){
+			ui.allDayScroller5.setShowing(false);
+			ui.allDayHeader5.setShowing(false);
+			ui.allDayScroller6.setShowing(false);
+			ui.allDayHeader6.setShowing(false);
+		}
 		ui.allDayLabel.setContent (this.G11N.Events);
-
 		this.weekdays = [];
-
-		for (var week=ui.week, i=0; i < 7; i++) {
+		ui.weekContainer.applyStyle("height", ((this.hourHeight +1)*24) +"px");
+		ui.hourLabels.applyStyle("height", ((this.hourHeight +1)*24) +"px");
+		ui.hourLabels.setHourHeight(this.hourHeight);
+		ui.week.applyStyle("height", ((this.hourHeight +1)*24) +"px");
+		var len	= this.uberWorkWeek ? 5 : 7;
+		for (var week=ui.week, i=0; i < len; i++) {
+			
 			this.weekdays[i]  = week.createComponent
 			({	flex			: 1
 			,	inWeekView		: true
 			,	owner			: this
+			,	enhancedView	: this.enhancedView
+			,	hourHeight		: this.hourHeight
+			,	useIcons		: this.useIcons
+			,	alarmIcons		: this.alarmIcons
+			,	weekAllDayHeader: this.$["allDayHeader"+i]
 			});
 		}
 		this.broadcastMessage ("isActive", [true]);
@@ -91,6 +135,13 @@ enyo.kind({
 
 // BEGIN :-------: Custom Handlers :-----------------------------------------------------------------------------------------------------------------------//
 	
+	childNeedsResizeHandler: function childNeedsResizeHandler(resizeNeeded){
+		//console.error("I am here child resize!!!!!!!!");
+		this.$.week && this.$.week.performResize();
+		this.$.week && this.$.week.broadcastMessage("childrenNeedResize", [resizeNeeded]);
+		//this.$.week && this.$.week.broadcastMessage("childNeedsResize", [resizeNeeded]);
+	},
+	
 	becameCurrentPaneHandler: function becameCurrentPaneHandler(isCurrentPane){
 		this.$.week && this.$.week.broadcastMessage("becameCurrentPane", [isCurrentPane]);
 	},
@@ -99,6 +150,10 @@ enyo.kind({
 		enyo.application [isActive ? "watch" : "ignore"] (this.commonWatches);
 		this.$.week && this.$.week.broadcastMessage ("isActive", [isActive]);
 	},
+	
+	windowRotatedHandler: function windowRotatedHandler(){
+		this.showing && this.updateCurrentHour ({scroll: true});
+	},
 
 // BEGIN: Published Properties Change Handlers ---------------------------------------------------------------------------------------------------------------//
 
@@ -111,15 +166,14 @@ enyo.kind({
 		if(!date) {
 			return;
 		}
-
 		var weekdays = this.weekdays;
 
-		this.$.header && this.$.header.setDate (this.date);
+		this.$.header && this.$.header.setDate (new Date(date));
 
 		var timeMachine = this.timeMachine;
 		timeMachine.setTime(+this.date);
-
-		for (var i=0; i < 7; i++) {
+		var len	= this.uberWorkWeek ? 5 : 7;
+		for (var i=0; i < len; i++) {
 			weekdays[i].setDate(new Date (timeMachine).addDays (i).clearTime());
 		}
 		this.updateCurrentHour ({scroll: true});
@@ -131,9 +185,11 @@ enyo.kind({
 			return;
 		}
 		var weekdays = this.weekdays;
-		for (var i=0; i < 7; i++) {
+		var len	= this.uberWorkWeek ? 5 : 7;
+		for (var i=0; i < len; i++) {
 			weekdays[i].setDays(days);
 		}
+		this.updateCurrentHour ({scroll: true});
 	},
 
 	is24HrChanged: function is24HrChanged(was24Hr){
@@ -143,16 +199,48 @@ enyo.kind({
 		}
 		this.$.hourLabels.setIs24Hr (is24Hr);
 	},
-
+	
 	prefsChanged: function prefsChanged (oldPrefs) {
 		var header	= this.$.header
 		,	prefs	= this.prefs || enyo.application.prefsManager.prefs
+		,	oldHeight= this.hourHeight
 		;
-		if (!header || !this.prefs || isNaN (this.prefs.startOfWeek)) {
+		if (!header || !prefs || isNaN (prefs.startOfWeek)) {
 			return;
 		}
+		
+		this.enhancedView = !!prefs.weekViewEnhanced;
+		this.useIcons = !!prefs.weekUseIcons;
+		this.alarmIcons = !!prefs.weekAlarmIcons;
+		this.hourHeight = prefs.weekHourHeight ? prefs.weekHourHeight : 59;
+		//compression check
+		if(oldHeight !== this.hourHeight && this.weekdays && this.weekdays.length > 0){
+			this.$.weekContainer.applyStyle("height", ((this.hourHeight +1)*24) +"px");
+			this.$.hourLabels.applyStyle("height", ((this.hourHeight +1)*24) +"px");
+			this.$.hourLabels.setHourHeight(this.hourHeight);
+			this.$.week.applyStyle("height", ((this.hourHeight +1)*24) +"px");
+			var len	= this.uberWorkWeek ? 5 : 7;
+			for (var i=0; i < len; i++) {
+				this.weekdays[i].prefsChanged();
+			}
+			this.childNeedsResizeHandler(true);
+			this.updateCurrentHour ({scroll: true});
+		} else if(this.weekdays && this.weekdays.length > 0){
+			var len	= this.uberWorkWeek ? 5 : 7;
+			for (var i=0; i < len; i++) {
+				this.weekdays[i].prefsChanged();
+			}
+		}
+		header.setUberWorkWeek(this.uberWorkWeek);
 		this.date && header.setDate			(this.date);
-		header.setStartOfWeek	(this.prefs.startOfWeek - 1);	// Date.getDay() is zero-based, but Calendar prefs startOfWeek is 1-based.
+		var startOfWeek = prefs.startOfWeek -1
+		if(this.uberWorkWeek && startOfWeek !== 1){startOfWeek = 1;}
+		header.setStartOfWeek	(startOfWeek);	// Date.getDay() is zero-based, but Calendar prefs startOfWeek is 1-based.
+	},
+	
+	uberWorkWeekChanged: function uberWorkWeekChanged(old){
+		console.error("Week View uberWorkWeek Changed function!!!!!" + this.uberWorkWeek + " , old: " + old);
+		
 	},
 
 // BEGIN: Custom Methods -------------------------------------------------------------------------------------------------------------------------------------//
@@ -170,6 +258,8 @@ enyo.kind({
 		,	timeMachine	= this.timeMachine
 		,	ui			= this.$
 		,	hourLabels	= ui.hourLabels.hours
+		,	prefs		= enyo.application.prefsManager.prefs
+		,	prefsHour	= (new Date(prefs.startTimeOfDay)).getUTCHours()
 		;
 
 		timeMachine.setTime (weekDate);
@@ -183,15 +273,15 @@ enyo.kind({
 		isToday	&& hourLabels[currentHour].setIsCurrentHour (true);				// If this week contains today, update the now (current hour) indicator.
 		this.currentHour = currentHour;
 
-		if (options && options.scroll) {
-			/*(currentHour > 0) && (--currentHour); 							// Scroll to the hour before the current hour.
-			currentHour = Math.min(currentHour, 17); 							// Can't scroll past 4pm anyway
-			var top = 59 * currentHour;
-			isFinite(top) && ui.hours.setScrollTop(top);*/
-			(currentHour > 0) && (--currentHour);
-			currentHour = Math.min(currentHour, 17); 							// Can't scroll past 4pm anyway
+		if (isToday && prefs.scrollToCurrentTime) {
+			(currentHour > 0) && (--currentHour);												// Scroll to the hour before the current hour.
+			currentHour = Math.min(currentHour, 16);
 			var	top = hourLabels [currentHour].hasNode();
-			isFinite (top && (top = top.offsetTop)) && ui.weekHours.setScrollTop (top);			// Scroll to the hour before the current hour.
+			isFinite (top && (top = top.offsetTop)) && ui.weekHours.setScrollTop (top);
+		} else {
+			var	top = hourLabels [prefsHour].hasNode();
+			//console.log(top && top.offsetTop);
+			isFinite(top && (top = top.offsetTop)) && ui.weekHours.setScrollTop (top);			// Scroll to the hour before the current hour.
 		}
 	}
 });
diff --git a/usr/palm/frameworks/calendar/submission/42/concatenated.js b/usr/palm/frameworks/calendar/submission/42/concatenated.js
index 2be0db1..181385d 100755
--- a/usr/palm/frameworks/calendar/submission/42/concatenated.js
+++ b/usr/palm/frameworks/calendar/submission/42/concatenated.js
@@ -1028,6 +1028,68 @@ RRuleManager.prototype = {
 	},
 
 	/*
+	 * setPosTest: determines if using a setPos rule
+	 * param rule     a BYDAY rule
+	 * param todayDate a date object
+	 * returns false or {inUse: true, lastDayWanted: Date} object that satisfies the last rule
+	*/
+	setPosTest: function (rule, todayDate) {
+		var inUse = false;
+		var ruleLength = rule.ruleValue.length;
+		if(ruleLength && ruleLength >1) {
+			var byDayArray = [];
+			var ford = parseInt(rule.ruleValue[0].ord, 10);
+			for(var i=0; i<ruleLength; i++) {
+				var ord = parseInt(rule.ruleValue[i].ord, 10);
+				if(ord && ord !== ford) {//we only care about last week type repeat
+					inUse = false; //default to just using first byday
+					return false; //cal doesn't support multiple pos days in monthly repeat 
+				} else if(ord && ord === ford) {
+					var DoW = rule.ruleValue[i].day;
+					if(byDayArray.indexOf(DoW) === -1) {//not in previously
+						byDayArray.push(DoW);
+					}
+					inUse = true;
+				}
+			} //should have an array with the last days wanted
+			if(inUse && byDayArray.length > 0) {
+				var dlen = 24*60*60*1000;
+				if(ford < 0) {
+					var beginMonthDay = -1;
+					var Lmon = todayDate.getMonth();
+					var Lyear = todayDate.getFullYear();
+					var nextMon = (Lmon + 1) > 11 ? Lmon +1 - 12 : Lmon + 1;
+					var nextYear = (Lmon + 1 ) > 11 ? Lyear + 1 : Lyear; 
+					var DayOfMonthTS = new Date(nextYear, nextMon, 1, 0, 0, 0, 0).getTime() + beginMonthDay*dlen;
+				} else if(ford >0) {
+					var beginMonthDay = 1;
+					var Lmon = todayDate.getMonth();
+					var wantedYear = todayDate.getFullYear();
+					var DayOfMonthTS = new Date(wantedYear, Lmon, 1, 0, 0, 0, 0).getTime();
+				}
+				var DoW = new Date(DayOfMonthTS).getDay();
+				for(var i=0; i< Math.abs(ford); i++) {
+					while(byDayArray.indexOf(DoW) === -1) {
+						DayOfMonthTS = DayOfMonthTS + beginMonthDay*dlen;
+						DoW = new Date(DayOfMonthTS).getDay();
+					}
+					if(i !== Math.abs(ford) - 1){
+						DayOfMonthTS = DayOfMonthTS + beginMonthDay*dlen;
+						DoW = new Date(DayOfMonthTS).getDay();
+					}
+				}
+				if(DayOfMonthTS) {
+					inUse = true;
+					var lastDay = new Date(DayOfMonthTS);
+					if(lastDay && lastDay.getMonth() === Lmon) {
+						return {InUse: inUse, WantDay: lastDay};
+					} else {return false;}
+				} else {return false;}
+			} else {return false;}
+		} else {return false;}
+	},
+
+	/*
 	 * byDayTest: Sets the rulesPresent flag for byDay flag position
 	 * Tests if todayDate matches the recurrence specified by rule and sets rulesTrue.
 	 * param rule      a BYDAY rule
@@ -1042,38 +1104,49 @@ RRuleManager.prototype = {
 		var negativeMonthPosition;
 		var monthPosition;
 		var ruleLength = rule.ruleValue.length;
-		for(var i = 0; i < ruleLength; i++) {
-			var ord = rule.ruleValue[i].ord;
-			var day = rule.ruleValue[i].day;
-			//this.rlog("byDayTest: ord: "+ord+", day: "+day);
-			if(ord) {
-				//this.rlog("byDayTest: has ord");
-				//find relevant month position of todayDate
-				if(ord > 0){
-					if (!positiveMonthPosition) {
-						positiveMonthPosition = this.findMonthPosition(todayDate, true);
+		var setProps = this.setPosTest(rule, todayDate);
+		// check for last week day, last weekend day, last work week day from a bysetpos type rule
+		if(setProps && setProps.InUse === true && setProps.WantDay) {
+			if(todayDate.getFullYear() === setProps.WantDay.getFullYear() &&
+				todayDate.getMonth() === setProps.WantDay.getMonth() &&
+				todayDate.getDate() === setProps.WantDay.getDate()) {
+				this.rlog("lastDay yes:  " + setProps.WantDay);				
+				this.setTrueFlag(flags, flagPosition);
+			}
+		} else {
+			for(var i = 0; i < ruleLength; i++) {
+				var ord = rule.ruleValue[i].ord;
+				var day = rule.ruleValue[i].day;
+				//this.rlog("byDayTest: ord: "+ord+", day: "+day);
+				if(ord) {
+					//this.rlog("byDayTest: has ord");
+					//find relevant month position of todayDate
+					if(ord > 0){
+						if (!positiveMonthPosition) {
+							positiveMonthPosition = this.findMonthPosition(todayDate, true);
+						}
+						monthPosition = positiveMonthPosition;
+						//this.rlog("byDayTest: has ord > 0, positiveMonthPosition: "+positiveMonthPosition);	
+					} else {
+						if (!negativeMonthPosition) {
+							negativeMonthPosition = this.findMonthPosition(todayDate, false);
+						}
+						monthPosition = negativeMonthPosition;	
+						//this.rlog("byDayTest: has ord <= 0, negativeMonthPosition: "+negativeMonthPosition);
 					}
-					monthPosition = positiveMonthPosition;
-					//this.rlog("byDayTest: has ord > 0, positiveMonthPosition: "+positiveMonthPosition);	
-				} else {
-					if (!negativeMonthPosition) {
-						negativeMonthPosition = this.findMonthPosition(todayDate, false);
+					//this.rlog("byDayTest: testing: ord: "+ord+" =?= "+monthPosition+" and day: "+ day+" =?= "+todayDate.getDay());
+					if(ord == monthPosition && day == todayDate.getDay()) {
+						this.setTrueFlag(flags, flagPosition);
+						//this.rlog("byDayTest: TRUE");
+						break;
 					}
-					monthPosition = negativeMonthPosition;	
-					//this.rlog("byDayTest: has ord <= 0, negativeMonthPosition: "+negativeMonthPosition);
 				}
-				//this.rlog("byDayTest: testing: ord: "+ord+" =?= "+monthPosition+" and day: "+ day+" =?= "+todayDate.getDay());
-				if(ord == monthPosition && day == todayDate.getDay()) {
+				else if (day == todayDate.getDay()) {
+					//this.rlog("byDayTest: SIMPLE TEST TRUE");
 					this.setTrueFlag(flags, flagPosition);
-					//this.rlog("byDayTest: TRUE");
 					break;
 				}
 			}
-			else if (day == todayDate.getDay()) {
-				//this.rlog("byDayTest: SIMPLE TEST TRUE");
-				this.setTrueFlag(flags, flagPosition);
-				break;
-			}
 		}
 	},
 
@@ -2150,6 +2223,7 @@ var EventManagerUtils = Class.create ({
 		var start12AM;
 		var end;
 		var end12AM;
+		var datesInEventSize = datesInEvent.length;
 		var occurrenceTracker = {};
 		var datesInRangeSize = datesInRange.length;
 		var eventOccurrences = [];
@@ -2179,7 +2253,9 @@ var EventManagerUtils = Class.create ({
 			//Did the event's repeat cycle already end?			
 			if(this.repeatEndedBeforeDate(event.rrule, event.countInfo, date)){
 				//this.evlog(this.logLevels.repeatDetails, "findRepeatsInRange: exit: repeat already ended 2");
-				continue;
+				if(eventOccurrences.length > 0 ) {
+					return eventOccurrences;
+				} else { return this.noOccurrences;}
 			}
 
 			//Has the event's repeat cycle even started yet?
@@ -2194,6 +2270,10 @@ var EventManagerUtils = Class.create ({
 			
 			if(event.dtstart > nextMidnight) {
 				//this.evlog(this.logLevels.repeatDetails, "findRepeatsInRange: exit: repeat hasn't started yet 2");
+				var fastForward = Math.floor((event.dtstart - nextMidnight)/(24*60*60*1000));
+				if(fastForward > 4 && ((i + fastForward - 2) <= datesInRangeSize -3) && fastForward-3 > 0) {
+					i += fastForward - 2; //moving to 2 days before for tZ safety event.dtstart is not TZ adjusted
+				}
 				continue;
 			}		
 			
@@ -2288,6 +2368,45 @@ var EventManagerUtils = Class.create ({
 			}	
 								
 			eventOccurrences.push (nextOccurrence);
+
+			//we just found an occurence use the rule to estimate when the next time will occur
+			var skip = 0;
+			var ruleInt = 1;
+			switch (event.rrule.freq) {
+				case "YEARLY":
+					// 3 months
+					ruleInt = 90;
+					break;
+					
+				case "MONTHLY":
+					//  <4 weeks
+					ruleInt = 25;
+					break;
+					
+				case "WEEKLY": // possible multiples per week
+				case "DAILY":
+				default:
+					ruleInt = 1;
+					break;
+			}
+			// can't repeat during event or before interval
+			if(event.rrule.interval && event.rrule.interval >= 1) {
+				var inter = event.rrule.interval * ruleInt;
+				if(datesInEventSize && datesInEventSize > 3) {
+					var durAdd = datesInEventSize -2;
+				}
+				if(durAdd && inter) {
+					if(inter > durAdd){
+						skip += inter;
+					} else {
+						skip += durAdd;
+					}
+				}
+			}
+			
+			if(skip >= 0) { // skip forward
+				i += skip;
+			}
 			numFound++;
 			if (numFound === limit) {
 				//this.evlog(this.logLevels.repeatDetails, "findRepeatsInRange: hit limit");
@@ -3064,7 +3183,7 @@ var EventManager = Class.create ({
 					event = eventSet[i];
 					okEvent = ("dtstart" in event) && ("dtend" in event) && isFinite(event.dtstart) && isFinite(event.dtend);
 					if(!okEvent){
-						console.error("===== Skipping malformed calendar event: "+event._id); 
+						console.error("===== Skipping malformed calendar event: "+event._id + ", subject: " + event.subject); 
 						continue; 
 					}
 					
diff --git a/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js b/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js
index 0d6fe60..0fdc242 100644
--- a/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js
+++ b/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js
@@ -27,6 +27,7 @@ SnoozeCommandAssistant.prototype.run = function(outFuture){
 	
 	var snoozeDuration = args.snoozeDuration;	
 	var reminderId = args.reminderId;
+	var autoCloseTime = args.autoCloseTime;
 	
 	if (!reminderId) {
 		var errorString = "Missing args! Need reminderId.  Received: "+JSON.stringify(args);
@@ -38,9 +39,22 @@ SnoozeCommandAssistant.prototype.run = function(outFuture){
 	}
 	
 	var date = new Date();
-	date.setMilliseconds(0);
+	//date.setMilliseconds(0);
 	var snoozeUntil = date.getTime() + snoozeDuration;
 	
+	if(!autoCloseTime){
+		var params = {
+		"_id": reminderId,
+		"showTime": snoozeUntil
+		}
+	} else {
+		var params = {
+		"_id": reminderId,
+		"showTime": snoozeUntil,
+		"autoCloseTime": autoCloseTime
+		}
+	}
+
 	//Update the reminder with the new alarm time
 	var future = DB.find(
 		{	"from": "com.palm.service.calendar.reminders:1", 
@@ -56,7 +70,7 @@ SnoozeCommandAssistant.prototype.run = function(outFuture){
 		var returnValue = result.returnValue;
 		var results = result.results;
 		if(returnValue && results && results.length){
-			future.nest(DB.merge([{"_id": reminderId, "showTime": snoozeUntil}]));
+			future.nest(DB.merge([params]));
 		}
 		else{
 			rmdrLog("********** Tried to snooze a reminder that doesn't exist or query failed: "+reminderId);
